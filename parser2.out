Grammar:

Rule 0     S' -> compound_stmt
Rule 1     compound_stmt -> compound_stmt statement
Rule 2     compound_stmt -> statement
Rule 3     statement -> timeout_stmt
Rule 4     statement -> while_stmt
Rule 5     statement -> exit_stmt
Rule 6     statement -> break_stmt
Rule 7     statement -> if_elseif_stmt
Rule 8     statement -> if_else_stmt
Rule 9     statement -> if_stmt
Rule 10    statement -> import_stmt
Rule 11    statement -> bivf
Rule 12    statement -> reass_stmt
Rule 13    statement -> init_stmt
Rule 14    import_stmt -> IMPORT GAME EOL
Rule 15    reass_stmt -> ID ASSIGN expr EOL
Rule 16    reass_stmt -> ID ASSIGN array_val EOL
Rule 17    reass_stmt -> ID ASSIGN val EOL
Rule 18    init_stmt -> ARRAY ID ASSIGN array_val EOL
Rule 19    init_stmt -> data_type ID ASSIGN expr EOL
Rule 20    init_stmt -> data_type ID ASSIGN val EOL
Rule 21    data_type -> TETRO
Rule 22    data_type -> BOARD
Rule 23    data_type -> ARRAY
Rule 24    data_type -> STRING_TYPE
Rule 25    data_type -> INT_TYPE
Rule 26    array_val -> LBLOCKPAREN set RBLOCKPAREN
Rule 27    array_val -> LBLOCKPAREN RBLOCKPAREN
Rule 28    set -> set SEPARATOR expr
Rule 29    set -> set SEPARATOR val
Rule 30    set -> val
Rule 31    val -> STRING_LITERAL
Rule 32    val -> NUMBER
Rule 33    val -> birf
Rule 34    expr -> expr OR expr  [precedence=left, level=1]
Rule 35    expr -> expr AND expr  [precedence=left, level=2]
Rule 36    expr -> NOT expr  [precedence=left, level=3]
Rule 37    expr -> expr EE expr  [precedence=nonassoc, level=4]
Rule 38    expr -> expr NE expr  [precedence=nonassoc, level=4]
Rule 39    expr -> expr GTE expr  [precedence=nonassoc, level=4]
Rule 40    expr -> expr LTE expr  [precedence=nonassoc, level=4]
Rule 41    expr -> expr LT expr  [precedence=nonassoc, level=4]
Rule 42    expr -> expr GT expr  [precedence=nonassoc, level=4]
Rule 43    expr -> expr - expr  [precedence=left, level=5]
Rule 44    expr -> expr + expr  [precedence=left, level=5]
Rule 45    expr -> expr % expr  [precedence=left, level=6]
Rule 46    expr -> expr / expr  [precedence=left, level=6]
Rule 47    expr -> expr * expr  [precedence=left, level=6]
Rule 48    expr -> factor
Rule 49    expr -> - factor  [precedence=right, level=7]
Rule 50    factor -> ( expr )
Rule 51    factor -> operand
Rule 52    operand -> NUMBER
Rule 53    operand -> ID
Rule 54    params -> params SEPARATOR param
Rule 55    params -> param
Rule 56    param -> val
Rule 57    param -> ID
Rule 58    birf_wop -> GET_CHAR
Rule 59    birf_wop -> GET_BOARD
Rule 60    birf_wop -> GET_NEXT_TETROMINO
Rule 61    birf_wop_call -> birf_wop ( )
Rule 62    birf_wp -> ADVANCE
Rule 63    birf_wp -> ROTATE_LEFT
Rule 64    birf_wp -> ROTATE_RIGHT
Rule 65    birf_wp -> MOVE_RIGHT
Rule 66    birf_wp -> MOVE_LEFT
Rule 67    birf_wp -> CHECK_CLEARED_LINE
Rule 68    pop_call -> POP ( array_val )
Rule 69    pop_call -> POP ( ID )
Rule 70    len_call -> LEN ( array_val )
Rule 71    len_call -> LEN ( ID )
Rule 72    birf_wp_call -> len_call
Rule 73    birf_wp_call -> pop_call
Rule 74    birf_wp_call -> birf_wp ( params )
Rule 75    birf -> birf_wp_call
Rule 76    birf -> birf_wop_call
Rule 77    bivf_wop -> SET_MODE
Rule 78    bivf_wop -> SET_GAME_DIFFICULTY
Rule 79    bivf_wop -> PLAY_HW
Rule 80    bivf_wop -> CLEAR_SCREEN
Rule 81    bivf_wop -> DISPLAY_BOARD
Rule 82    bivf_wop -> GET_NAME
Rule 83    bivf_wp -> PUSH
Rule 84    bivf_wp -> REM
Rule 85    bivf_wp -> ADD_SCORE
Rule 86    bivf_wp -> DISPLAY_NEXT_TETRO
Rule 87    bivf_wp -> DISPLAY_TETRO
Rule 88    bivf_wp -> DISPLAY
Rule 89    bivf_wp -> CLEAR_LINE
Rule 90    bivf_wp -> HARD_DROP
Rule 91    set_speed_call -> SET_SPEED ( HARD )
Rule 92    set_speed_call -> SET_SPEED ( MEDIUM )
Rule 93    set_speed_call -> SET_SPEED ( EASY )
Rule 94    rem_call -> REM ( ID SEPARATOR ID )
Rule 95    rem_call -> REM ( ID SEPARATOR NUMBER )
Rule 96    rem_call -> REM ( array_val SEPARATOR ID )
Rule 97    rem_call -> REM ( array_val SEPARATOR NUMBER )
Rule 98    push_call -> PUSH ( ID SEPARATOR ID )
Rule 99    push_call -> PUSH ( ID SEPARATOR val )
Rule 100   bivf_wop_call -> bivf_wop ( )
Rule 101   bivf_wp_call -> bivf_wp ( params )
Rule 102   bivf -> set_speed_call EOL
Rule 103   bivf -> rem_call EOL
Rule 104   bivf -> push_call EOL
Rule 105   bivf -> bivf_wp_call EOL
Rule 106   bivf -> bivf_wop_call EOL
Rule 107   break_stmt -> BREAK EOL
Rule 108   exit_stmt -> EXIT EOL
Rule 109   empty -> <empty>
Rule 110   while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
Rule 111   timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
Rule 112   if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
Rule 113   if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
Rule 114   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
Rule 115   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
Rule 116   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
Rule 117   else_stmt -> empty
Rule 118   soft_drop -> SOFT_DROP_FLAG
Rule 119   hard_drop -> HARD_DROP_FLAG
Rule 120   arrow_right -> ARROW_RIGHT
Rule 121   arrow_left -> ARROW_LEFT
Rule 122   clockwise -> CLOCKWISE
Rule 123   anticlockwise -> ANTI_CLOCKWISE

Unused terminals:

    NORMAL
    SPRINT

Terminals, with rules where they appear:

%                    : 45
(                    : 50 61 68 69 70 71 74 91 92 93 94 95 96 97 98 99 100 101 110 111 112 113 114 115 116
)                    : 50 61 68 69 70 71 74 91 92 93 94 95 96 97 98 99 100 101 110 111 112 113 114 115 116
*                    : 47
+                    : 44
-                    : 43 49
/                    : 46
ADD_SCORE            : 85
ADVANCE              : 62
AND                  : 35
ANTI_CLOCKWISE       : 123
ARRAY                : 18 23
ARROW_LEFT           : 121
ARROW_RIGHT          : 120
ASSIGN               : 15 16 17 18 19 20
BOARD                : 22
BREAK                : 107
CHECK_CLEARED_LINE   : 67
CLEAR_LINE           : 89
CLEAR_SCREEN         : 80
CLOCKWISE            : 122
DISPLAY              : 88
DISPLAY_BOARD        : 81
DISPLAY_NEXT_TETRO   : 86
DISPLAY_TETRO        : 87
EASY                 : 93
EE                   : 37
ELSE                 : 113 114 115 116
EOL                  : 14 15 16 17 18 19 20 102 103 104 105 106 107 108
EXIT                 : 108
GAME                 : 14
GET_BOARD            : 59
GET_CHAR             : 58
GET_NAME             : 82
GET_NEXT_TETROMINO   : 60
GT                   : 42
GTE                  : 39
HARD                 : 91
HARD_DROP            : 90
HARD_DROP_FLAG       : 119
ID                   : 15 16 17 18 19 20 53 57 69 71 94 94 95 96 98 98 99
IF                   : 112 113 114 115 116
IMPORT               : 14
INT_TYPE             : 25
LBLOCKPAREN          : 26 27
LCURLYPAREN          : 110 111 112 113 113 114 115 116
LEN                  : 70 71
LT                   : 41
LTE                  : 40
MEDIUM               : 92
MOVE_LEFT            : 66
MOVE_RIGHT           : 65
NE                   : 38
NORMAL               : 
NOT                  : 36
NUMBER               : 32 52 95 97 111
OR                   : 34
PLAY_HW              : 79
POP                  : 68 69
PUSH                 : 83 98 99
RBLOCKPAREN          : 26 27
RCURLYPAREN          : 110 111 112 113 113 114 115 116
REM                  : 84 94 95 96 97
ROTATE_LEFT          : 63
ROTATE_RIGHT         : 64
SEPARATOR            : 28 29 54 94 95 96 97 98 99
SET_GAME_DIFFICULTY  : 78
SET_MODE             : 77
SET_SPEED            : 91 92 93
SOFT_DROP_FLAG       : 118
SPRINT               : 
STRING_LITERAL       : 31
STRING_TYPE          : 24
TETRO                : 21
TIMEOUT              : 111
WHILE                : 110
error                : 

Nonterminals, with rules where they appear:

anticlockwise        : 
array_val            : 16 18 68 70 96 97
arrow_left           : 
arrow_right          : 
birf                 : 33
birf_wop             : 61
birf_wop_call        : 76
birf_wp              : 74
birf_wp_call         : 75
bivf                 : 11
bivf_wop             : 100
bivf_wop_call        : 106
bivf_wp              : 101
bivf_wp_call         : 105
break_stmt           : 6
clockwise            : 
compound_stmt        : 1 110 111 112 113 113 114 115 116 0
data_type            : 19 20
else_stmt            : 
empty                : 117
exit_stmt            : 5
expr                 : 15 19 28 34 34 35 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 50 110 112 113 114 115 116
factor               : 48 49
hard_drop            : 
if_else_stmt         : 8 115
if_elseif_stmt       : 7 114
if_stmt              : 9 116
import_stmt          : 10
init_stmt            : 13
len_call             : 72
operand              : 51
param                : 54 55
params               : 54 74 101
pop_call             : 73
push_call            : 104
reass_stmt           : 12
rem_call             : 103
set                  : 26 28 29
set_speed_call       : 102
soft_drop            : 
statement            : 1 2
timeout_stmt         : 3
val                  : 17 20 29 30 56 99
while_stmt           : 4


state 0

    (0) S' -> . compound_stmt
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    compound_stmt                  shift and go to state 1
    statement                      shift and go to state 2
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 1

    (0) S' -> compound_stmt .
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    statement                      shift and go to state 49
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 2

    (2) compound_stmt -> statement .
    TIMEOUT         reduce using rule 2 (compound_stmt -> statement .)
    WHILE           reduce using rule 2 (compound_stmt -> statement .)
    EXIT            reduce using rule 2 (compound_stmt -> statement .)
    BREAK           reduce using rule 2 (compound_stmt -> statement .)
    IF              reduce using rule 2 (compound_stmt -> statement .)
    IMPORT          reduce using rule 2 (compound_stmt -> statement .)
    ID              reduce using rule 2 (compound_stmt -> statement .)
    ARRAY           reduce using rule 2 (compound_stmt -> statement .)
    SET_SPEED       reduce using rule 2 (compound_stmt -> statement .)
    REM             reduce using rule 2 (compound_stmt -> statement .)
    PUSH            reduce using rule 2 (compound_stmt -> statement .)
    TETRO           reduce using rule 2 (compound_stmt -> statement .)
    BOARD           reduce using rule 2 (compound_stmt -> statement .)
    STRING_TYPE     reduce using rule 2 (compound_stmt -> statement .)
    INT_TYPE        reduce using rule 2 (compound_stmt -> statement .)
    ADD_SCORE       reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_NEXT_TETRO reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_TETRO   reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY         reduce using rule 2 (compound_stmt -> statement .)
    CLEAR_LINE      reduce using rule 2 (compound_stmt -> statement .)
    HARD_DROP       reduce using rule 2 (compound_stmt -> statement .)
    SET_MODE        reduce using rule 2 (compound_stmt -> statement .)
    SET_GAME_DIFFICULTY reduce using rule 2 (compound_stmt -> statement .)
    PLAY_HW         reduce using rule 2 (compound_stmt -> statement .)
    CLEAR_SCREEN    reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_BOARD   reduce using rule 2 (compound_stmt -> statement .)
    GET_NAME        reduce using rule 2 (compound_stmt -> statement .)
    $end            reduce using rule 2 (compound_stmt -> statement .)
    RCURLYPAREN     reduce using rule 2 (compound_stmt -> statement .)


state 3

    (3) statement -> timeout_stmt .
    TIMEOUT         reduce using rule 3 (statement -> timeout_stmt .)
    WHILE           reduce using rule 3 (statement -> timeout_stmt .)
    EXIT            reduce using rule 3 (statement -> timeout_stmt .)
    BREAK           reduce using rule 3 (statement -> timeout_stmt .)
    IF              reduce using rule 3 (statement -> timeout_stmt .)
    IMPORT          reduce using rule 3 (statement -> timeout_stmt .)
    ID              reduce using rule 3 (statement -> timeout_stmt .)
    ARRAY           reduce using rule 3 (statement -> timeout_stmt .)
    SET_SPEED       reduce using rule 3 (statement -> timeout_stmt .)
    REM             reduce using rule 3 (statement -> timeout_stmt .)
    PUSH            reduce using rule 3 (statement -> timeout_stmt .)
    TETRO           reduce using rule 3 (statement -> timeout_stmt .)
    BOARD           reduce using rule 3 (statement -> timeout_stmt .)
    STRING_TYPE     reduce using rule 3 (statement -> timeout_stmt .)
    INT_TYPE        reduce using rule 3 (statement -> timeout_stmt .)
    ADD_SCORE       reduce using rule 3 (statement -> timeout_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 3 (statement -> timeout_stmt .)
    DISPLAY_TETRO   reduce using rule 3 (statement -> timeout_stmt .)
    DISPLAY         reduce using rule 3 (statement -> timeout_stmt .)
    CLEAR_LINE      reduce using rule 3 (statement -> timeout_stmt .)
    HARD_DROP       reduce using rule 3 (statement -> timeout_stmt .)
    SET_MODE        reduce using rule 3 (statement -> timeout_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 3 (statement -> timeout_stmt .)
    PLAY_HW         reduce using rule 3 (statement -> timeout_stmt .)
    CLEAR_SCREEN    reduce using rule 3 (statement -> timeout_stmt .)
    DISPLAY_BOARD   reduce using rule 3 (statement -> timeout_stmt .)
    GET_NAME        reduce using rule 3 (statement -> timeout_stmt .)
    $end            reduce using rule 3 (statement -> timeout_stmt .)
    RCURLYPAREN     reduce using rule 3 (statement -> timeout_stmt .)


state 4

    (4) statement -> while_stmt .
    TIMEOUT         reduce using rule 4 (statement -> while_stmt .)
    WHILE           reduce using rule 4 (statement -> while_stmt .)
    EXIT            reduce using rule 4 (statement -> while_stmt .)
    BREAK           reduce using rule 4 (statement -> while_stmt .)
    IF              reduce using rule 4 (statement -> while_stmt .)
    IMPORT          reduce using rule 4 (statement -> while_stmt .)
    ID              reduce using rule 4 (statement -> while_stmt .)
    ARRAY           reduce using rule 4 (statement -> while_stmt .)
    SET_SPEED       reduce using rule 4 (statement -> while_stmt .)
    REM             reduce using rule 4 (statement -> while_stmt .)
    PUSH            reduce using rule 4 (statement -> while_stmt .)
    TETRO           reduce using rule 4 (statement -> while_stmt .)
    BOARD           reduce using rule 4 (statement -> while_stmt .)
    STRING_TYPE     reduce using rule 4 (statement -> while_stmt .)
    INT_TYPE        reduce using rule 4 (statement -> while_stmt .)
    ADD_SCORE       reduce using rule 4 (statement -> while_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 4 (statement -> while_stmt .)
    DISPLAY_TETRO   reduce using rule 4 (statement -> while_stmt .)
    DISPLAY         reduce using rule 4 (statement -> while_stmt .)
    CLEAR_LINE      reduce using rule 4 (statement -> while_stmt .)
    HARD_DROP       reduce using rule 4 (statement -> while_stmt .)
    SET_MODE        reduce using rule 4 (statement -> while_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 4 (statement -> while_stmt .)
    PLAY_HW         reduce using rule 4 (statement -> while_stmt .)
    CLEAR_SCREEN    reduce using rule 4 (statement -> while_stmt .)
    DISPLAY_BOARD   reduce using rule 4 (statement -> while_stmt .)
    GET_NAME        reduce using rule 4 (statement -> while_stmt .)
    $end            reduce using rule 4 (statement -> while_stmt .)
    RCURLYPAREN     reduce using rule 4 (statement -> while_stmt .)


state 5

    (5) statement -> exit_stmt .
    TIMEOUT         reduce using rule 5 (statement -> exit_stmt .)
    WHILE           reduce using rule 5 (statement -> exit_stmt .)
    EXIT            reduce using rule 5 (statement -> exit_stmt .)
    BREAK           reduce using rule 5 (statement -> exit_stmt .)
    IF              reduce using rule 5 (statement -> exit_stmt .)
    IMPORT          reduce using rule 5 (statement -> exit_stmt .)
    ID              reduce using rule 5 (statement -> exit_stmt .)
    ARRAY           reduce using rule 5 (statement -> exit_stmt .)
    SET_SPEED       reduce using rule 5 (statement -> exit_stmt .)
    REM             reduce using rule 5 (statement -> exit_stmt .)
    PUSH            reduce using rule 5 (statement -> exit_stmt .)
    TETRO           reduce using rule 5 (statement -> exit_stmt .)
    BOARD           reduce using rule 5 (statement -> exit_stmt .)
    STRING_TYPE     reduce using rule 5 (statement -> exit_stmt .)
    INT_TYPE        reduce using rule 5 (statement -> exit_stmt .)
    ADD_SCORE       reduce using rule 5 (statement -> exit_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 5 (statement -> exit_stmt .)
    DISPLAY_TETRO   reduce using rule 5 (statement -> exit_stmt .)
    DISPLAY         reduce using rule 5 (statement -> exit_stmt .)
    CLEAR_LINE      reduce using rule 5 (statement -> exit_stmt .)
    HARD_DROP       reduce using rule 5 (statement -> exit_stmt .)
    SET_MODE        reduce using rule 5 (statement -> exit_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 5 (statement -> exit_stmt .)
    PLAY_HW         reduce using rule 5 (statement -> exit_stmt .)
    CLEAR_SCREEN    reduce using rule 5 (statement -> exit_stmt .)
    DISPLAY_BOARD   reduce using rule 5 (statement -> exit_stmt .)
    GET_NAME        reduce using rule 5 (statement -> exit_stmt .)
    $end            reduce using rule 5 (statement -> exit_stmt .)
    RCURLYPAREN     reduce using rule 5 (statement -> exit_stmt .)


state 6

    (6) statement -> break_stmt .
    TIMEOUT         reduce using rule 6 (statement -> break_stmt .)
    WHILE           reduce using rule 6 (statement -> break_stmt .)
    EXIT            reduce using rule 6 (statement -> break_stmt .)
    BREAK           reduce using rule 6 (statement -> break_stmt .)
    IF              reduce using rule 6 (statement -> break_stmt .)
    IMPORT          reduce using rule 6 (statement -> break_stmt .)
    ID              reduce using rule 6 (statement -> break_stmt .)
    ARRAY           reduce using rule 6 (statement -> break_stmt .)
    SET_SPEED       reduce using rule 6 (statement -> break_stmt .)
    REM             reduce using rule 6 (statement -> break_stmt .)
    PUSH            reduce using rule 6 (statement -> break_stmt .)
    TETRO           reduce using rule 6 (statement -> break_stmt .)
    BOARD           reduce using rule 6 (statement -> break_stmt .)
    STRING_TYPE     reduce using rule 6 (statement -> break_stmt .)
    INT_TYPE        reduce using rule 6 (statement -> break_stmt .)
    ADD_SCORE       reduce using rule 6 (statement -> break_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 6 (statement -> break_stmt .)
    DISPLAY_TETRO   reduce using rule 6 (statement -> break_stmt .)
    DISPLAY         reduce using rule 6 (statement -> break_stmt .)
    CLEAR_LINE      reduce using rule 6 (statement -> break_stmt .)
    HARD_DROP       reduce using rule 6 (statement -> break_stmt .)
    SET_MODE        reduce using rule 6 (statement -> break_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 6 (statement -> break_stmt .)
    PLAY_HW         reduce using rule 6 (statement -> break_stmt .)
    CLEAR_SCREEN    reduce using rule 6 (statement -> break_stmt .)
    DISPLAY_BOARD   reduce using rule 6 (statement -> break_stmt .)
    GET_NAME        reduce using rule 6 (statement -> break_stmt .)
    $end            reduce using rule 6 (statement -> break_stmt .)
    RCURLYPAREN     reduce using rule 6 (statement -> break_stmt .)


state 7

    (7) statement -> if_elseif_stmt .
    TIMEOUT         reduce using rule 7 (statement -> if_elseif_stmt .)
    WHILE           reduce using rule 7 (statement -> if_elseif_stmt .)
    EXIT            reduce using rule 7 (statement -> if_elseif_stmt .)
    BREAK           reduce using rule 7 (statement -> if_elseif_stmt .)
    IF              reduce using rule 7 (statement -> if_elseif_stmt .)
    IMPORT          reduce using rule 7 (statement -> if_elseif_stmt .)
    ID              reduce using rule 7 (statement -> if_elseif_stmt .)
    ARRAY           reduce using rule 7 (statement -> if_elseif_stmt .)
    SET_SPEED       reduce using rule 7 (statement -> if_elseif_stmt .)
    REM             reduce using rule 7 (statement -> if_elseif_stmt .)
    PUSH            reduce using rule 7 (statement -> if_elseif_stmt .)
    TETRO           reduce using rule 7 (statement -> if_elseif_stmt .)
    BOARD           reduce using rule 7 (statement -> if_elseif_stmt .)
    STRING_TYPE     reduce using rule 7 (statement -> if_elseif_stmt .)
    INT_TYPE        reduce using rule 7 (statement -> if_elseif_stmt .)
    ADD_SCORE       reduce using rule 7 (statement -> if_elseif_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 7 (statement -> if_elseif_stmt .)
    DISPLAY_TETRO   reduce using rule 7 (statement -> if_elseif_stmt .)
    DISPLAY         reduce using rule 7 (statement -> if_elseif_stmt .)
    CLEAR_LINE      reduce using rule 7 (statement -> if_elseif_stmt .)
    HARD_DROP       reduce using rule 7 (statement -> if_elseif_stmt .)
    SET_MODE        reduce using rule 7 (statement -> if_elseif_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 7 (statement -> if_elseif_stmt .)
    PLAY_HW         reduce using rule 7 (statement -> if_elseif_stmt .)
    CLEAR_SCREEN    reduce using rule 7 (statement -> if_elseif_stmt .)
    DISPLAY_BOARD   reduce using rule 7 (statement -> if_elseif_stmt .)
    GET_NAME        reduce using rule 7 (statement -> if_elseif_stmt .)
    $end            reduce using rule 7 (statement -> if_elseif_stmt .)
    RCURLYPAREN     reduce using rule 7 (statement -> if_elseif_stmt .)


state 8

    (8) statement -> if_else_stmt .
    TIMEOUT         reduce using rule 8 (statement -> if_else_stmt .)
    WHILE           reduce using rule 8 (statement -> if_else_stmt .)
    EXIT            reduce using rule 8 (statement -> if_else_stmt .)
    BREAK           reduce using rule 8 (statement -> if_else_stmt .)
    IF              reduce using rule 8 (statement -> if_else_stmt .)
    IMPORT          reduce using rule 8 (statement -> if_else_stmt .)
    ID              reduce using rule 8 (statement -> if_else_stmt .)
    ARRAY           reduce using rule 8 (statement -> if_else_stmt .)
    SET_SPEED       reduce using rule 8 (statement -> if_else_stmt .)
    REM             reduce using rule 8 (statement -> if_else_stmt .)
    PUSH            reduce using rule 8 (statement -> if_else_stmt .)
    TETRO           reduce using rule 8 (statement -> if_else_stmt .)
    BOARD           reduce using rule 8 (statement -> if_else_stmt .)
    STRING_TYPE     reduce using rule 8 (statement -> if_else_stmt .)
    INT_TYPE        reduce using rule 8 (statement -> if_else_stmt .)
    ADD_SCORE       reduce using rule 8 (statement -> if_else_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 8 (statement -> if_else_stmt .)
    DISPLAY_TETRO   reduce using rule 8 (statement -> if_else_stmt .)
    DISPLAY         reduce using rule 8 (statement -> if_else_stmt .)
    CLEAR_LINE      reduce using rule 8 (statement -> if_else_stmt .)
    HARD_DROP       reduce using rule 8 (statement -> if_else_stmt .)
    SET_MODE        reduce using rule 8 (statement -> if_else_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 8 (statement -> if_else_stmt .)
    PLAY_HW         reduce using rule 8 (statement -> if_else_stmt .)
    CLEAR_SCREEN    reduce using rule 8 (statement -> if_else_stmt .)
    DISPLAY_BOARD   reduce using rule 8 (statement -> if_else_stmt .)
    GET_NAME        reduce using rule 8 (statement -> if_else_stmt .)
    $end            reduce using rule 8 (statement -> if_else_stmt .)
    RCURLYPAREN     reduce using rule 8 (statement -> if_else_stmt .)


state 9

    (9) statement -> if_stmt .
    TIMEOUT         reduce using rule 9 (statement -> if_stmt .)
    WHILE           reduce using rule 9 (statement -> if_stmt .)
    EXIT            reduce using rule 9 (statement -> if_stmt .)
    BREAK           reduce using rule 9 (statement -> if_stmt .)
    IF              reduce using rule 9 (statement -> if_stmt .)
    IMPORT          reduce using rule 9 (statement -> if_stmt .)
    ID              reduce using rule 9 (statement -> if_stmt .)
    ARRAY           reduce using rule 9 (statement -> if_stmt .)
    SET_SPEED       reduce using rule 9 (statement -> if_stmt .)
    REM             reduce using rule 9 (statement -> if_stmt .)
    PUSH            reduce using rule 9 (statement -> if_stmt .)
    TETRO           reduce using rule 9 (statement -> if_stmt .)
    BOARD           reduce using rule 9 (statement -> if_stmt .)
    STRING_TYPE     reduce using rule 9 (statement -> if_stmt .)
    INT_TYPE        reduce using rule 9 (statement -> if_stmt .)
    ADD_SCORE       reduce using rule 9 (statement -> if_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 9 (statement -> if_stmt .)
    DISPLAY_TETRO   reduce using rule 9 (statement -> if_stmt .)
    DISPLAY         reduce using rule 9 (statement -> if_stmt .)
    CLEAR_LINE      reduce using rule 9 (statement -> if_stmt .)
    HARD_DROP       reduce using rule 9 (statement -> if_stmt .)
    SET_MODE        reduce using rule 9 (statement -> if_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 9 (statement -> if_stmt .)
    PLAY_HW         reduce using rule 9 (statement -> if_stmt .)
    CLEAR_SCREEN    reduce using rule 9 (statement -> if_stmt .)
    DISPLAY_BOARD   reduce using rule 9 (statement -> if_stmt .)
    GET_NAME        reduce using rule 9 (statement -> if_stmt .)
    $end            reduce using rule 9 (statement -> if_stmt .)
    RCURLYPAREN     reduce using rule 9 (statement -> if_stmt .)


state 10

    (10) statement -> import_stmt .
    TIMEOUT         reduce using rule 10 (statement -> import_stmt .)
    WHILE           reduce using rule 10 (statement -> import_stmt .)
    EXIT            reduce using rule 10 (statement -> import_stmt .)
    BREAK           reduce using rule 10 (statement -> import_stmt .)
    IF              reduce using rule 10 (statement -> import_stmt .)
    IMPORT          reduce using rule 10 (statement -> import_stmt .)
    ID              reduce using rule 10 (statement -> import_stmt .)
    ARRAY           reduce using rule 10 (statement -> import_stmt .)
    SET_SPEED       reduce using rule 10 (statement -> import_stmt .)
    REM             reduce using rule 10 (statement -> import_stmt .)
    PUSH            reduce using rule 10 (statement -> import_stmt .)
    TETRO           reduce using rule 10 (statement -> import_stmt .)
    BOARD           reduce using rule 10 (statement -> import_stmt .)
    STRING_TYPE     reduce using rule 10 (statement -> import_stmt .)
    INT_TYPE        reduce using rule 10 (statement -> import_stmt .)
    ADD_SCORE       reduce using rule 10 (statement -> import_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 10 (statement -> import_stmt .)
    DISPLAY_TETRO   reduce using rule 10 (statement -> import_stmt .)
    DISPLAY         reduce using rule 10 (statement -> import_stmt .)
    CLEAR_LINE      reduce using rule 10 (statement -> import_stmt .)
    HARD_DROP       reduce using rule 10 (statement -> import_stmt .)
    SET_MODE        reduce using rule 10 (statement -> import_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 10 (statement -> import_stmt .)
    PLAY_HW         reduce using rule 10 (statement -> import_stmt .)
    CLEAR_SCREEN    reduce using rule 10 (statement -> import_stmt .)
    DISPLAY_BOARD   reduce using rule 10 (statement -> import_stmt .)
    GET_NAME        reduce using rule 10 (statement -> import_stmt .)
    $end            reduce using rule 10 (statement -> import_stmt .)
    RCURLYPAREN     reduce using rule 10 (statement -> import_stmt .)


state 11

    (11) statement -> bivf .
    TIMEOUT         reduce using rule 11 (statement -> bivf .)
    WHILE           reduce using rule 11 (statement -> bivf .)
    EXIT            reduce using rule 11 (statement -> bivf .)
    BREAK           reduce using rule 11 (statement -> bivf .)
    IF              reduce using rule 11 (statement -> bivf .)
    IMPORT          reduce using rule 11 (statement -> bivf .)
    ID              reduce using rule 11 (statement -> bivf .)
    ARRAY           reduce using rule 11 (statement -> bivf .)
    SET_SPEED       reduce using rule 11 (statement -> bivf .)
    REM             reduce using rule 11 (statement -> bivf .)
    PUSH            reduce using rule 11 (statement -> bivf .)
    TETRO           reduce using rule 11 (statement -> bivf .)
    BOARD           reduce using rule 11 (statement -> bivf .)
    STRING_TYPE     reduce using rule 11 (statement -> bivf .)
    INT_TYPE        reduce using rule 11 (statement -> bivf .)
    ADD_SCORE       reduce using rule 11 (statement -> bivf .)
    DISPLAY_NEXT_TETRO reduce using rule 11 (statement -> bivf .)
    DISPLAY_TETRO   reduce using rule 11 (statement -> bivf .)
    DISPLAY         reduce using rule 11 (statement -> bivf .)
    CLEAR_LINE      reduce using rule 11 (statement -> bivf .)
    HARD_DROP       reduce using rule 11 (statement -> bivf .)
    SET_MODE        reduce using rule 11 (statement -> bivf .)
    SET_GAME_DIFFICULTY reduce using rule 11 (statement -> bivf .)
    PLAY_HW         reduce using rule 11 (statement -> bivf .)
    CLEAR_SCREEN    reduce using rule 11 (statement -> bivf .)
    DISPLAY_BOARD   reduce using rule 11 (statement -> bivf .)
    GET_NAME        reduce using rule 11 (statement -> bivf .)
    $end            reduce using rule 11 (statement -> bivf .)
    RCURLYPAREN     reduce using rule 11 (statement -> bivf .)


state 12

    (12) statement -> reass_stmt .
    TIMEOUT         reduce using rule 12 (statement -> reass_stmt .)
    WHILE           reduce using rule 12 (statement -> reass_stmt .)
    EXIT            reduce using rule 12 (statement -> reass_stmt .)
    BREAK           reduce using rule 12 (statement -> reass_stmt .)
    IF              reduce using rule 12 (statement -> reass_stmt .)
    IMPORT          reduce using rule 12 (statement -> reass_stmt .)
    ID              reduce using rule 12 (statement -> reass_stmt .)
    ARRAY           reduce using rule 12 (statement -> reass_stmt .)
    SET_SPEED       reduce using rule 12 (statement -> reass_stmt .)
    REM             reduce using rule 12 (statement -> reass_stmt .)
    PUSH            reduce using rule 12 (statement -> reass_stmt .)
    TETRO           reduce using rule 12 (statement -> reass_stmt .)
    BOARD           reduce using rule 12 (statement -> reass_stmt .)
    STRING_TYPE     reduce using rule 12 (statement -> reass_stmt .)
    INT_TYPE        reduce using rule 12 (statement -> reass_stmt .)
    ADD_SCORE       reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_TETRO   reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY         reduce using rule 12 (statement -> reass_stmt .)
    CLEAR_LINE      reduce using rule 12 (statement -> reass_stmt .)
    HARD_DROP       reduce using rule 12 (statement -> reass_stmt .)
    SET_MODE        reduce using rule 12 (statement -> reass_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 12 (statement -> reass_stmt .)
    PLAY_HW         reduce using rule 12 (statement -> reass_stmt .)
    CLEAR_SCREEN    reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_BOARD   reduce using rule 12 (statement -> reass_stmt .)
    GET_NAME        reduce using rule 12 (statement -> reass_stmt .)
    $end            reduce using rule 12 (statement -> reass_stmt .)
    RCURLYPAREN     reduce using rule 12 (statement -> reass_stmt .)


state 13

    (13) statement -> init_stmt .
    TIMEOUT         reduce using rule 13 (statement -> init_stmt .)
    WHILE           reduce using rule 13 (statement -> init_stmt .)
    EXIT            reduce using rule 13 (statement -> init_stmt .)
    BREAK           reduce using rule 13 (statement -> init_stmt .)
    IF              reduce using rule 13 (statement -> init_stmt .)
    IMPORT          reduce using rule 13 (statement -> init_stmt .)
    ID              reduce using rule 13 (statement -> init_stmt .)
    ARRAY           reduce using rule 13 (statement -> init_stmt .)
    SET_SPEED       reduce using rule 13 (statement -> init_stmt .)
    REM             reduce using rule 13 (statement -> init_stmt .)
    PUSH            reduce using rule 13 (statement -> init_stmt .)
    TETRO           reduce using rule 13 (statement -> init_stmt .)
    BOARD           reduce using rule 13 (statement -> init_stmt .)
    STRING_TYPE     reduce using rule 13 (statement -> init_stmt .)
    INT_TYPE        reduce using rule 13 (statement -> init_stmt .)
    ADD_SCORE       reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_TETRO   reduce using rule 13 (statement -> init_stmt .)
    DISPLAY         reduce using rule 13 (statement -> init_stmt .)
    CLEAR_LINE      reduce using rule 13 (statement -> init_stmt .)
    HARD_DROP       reduce using rule 13 (statement -> init_stmt .)
    SET_MODE        reduce using rule 13 (statement -> init_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 13 (statement -> init_stmt .)
    PLAY_HW         reduce using rule 13 (statement -> init_stmt .)
    CLEAR_SCREEN    reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_BOARD   reduce using rule 13 (statement -> init_stmt .)
    GET_NAME        reduce using rule 13 (statement -> init_stmt .)
    $end            reduce using rule 13 (statement -> init_stmt .)
    RCURLYPAREN     reduce using rule 13 (statement -> init_stmt .)


state 14

    (111) timeout_stmt -> TIMEOUT . ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (               shift and go to state 50


state 15

    (110) while_stmt -> WHILE . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (               shift and go to state 51


state 16

    (108) exit_stmt -> EXIT . EOL
    EOL             shift and go to state 52


state 17

    (107) break_stmt -> BREAK . EOL
    EOL             shift and go to state 53


state 18

    (114) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (               shift and go to state 54


state 19

    (14) import_stmt -> IMPORT . GAME EOL
    GAME            shift and go to state 55


state 20

    (102) bivf -> set_speed_call . EOL
    EOL             shift and go to state 56


state 21

    (103) bivf -> rem_call . EOL
    EOL             shift and go to state 57


state 22

    (104) bivf -> push_call . EOL
    EOL             shift and go to state 58


state 23

    (105) bivf -> bivf_wp_call . EOL
    EOL             shift and go to state 59


state 24

    (106) bivf -> bivf_wop_call . EOL
    EOL             shift and go to state 60


state 25

    (15) reass_stmt -> ID . ASSIGN expr EOL
    (16) reass_stmt -> ID . ASSIGN array_val EOL
    (17) reass_stmt -> ID . ASSIGN val EOL
    ASSIGN          shift and go to state 61


state 26

    (18) init_stmt -> ARRAY . ID ASSIGN array_val EOL
    (23) data_type -> ARRAY .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 62


state 27

    (19) init_stmt -> data_type . ID ASSIGN expr EOL
    (20) init_stmt -> data_type . ID ASSIGN val EOL
    ID              shift and go to state 63


state 28

    (91) set_speed_call -> SET_SPEED . ( HARD )
    (92) set_speed_call -> SET_SPEED . ( MEDIUM )
    (93) set_speed_call -> SET_SPEED . ( EASY )
    (               shift and go to state 64


state 29

    (94) rem_call -> REM . ( ID SEPARATOR ID )
    (95) rem_call -> REM . ( ID SEPARATOR NUMBER )
    (96) rem_call -> REM . ( array_val SEPARATOR ID )
    (97) rem_call -> REM . ( array_val SEPARATOR NUMBER )
    (84) bivf_wp -> REM .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 65


state 30

    (98) push_call -> PUSH . ( ID SEPARATOR ID )
    (99) push_call -> PUSH . ( ID SEPARATOR val )
    (83) bivf_wp -> PUSH .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 66


state 31

    (101) bivf_wp_call -> bivf_wp . ( params )
    (               shift and go to state 67


state 32

    (100) bivf_wop_call -> bivf_wop . ( )
    (               shift and go to state 68


state 33

    (21) data_type -> TETRO .
    ID              reduce using rule 21 (data_type -> TETRO .)


state 34

    (22) data_type -> BOARD .
    ID              reduce using rule 22 (data_type -> BOARD .)


state 35

    (24) data_type -> STRING_TYPE .
    ID              reduce using rule 24 (data_type -> STRING_TYPE .)


state 36

    (25) data_type -> INT_TYPE .
    ID              reduce using rule 25 (data_type -> INT_TYPE .)


state 37

    (85) bivf_wp -> ADD_SCORE .
    (               reduce using rule 85 (bivf_wp -> ADD_SCORE .)


state 38

    (86) bivf_wp -> DISPLAY_NEXT_TETRO .
    (               reduce using rule 86 (bivf_wp -> DISPLAY_NEXT_TETRO .)


state 39

    (87) bivf_wp -> DISPLAY_TETRO .
    (               reduce using rule 87 (bivf_wp -> DISPLAY_TETRO .)


state 40

    (88) bivf_wp -> DISPLAY .
    (               reduce using rule 88 (bivf_wp -> DISPLAY .)


state 41

    (89) bivf_wp -> CLEAR_LINE .
    (               reduce using rule 89 (bivf_wp -> CLEAR_LINE .)


state 42

    (90) bivf_wp -> HARD_DROP .
    (               reduce using rule 90 (bivf_wp -> HARD_DROP .)


state 43

    (77) bivf_wop -> SET_MODE .
    (               reduce using rule 77 (bivf_wop -> SET_MODE .)


state 44

    (78) bivf_wop -> SET_GAME_DIFFICULTY .
    (               reduce using rule 78 (bivf_wop -> SET_GAME_DIFFICULTY .)


state 45

    (79) bivf_wop -> PLAY_HW .
    (               reduce using rule 79 (bivf_wop -> PLAY_HW .)


state 46

    (80) bivf_wop -> CLEAR_SCREEN .
    (               reduce using rule 80 (bivf_wop -> CLEAR_SCREEN .)


state 47

    (81) bivf_wop -> DISPLAY_BOARD .
    (               reduce using rule 81 (bivf_wop -> DISPLAY_BOARD .)


state 48

    (82) bivf_wop -> GET_NAME .
    (               reduce using rule 82 (bivf_wop -> GET_NAME .)


state 49

    (1) compound_stmt -> compound_stmt statement .
    TIMEOUT         reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    WHILE           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    EXIT            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    BREAK           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    IF              reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    IMPORT          reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ID              reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ARRAY           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_SPEED       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    REM             reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    PUSH            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    TETRO           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    BOARD           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    STRING_TYPE     reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    INT_TYPE        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ADD_SCORE       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_NEXT_TETRO reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_TETRO   reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY         reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    CLEAR_LINE      reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    HARD_DROP       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_MODE        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_GAME_DIFFICULTY reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    PLAY_HW         reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    CLEAR_SCREEN    reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_BOARD   reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    GET_NAME        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    $end            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    RCURLYPAREN     reduce using rule 1 (compound_stmt -> compound_stmt statement .)


state 50

    (111) timeout_stmt -> TIMEOUT ( . NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    NUMBER          shift and go to state 69


state 51

    (110) while_stmt -> WHILE ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 71
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 52

    (108) exit_stmt -> EXIT EOL .
    TIMEOUT         reduce using rule 108 (exit_stmt -> EXIT EOL .)
    WHILE           reduce using rule 108 (exit_stmt -> EXIT EOL .)
    EXIT            reduce using rule 108 (exit_stmt -> EXIT EOL .)
    BREAK           reduce using rule 108 (exit_stmt -> EXIT EOL .)
    IF              reduce using rule 108 (exit_stmt -> EXIT EOL .)
    IMPORT          reduce using rule 108 (exit_stmt -> EXIT EOL .)
    ID              reduce using rule 108 (exit_stmt -> EXIT EOL .)
    ARRAY           reduce using rule 108 (exit_stmt -> EXIT EOL .)
    SET_SPEED       reduce using rule 108 (exit_stmt -> EXIT EOL .)
    REM             reduce using rule 108 (exit_stmt -> EXIT EOL .)
    PUSH            reduce using rule 108 (exit_stmt -> EXIT EOL .)
    TETRO           reduce using rule 108 (exit_stmt -> EXIT EOL .)
    BOARD           reduce using rule 108 (exit_stmt -> EXIT EOL .)
    STRING_TYPE     reduce using rule 108 (exit_stmt -> EXIT EOL .)
    INT_TYPE        reduce using rule 108 (exit_stmt -> EXIT EOL .)
    ADD_SCORE       reduce using rule 108 (exit_stmt -> EXIT EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 108 (exit_stmt -> EXIT EOL .)
    DISPLAY_TETRO   reduce using rule 108 (exit_stmt -> EXIT EOL .)
    DISPLAY         reduce using rule 108 (exit_stmt -> EXIT EOL .)
    CLEAR_LINE      reduce using rule 108 (exit_stmt -> EXIT EOL .)
    HARD_DROP       reduce using rule 108 (exit_stmt -> EXIT EOL .)
    SET_MODE        reduce using rule 108 (exit_stmt -> EXIT EOL .)
    SET_GAME_DIFFICULTY reduce using rule 108 (exit_stmt -> EXIT EOL .)
    PLAY_HW         reduce using rule 108 (exit_stmt -> EXIT EOL .)
    CLEAR_SCREEN    reduce using rule 108 (exit_stmt -> EXIT EOL .)
    DISPLAY_BOARD   reduce using rule 108 (exit_stmt -> EXIT EOL .)
    GET_NAME        reduce using rule 108 (exit_stmt -> EXIT EOL .)
    $end            reduce using rule 108 (exit_stmt -> EXIT EOL .)
    RCURLYPAREN     reduce using rule 108 (exit_stmt -> EXIT EOL .)


state 53

    (107) break_stmt -> BREAK EOL .
    TIMEOUT         reduce using rule 107 (break_stmt -> BREAK EOL .)
    WHILE           reduce using rule 107 (break_stmt -> BREAK EOL .)
    EXIT            reduce using rule 107 (break_stmt -> BREAK EOL .)
    BREAK           reduce using rule 107 (break_stmt -> BREAK EOL .)
    IF              reduce using rule 107 (break_stmt -> BREAK EOL .)
    IMPORT          reduce using rule 107 (break_stmt -> BREAK EOL .)
    ID              reduce using rule 107 (break_stmt -> BREAK EOL .)
    ARRAY           reduce using rule 107 (break_stmt -> BREAK EOL .)
    SET_SPEED       reduce using rule 107 (break_stmt -> BREAK EOL .)
    REM             reduce using rule 107 (break_stmt -> BREAK EOL .)
    PUSH            reduce using rule 107 (break_stmt -> BREAK EOL .)
    TETRO           reduce using rule 107 (break_stmt -> BREAK EOL .)
    BOARD           reduce using rule 107 (break_stmt -> BREAK EOL .)
    STRING_TYPE     reduce using rule 107 (break_stmt -> BREAK EOL .)
    INT_TYPE        reduce using rule 107 (break_stmt -> BREAK EOL .)
    ADD_SCORE       reduce using rule 107 (break_stmt -> BREAK EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 107 (break_stmt -> BREAK EOL .)
    DISPLAY_TETRO   reduce using rule 107 (break_stmt -> BREAK EOL .)
    DISPLAY         reduce using rule 107 (break_stmt -> BREAK EOL .)
    CLEAR_LINE      reduce using rule 107 (break_stmt -> BREAK EOL .)
    HARD_DROP       reduce using rule 107 (break_stmt -> BREAK EOL .)
    SET_MODE        reduce using rule 107 (break_stmt -> BREAK EOL .)
    SET_GAME_DIFFICULTY reduce using rule 107 (break_stmt -> BREAK EOL .)
    PLAY_HW         reduce using rule 107 (break_stmt -> BREAK EOL .)
    CLEAR_SCREEN    reduce using rule 107 (break_stmt -> BREAK EOL .)
    DISPLAY_BOARD   reduce using rule 107 (break_stmt -> BREAK EOL .)
    GET_NAME        reduce using rule 107 (break_stmt -> BREAK EOL .)
    $end            reduce using rule 107 (break_stmt -> BREAK EOL .)
    RCURLYPAREN     reduce using rule 107 (break_stmt -> BREAK EOL .)


state 54

    (114) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 78
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 55

    (14) import_stmt -> IMPORT GAME . EOL
    EOL             shift and go to state 79


state 56

    (102) bivf -> set_speed_call EOL .
    TIMEOUT         reduce using rule 102 (bivf -> set_speed_call EOL .)
    WHILE           reduce using rule 102 (bivf -> set_speed_call EOL .)
    EXIT            reduce using rule 102 (bivf -> set_speed_call EOL .)
    BREAK           reduce using rule 102 (bivf -> set_speed_call EOL .)
    IF              reduce using rule 102 (bivf -> set_speed_call EOL .)
    IMPORT          reduce using rule 102 (bivf -> set_speed_call EOL .)
    ID              reduce using rule 102 (bivf -> set_speed_call EOL .)
    ARRAY           reduce using rule 102 (bivf -> set_speed_call EOL .)
    SET_SPEED       reduce using rule 102 (bivf -> set_speed_call EOL .)
    REM             reduce using rule 102 (bivf -> set_speed_call EOL .)
    PUSH            reduce using rule 102 (bivf -> set_speed_call EOL .)
    TETRO           reduce using rule 102 (bivf -> set_speed_call EOL .)
    BOARD           reduce using rule 102 (bivf -> set_speed_call EOL .)
    STRING_TYPE     reduce using rule 102 (bivf -> set_speed_call EOL .)
    INT_TYPE        reduce using rule 102 (bivf -> set_speed_call EOL .)
    ADD_SCORE       reduce using rule 102 (bivf -> set_speed_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 102 (bivf -> set_speed_call EOL .)
    DISPLAY_TETRO   reduce using rule 102 (bivf -> set_speed_call EOL .)
    DISPLAY         reduce using rule 102 (bivf -> set_speed_call EOL .)
    CLEAR_LINE      reduce using rule 102 (bivf -> set_speed_call EOL .)
    HARD_DROP       reduce using rule 102 (bivf -> set_speed_call EOL .)
    SET_MODE        reduce using rule 102 (bivf -> set_speed_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 102 (bivf -> set_speed_call EOL .)
    PLAY_HW         reduce using rule 102 (bivf -> set_speed_call EOL .)
    CLEAR_SCREEN    reduce using rule 102 (bivf -> set_speed_call EOL .)
    DISPLAY_BOARD   reduce using rule 102 (bivf -> set_speed_call EOL .)
    GET_NAME        reduce using rule 102 (bivf -> set_speed_call EOL .)
    $end            reduce using rule 102 (bivf -> set_speed_call EOL .)
    RCURLYPAREN     reduce using rule 102 (bivf -> set_speed_call EOL .)


state 57

    (103) bivf -> rem_call EOL .
    TIMEOUT         reduce using rule 103 (bivf -> rem_call EOL .)
    WHILE           reduce using rule 103 (bivf -> rem_call EOL .)
    EXIT            reduce using rule 103 (bivf -> rem_call EOL .)
    BREAK           reduce using rule 103 (bivf -> rem_call EOL .)
    IF              reduce using rule 103 (bivf -> rem_call EOL .)
    IMPORT          reduce using rule 103 (bivf -> rem_call EOL .)
    ID              reduce using rule 103 (bivf -> rem_call EOL .)
    ARRAY           reduce using rule 103 (bivf -> rem_call EOL .)
    SET_SPEED       reduce using rule 103 (bivf -> rem_call EOL .)
    REM             reduce using rule 103 (bivf -> rem_call EOL .)
    PUSH            reduce using rule 103 (bivf -> rem_call EOL .)
    TETRO           reduce using rule 103 (bivf -> rem_call EOL .)
    BOARD           reduce using rule 103 (bivf -> rem_call EOL .)
    STRING_TYPE     reduce using rule 103 (bivf -> rem_call EOL .)
    INT_TYPE        reduce using rule 103 (bivf -> rem_call EOL .)
    ADD_SCORE       reduce using rule 103 (bivf -> rem_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 103 (bivf -> rem_call EOL .)
    DISPLAY_TETRO   reduce using rule 103 (bivf -> rem_call EOL .)
    DISPLAY         reduce using rule 103 (bivf -> rem_call EOL .)
    CLEAR_LINE      reduce using rule 103 (bivf -> rem_call EOL .)
    HARD_DROP       reduce using rule 103 (bivf -> rem_call EOL .)
    SET_MODE        reduce using rule 103 (bivf -> rem_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 103 (bivf -> rem_call EOL .)
    PLAY_HW         reduce using rule 103 (bivf -> rem_call EOL .)
    CLEAR_SCREEN    reduce using rule 103 (bivf -> rem_call EOL .)
    DISPLAY_BOARD   reduce using rule 103 (bivf -> rem_call EOL .)
    GET_NAME        reduce using rule 103 (bivf -> rem_call EOL .)
    $end            reduce using rule 103 (bivf -> rem_call EOL .)
    RCURLYPAREN     reduce using rule 103 (bivf -> rem_call EOL .)


state 58

    (104) bivf -> push_call EOL .
    TIMEOUT         reduce using rule 104 (bivf -> push_call EOL .)
    WHILE           reduce using rule 104 (bivf -> push_call EOL .)
    EXIT            reduce using rule 104 (bivf -> push_call EOL .)
    BREAK           reduce using rule 104 (bivf -> push_call EOL .)
    IF              reduce using rule 104 (bivf -> push_call EOL .)
    IMPORT          reduce using rule 104 (bivf -> push_call EOL .)
    ID              reduce using rule 104 (bivf -> push_call EOL .)
    ARRAY           reduce using rule 104 (bivf -> push_call EOL .)
    SET_SPEED       reduce using rule 104 (bivf -> push_call EOL .)
    REM             reduce using rule 104 (bivf -> push_call EOL .)
    PUSH            reduce using rule 104 (bivf -> push_call EOL .)
    TETRO           reduce using rule 104 (bivf -> push_call EOL .)
    BOARD           reduce using rule 104 (bivf -> push_call EOL .)
    STRING_TYPE     reduce using rule 104 (bivf -> push_call EOL .)
    INT_TYPE        reduce using rule 104 (bivf -> push_call EOL .)
    ADD_SCORE       reduce using rule 104 (bivf -> push_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 104 (bivf -> push_call EOL .)
    DISPLAY_TETRO   reduce using rule 104 (bivf -> push_call EOL .)
    DISPLAY         reduce using rule 104 (bivf -> push_call EOL .)
    CLEAR_LINE      reduce using rule 104 (bivf -> push_call EOL .)
    HARD_DROP       reduce using rule 104 (bivf -> push_call EOL .)
    SET_MODE        reduce using rule 104 (bivf -> push_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 104 (bivf -> push_call EOL .)
    PLAY_HW         reduce using rule 104 (bivf -> push_call EOL .)
    CLEAR_SCREEN    reduce using rule 104 (bivf -> push_call EOL .)
    DISPLAY_BOARD   reduce using rule 104 (bivf -> push_call EOL .)
    GET_NAME        reduce using rule 104 (bivf -> push_call EOL .)
    $end            reduce using rule 104 (bivf -> push_call EOL .)
    RCURLYPAREN     reduce using rule 104 (bivf -> push_call EOL .)


state 59

    (105) bivf -> bivf_wp_call EOL .
    TIMEOUT         reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    WHILE           reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    EXIT            reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    BREAK           reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    IF              reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    IMPORT          reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    ID              reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    ARRAY           reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    SET_SPEED       reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    REM             reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    PUSH            reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    TETRO           reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    BOARD           reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    STRING_TYPE     reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    INT_TYPE        reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    ADD_SCORE       reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    DISPLAY_TETRO   reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    DISPLAY         reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    CLEAR_LINE      reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    HARD_DROP       reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    SET_MODE        reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    PLAY_HW         reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    CLEAR_SCREEN    reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    DISPLAY_BOARD   reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    GET_NAME        reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    $end            reduce using rule 105 (bivf -> bivf_wp_call EOL .)
    RCURLYPAREN     reduce using rule 105 (bivf -> bivf_wp_call EOL .)


state 60

    (106) bivf -> bivf_wop_call EOL .
    TIMEOUT         reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    WHILE           reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    EXIT            reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    BREAK           reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    IF              reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    IMPORT          reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    ID              reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    ARRAY           reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    SET_SPEED       reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    REM             reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    PUSH            reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    TETRO           reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    BOARD           reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    STRING_TYPE     reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    INT_TYPE        reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    ADD_SCORE       reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    DISPLAY_TETRO   reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    DISPLAY         reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    CLEAR_LINE      reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    HARD_DROP       reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    SET_MODE        reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    PLAY_HW         reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    CLEAR_SCREEN    reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    DISPLAY_BOARD   reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    GET_NAME        reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    $end            reduce using rule 106 (bivf -> bivf_wop_call EOL .)
    RCURLYPAREN     reduce using rule 106 (bivf -> bivf_wop_call EOL .)


state 61

    (15) reass_stmt -> ID ASSIGN . expr EOL
    (16) reass_stmt -> ID ASSIGN . array_val EOL
    (17) reass_stmt -> ID ASSIGN . val EOL
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (52) operand -> . NUMBER
    (53) operand -> . ID
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    NOT             shift and go to state 72
    -               shift and go to state 73
    LBLOCKPAREN     shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 85
    (               shift and go to state 70
    ID              shift and go to state 77
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    expr                           shift and go to state 80
    array_val                      shift and go to state 81
    val                            shift and go to state 82
    factor                         shift and go to state 74
    birf                           shift and go to state 86
    operand                        shift and go to state 75
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 62

    (18) init_stmt -> ARRAY ID . ASSIGN array_val EOL
    ASSIGN          shift and go to state 104


state 63

    (19) init_stmt -> data_type ID . ASSIGN expr EOL
    (20) init_stmt -> data_type ID . ASSIGN val EOL
    ASSIGN          shift and go to state 105


state 64

    (91) set_speed_call -> SET_SPEED ( . HARD )
    (92) set_speed_call -> SET_SPEED ( . MEDIUM )
    (93) set_speed_call -> SET_SPEED ( . EASY )
    HARD            shift and go to state 106
    MEDIUM          shift and go to state 107
    EASY            shift and go to state 108


state 65

    (94) rem_call -> REM ( . ID SEPARATOR ID )
    (95) rem_call -> REM ( . ID SEPARATOR NUMBER )
    (96) rem_call -> REM ( . array_val SEPARATOR ID )
    (97) rem_call -> REM ( . array_val SEPARATOR NUMBER )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 109
    LBLOCKPAREN     shift and go to state 83

    array_val                      shift and go to state 110

state 66

    (98) push_call -> PUSH ( . ID SEPARATOR ID )
    (99) push_call -> PUSH ( . ID SEPARATOR val )
    ID              shift and go to state 111


state 67

    (101) bivf_wp_call -> bivf_wp ( . params )
    (54) params -> . params SEPARATOR param
    (55) params -> . param
    (56) param -> . val
    (57) param -> . ID
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 115
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 116
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    params                         shift and go to state 112
    param                          shift and go to state 113
    val                            shift and go to state 114
    birf                           shift and go to state 86
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 68

    (100) bivf_wop_call -> bivf_wop ( . )
    )               shift and go to state 117


state 69

    (111) timeout_stmt -> TIMEOUT ( NUMBER . ) LCURLYPAREN compound_stmt RCURLYPAREN
    )               shift and go to state 118


state 70

    (50) factor -> ( . expr )
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 119
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 71

    (110) while_stmt -> WHILE ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               shift and go to state 120
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 72

    (36) expr -> NOT . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 134
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 73

    (49) expr -> - . factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    factor                         shift and go to state 135
    operand                        shift and go to state 75

state 74

    (48) expr -> factor .
    )               reduce using rule 48 (expr -> factor .)
    OR              reduce using rule 48 (expr -> factor .)
    AND             reduce using rule 48 (expr -> factor .)
    EE              reduce using rule 48 (expr -> factor .)
    NE              reduce using rule 48 (expr -> factor .)
    GTE             reduce using rule 48 (expr -> factor .)
    LTE             reduce using rule 48 (expr -> factor .)
    LT              reduce using rule 48 (expr -> factor .)
    GT              reduce using rule 48 (expr -> factor .)
    -               reduce using rule 48 (expr -> factor .)
    +               reduce using rule 48 (expr -> factor .)
    %               reduce using rule 48 (expr -> factor .)
    /               reduce using rule 48 (expr -> factor .)
    *               reduce using rule 48 (expr -> factor .)
    EOL             reduce using rule 48 (expr -> factor .)
    RBLOCKPAREN     reduce using rule 48 (expr -> factor .)
    SEPARATOR       reduce using rule 48 (expr -> factor .)


state 75

    (51) factor -> operand .
    )               reduce using rule 51 (factor -> operand .)
    OR              reduce using rule 51 (factor -> operand .)
    AND             reduce using rule 51 (factor -> operand .)
    EE              reduce using rule 51 (factor -> operand .)
    NE              reduce using rule 51 (factor -> operand .)
    GTE             reduce using rule 51 (factor -> operand .)
    LTE             reduce using rule 51 (factor -> operand .)
    LT              reduce using rule 51 (factor -> operand .)
    GT              reduce using rule 51 (factor -> operand .)
    -               reduce using rule 51 (factor -> operand .)
    +               reduce using rule 51 (factor -> operand .)
    %               reduce using rule 51 (factor -> operand .)
    /               reduce using rule 51 (factor -> operand .)
    *               reduce using rule 51 (factor -> operand .)
    EOL             reduce using rule 51 (factor -> operand .)
    RBLOCKPAREN     reduce using rule 51 (factor -> operand .)
    SEPARATOR       reduce using rule 51 (factor -> operand .)


state 76

    (52) operand -> NUMBER .
    )               reduce using rule 52 (operand -> NUMBER .)
    OR              reduce using rule 52 (operand -> NUMBER .)
    AND             reduce using rule 52 (operand -> NUMBER .)
    EE              reduce using rule 52 (operand -> NUMBER .)
    NE              reduce using rule 52 (operand -> NUMBER .)
    GTE             reduce using rule 52 (operand -> NUMBER .)
    LTE             reduce using rule 52 (operand -> NUMBER .)
    LT              reduce using rule 52 (operand -> NUMBER .)
    GT              reduce using rule 52 (operand -> NUMBER .)
    -               reduce using rule 52 (operand -> NUMBER .)
    +               reduce using rule 52 (operand -> NUMBER .)
    %               reduce using rule 52 (operand -> NUMBER .)
    /               reduce using rule 52 (operand -> NUMBER .)
    *               reduce using rule 52 (operand -> NUMBER .)
    EOL             reduce using rule 52 (operand -> NUMBER .)
    RBLOCKPAREN     reduce using rule 52 (operand -> NUMBER .)
    SEPARATOR       reduce using rule 52 (operand -> NUMBER .)


state 77

    (53) operand -> ID .
    )               reduce using rule 53 (operand -> ID .)
    OR              reduce using rule 53 (operand -> ID .)
    AND             reduce using rule 53 (operand -> ID .)
    EE              reduce using rule 53 (operand -> ID .)
    NE              reduce using rule 53 (operand -> ID .)
    GTE             reduce using rule 53 (operand -> ID .)
    LTE             reduce using rule 53 (operand -> ID .)
    LT              reduce using rule 53 (operand -> ID .)
    GT              reduce using rule 53 (operand -> ID .)
    -               reduce using rule 53 (operand -> ID .)
    +               reduce using rule 53 (operand -> ID .)
    %               reduce using rule 53 (operand -> ID .)
    /               reduce using rule 53 (operand -> ID .)
    *               reduce using rule 53 (operand -> ID .)
    EOL             reduce using rule 53 (operand -> ID .)
    RBLOCKPAREN     reduce using rule 53 (operand -> ID .)
    SEPARATOR       reduce using rule 53 (operand -> ID .)


state 78

    (114) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               shift and go to state 136
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 79

    (14) import_stmt -> IMPORT GAME EOL .
    TIMEOUT         reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    WHILE           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    EXIT            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    BREAK           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    IF              reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    IMPORT          reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ID              reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ARRAY           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_SPEED       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    REM             reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    PUSH            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    TETRO           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    BOARD           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    STRING_TYPE     reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    INT_TYPE        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ADD_SCORE       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_TETRO   reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY         reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    CLEAR_LINE      reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    HARD_DROP       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_MODE        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_GAME_DIFFICULTY reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    PLAY_HW         reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    CLEAR_SCREEN    reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_BOARD   reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    GET_NAME        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    $end            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    RCURLYPAREN     reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)


state 80

    (15) reass_stmt -> ID ASSIGN expr . EOL
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    EOL             shift and go to state 137
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 81

    (16) reass_stmt -> ID ASSIGN array_val . EOL
    EOL             shift and go to state 138


state 82

    (17) reass_stmt -> ID ASSIGN val . EOL
    EOL             shift and go to state 139


state 83

    (26) array_val -> LBLOCKPAREN . set RBLOCKPAREN
    (27) array_val -> LBLOCKPAREN . RBLOCKPAREN
    (28) set -> . set SEPARATOR expr
    (29) set -> . set SEPARATOR val
    (30) set -> . val
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    RBLOCKPAREN     shift and go to state 141
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 116
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    set                            shift and go to state 140
    val                            shift and go to state 142
    birf                           shift and go to state 86
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 84

    (31) val -> STRING_LITERAL .
    EOL             reduce using rule 31 (val -> STRING_LITERAL .)
    )               reduce using rule 31 (val -> STRING_LITERAL .)
    SEPARATOR       reduce using rule 31 (val -> STRING_LITERAL .)
    RBLOCKPAREN     reduce using rule 31 (val -> STRING_LITERAL .)


state 85

    (32) val -> NUMBER .
    (52) operand -> NUMBER .
  ! reduce/reduce conflict for EOL resolved using rule 32 (val -> NUMBER .)
  ! reduce/reduce conflict for RBLOCKPAREN resolved using rule 32 (val -> NUMBER .)
  ! reduce/reduce conflict for SEPARATOR resolved using rule 32 (val -> NUMBER .)
    EOL             reduce using rule 32 (val -> NUMBER .)
    RBLOCKPAREN     reduce using rule 32 (val -> NUMBER .)
    SEPARATOR       reduce using rule 32 (val -> NUMBER .)
    OR              reduce using rule 52 (operand -> NUMBER .)
    AND             reduce using rule 52 (operand -> NUMBER .)
    EE              reduce using rule 52 (operand -> NUMBER .)
    NE              reduce using rule 52 (operand -> NUMBER .)
    GTE             reduce using rule 52 (operand -> NUMBER .)
    LTE             reduce using rule 52 (operand -> NUMBER .)
    LT              reduce using rule 52 (operand -> NUMBER .)
    GT              reduce using rule 52 (operand -> NUMBER .)
    -               reduce using rule 52 (operand -> NUMBER .)
    +               reduce using rule 52 (operand -> NUMBER .)
    %               reduce using rule 52 (operand -> NUMBER .)
    /               reduce using rule 52 (operand -> NUMBER .)
    *               reduce using rule 52 (operand -> NUMBER .)


state 86

    (33) val -> birf .
    EOL             reduce using rule 33 (val -> birf .)
    )               reduce using rule 33 (val -> birf .)
    SEPARATOR       reduce using rule 33 (val -> birf .)
    RBLOCKPAREN     reduce using rule 33 (val -> birf .)


state 87

    (75) birf -> birf_wp_call .
    EOL             reduce using rule 75 (birf -> birf_wp_call .)
    )               reduce using rule 75 (birf -> birf_wp_call .)
    SEPARATOR       reduce using rule 75 (birf -> birf_wp_call .)
    RBLOCKPAREN     reduce using rule 75 (birf -> birf_wp_call .)


state 88

    (76) birf -> birf_wop_call .
    EOL             reduce using rule 76 (birf -> birf_wop_call .)
    )               reduce using rule 76 (birf -> birf_wop_call .)
    SEPARATOR       reduce using rule 76 (birf -> birf_wop_call .)
    RBLOCKPAREN     reduce using rule 76 (birf -> birf_wop_call .)


state 89

    (72) birf_wp_call -> len_call .
    EOL             reduce using rule 72 (birf_wp_call -> len_call .)
    )               reduce using rule 72 (birf_wp_call -> len_call .)
    SEPARATOR       reduce using rule 72 (birf_wp_call -> len_call .)
    RBLOCKPAREN     reduce using rule 72 (birf_wp_call -> len_call .)


state 90

    (73) birf_wp_call -> pop_call .
    EOL             reduce using rule 73 (birf_wp_call -> pop_call .)
    )               reduce using rule 73 (birf_wp_call -> pop_call .)
    SEPARATOR       reduce using rule 73 (birf_wp_call -> pop_call .)
    RBLOCKPAREN     reduce using rule 73 (birf_wp_call -> pop_call .)


state 91

    (74) birf_wp_call -> birf_wp . ( params )
    (               shift and go to state 143


state 92

    (61) birf_wop_call -> birf_wop . ( )
    (               shift and go to state 144


state 93

    (70) len_call -> LEN . ( array_val )
    (71) len_call -> LEN . ( ID )
    (               shift and go to state 145


state 94

    (68) pop_call -> POP . ( array_val )
    (69) pop_call -> POP . ( ID )
    (               shift and go to state 146


state 95

    (62) birf_wp -> ADVANCE .
    (               reduce using rule 62 (birf_wp -> ADVANCE .)


state 96

    (63) birf_wp -> ROTATE_LEFT .
    (               reduce using rule 63 (birf_wp -> ROTATE_LEFT .)


state 97

    (64) birf_wp -> ROTATE_RIGHT .
    (               reduce using rule 64 (birf_wp -> ROTATE_RIGHT .)


state 98

    (65) birf_wp -> MOVE_RIGHT .
    (               reduce using rule 65 (birf_wp -> MOVE_RIGHT .)


state 99

    (66) birf_wp -> MOVE_LEFT .
    (               reduce using rule 66 (birf_wp -> MOVE_LEFT .)


state 100

    (67) birf_wp -> CHECK_CLEARED_LINE .
    (               reduce using rule 67 (birf_wp -> CHECK_CLEARED_LINE .)


state 101

    (58) birf_wop -> GET_CHAR .
    (               reduce using rule 58 (birf_wop -> GET_CHAR .)


state 102

    (59) birf_wop -> GET_BOARD .
    (               reduce using rule 59 (birf_wop -> GET_BOARD .)


state 103

    (60) birf_wop -> GET_NEXT_TETROMINO .
    (               reduce using rule 60 (birf_wop -> GET_NEXT_TETROMINO .)


state 104

    (18) init_stmt -> ARRAY ID ASSIGN . array_val EOL
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    LBLOCKPAREN     shift and go to state 83

    array_val                      shift and go to state 147

state 105

    (19) init_stmt -> data_type ID ASSIGN . expr EOL
    (20) init_stmt -> data_type ID ASSIGN . val EOL
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (52) operand -> . NUMBER
    (53) operand -> . ID
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    NOT             shift and go to state 72
    -               shift and go to state 73
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 85
    (               shift and go to state 70
    ID              shift and go to state 77
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    expr                           shift and go to state 148
    val                            shift and go to state 149
    factor                         shift and go to state 74
    birf                           shift and go to state 86
    operand                        shift and go to state 75
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 106

    (91) set_speed_call -> SET_SPEED ( HARD . )
    )               shift and go to state 150


state 107

    (92) set_speed_call -> SET_SPEED ( MEDIUM . )
    )               shift and go to state 151


state 108

    (93) set_speed_call -> SET_SPEED ( EASY . )
    )               shift and go to state 152


state 109

    (94) rem_call -> REM ( ID . SEPARATOR ID )
    (95) rem_call -> REM ( ID . SEPARATOR NUMBER )
    SEPARATOR       shift and go to state 153


state 110

    (96) rem_call -> REM ( array_val . SEPARATOR ID )
    (97) rem_call -> REM ( array_val . SEPARATOR NUMBER )
    SEPARATOR       shift and go to state 154


state 111

    (98) push_call -> PUSH ( ID . SEPARATOR ID )
    (99) push_call -> PUSH ( ID . SEPARATOR val )
    SEPARATOR       shift and go to state 155


state 112

    (101) bivf_wp_call -> bivf_wp ( params . )
    (54) params -> params . SEPARATOR param
    )               shift and go to state 156
    SEPARATOR       shift and go to state 157


state 113

    (55) params -> param .
    )               reduce using rule 55 (params -> param .)
    SEPARATOR       reduce using rule 55 (params -> param .)


state 114

    (56) param -> val .
    )               reduce using rule 56 (param -> val .)
    SEPARATOR       reduce using rule 56 (param -> val .)


state 115

    (57) param -> ID .
    )               reduce using rule 57 (param -> ID .)
    SEPARATOR       reduce using rule 57 (param -> ID .)


state 116

    (32) val -> NUMBER .
    )               reduce using rule 32 (val -> NUMBER .)
    SEPARATOR       reduce using rule 32 (val -> NUMBER .)
    RBLOCKPAREN     reduce using rule 32 (val -> NUMBER .)


state 117

    (100) bivf_wop_call -> bivf_wop ( ) .
    EOL             reduce using rule 100 (bivf_wop_call -> bivf_wop ( ) .)


state 118

    (111) timeout_stmt -> TIMEOUT ( NUMBER ) . LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 158


state 119

    (50) factor -> ( expr . )
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               shift and go to state 159
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 120

    (110) while_stmt -> WHILE ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 160


state 121

    (34) expr -> expr OR . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 161
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 122

    (35) expr -> expr AND . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 162
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 123

    (37) expr -> expr EE . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 163
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 124

    (38) expr -> expr NE . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 164
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 125

    (39) expr -> expr GTE . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 165
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 126

    (40) expr -> expr LTE . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 166
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 127

    (41) expr -> expr LT . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 167
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 128

    (42) expr -> expr GT . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 168
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 129

    (43) expr -> expr - . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 169
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 130

    (44) expr -> expr + . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 170
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 131

    (45) expr -> expr % . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 171
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 132

    (46) expr -> expr / . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 172
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 133

    (47) expr -> expr * . expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (52) operand -> . NUMBER
    (53) operand -> . ID
    NOT             shift and go to state 72
    -               shift and go to state 73
    (               shift and go to state 70
    NUMBER          shift and go to state 76
    ID              shift and go to state 77

    expr                           shift and go to state 173
    factor                         shift and go to state 74
    operand                        shift and go to state 75

state 134

    (36) expr -> NOT expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 36 (expr -> NOT expr .)
    OR              reduce using rule 36 (expr -> NOT expr .)
    AND             reduce using rule 36 (expr -> NOT expr .)
    EOL             reduce using rule 36 (expr -> NOT expr .)
    RBLOCKPAREN     reduce using rule 36 (expr -> NOT expr .)
    SEPARATOR       reduce using rule 36 (expr -> NOT expr .)
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 135

    (49) expr -> - factor .
    )               reduce using rule 49 (expr -> - factor .)
    OR              reduce using rule 49 (expr -> - factor .)
    AND             reduce using rule 49 (expr -> - factor .)
    EE              reduce using rule 49 (expr -> - factor .)
    NE              reduce using rule 49 (expr -> - factor .)
    GTE             reduce using rule 49 (expr -> - factor .)
    LTE             reduce using rule 49 (expr -> - factor .)
    LT              reduce using rule 49 (expr -> - factor .)
    GT              reduce using rule 49 (expr -> - factor .)
    -               reduce using rule 49 (expr -> - factor .)
    +               reduce using rule 49 (expr -> - factor .)
    %               reduce using rule 49 (expr -> - factor .)
    /               reduce using rule 49 (expr -> - factor .)
    *               reduce using rule 49 (expr -> - factor .)
    EOL             reduce using rule 49 (expr -> - factor .)
    RBLOCKPAREN     reduce using rule 49 (expr -> - factor .)
    SEPARATOR       reduce using rule 49 (expr -> - factor .)


state 136

    (114) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 174


state 137

    (15) reass_stmt -> ID ASSIGN expr EOL .
    TIMEOUT         reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    WHILE           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    EXIT            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    BREAK           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    IF              reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    IMPORT          reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ID              reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ARRAY           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_SPEED       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    REM             reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    PUSH            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    TETRO           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    BOARD           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    STRING_TYPE     reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    INT_TYPE        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ADD_SCORE       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_TETRO   reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY         reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    CLEAR_LINE      reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    HARD_DROP       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_MODE        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_GAME_DIFFICULTY reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    PLAY_HW         reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    CLEAR_SCREEN    reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_BOARD   reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    GET_NAME        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    $end            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    RCURLYPAREN     reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)


state 138

    (16) reass_stmt -> ID ASSIGN array_val EOL .
    TIMEOUT         reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    WHILE           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    EXIT            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    BREAK           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    IF              reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    IMPORT          reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ID              reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ARRAY           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_SPEED       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    REM             reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    PUSH            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    TETRO           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    BOARD           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    STRING_TYPE     reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    INT_TYPE        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ADD_SCORE       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_TETRO   reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY         reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    CLEAR_LINE      reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    HARD_DROP       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_MODE        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    PLAY_HW         reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    CLEAR_SCREEN    reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_BOARD   reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    GET_NAME        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    $end            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    RCURLYPAREN     reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)


state 139

    (17) reass_stmt -> ID ASSIGN val EOL .
    TIMEOUT         reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    WHILE           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    EXIT            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    BREAK           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    IF              reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    IMPORT          reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ID              reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ARRAY           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_SPEED       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    REM             reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    PUSH            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    TETRO           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    BOARD           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    STRING_TYPE     reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    INT_TYPE        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ADD_SCORE       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_TETRO   reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY         reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    CLEAR_LINE      reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    HARD_DROP       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_MODE        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    PLAY_HW         reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    CLEAR_SCREEN    reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_BOARD   reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    GET_NAME        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    $end            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    RCURLYPAREN     reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)


state 140

    (26) array_val -> LBLOCKPAREN set . RBLOCKPAREN
    (28) set -> set . SEPARATOR expr
    (29) set -> set . SEPARATOR val
    RBLOCKPAREN     shift and go to state 175
    SEPARATOR       shift and go to state 176


state 141

    (27) array_val -> LBLOCKPAREN RBLOCKPAREN .
    EOL             reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)
    SEPARATOR       reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)
    )               reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)


state 142

    (30) set -> val .
    RBLOCKPAREN     reduce using rule 30 (set -> val .)
    SEPARATOR       reduce using rule 30 (set -> val .)


state 143

    (74) birf_wp_call -> birf_wp ( . params )
    (54) params -> . params SEPARATOR param
    (55) params -> . param
    (56) param -> . val
    (57) param -> . ID
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 115
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 116
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    birf_wp                        shift and go to state 91
    params                         shift and go to state 177
    param                          shift and go to state 113
    val                            shift and go to state 114
    birf                           shift and go to state 86
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wop                       shift and go to state 92

state 144

    (61) birf_wop_call -> birf_wop ( . )
    )               shift and go to state 178


state 145

    (70) len_call -> LEN ( . array_val )
    (71) len_call -> LEN ( . ID )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 180
    LBLOCKPAREN     shift and go to state 83

    array_val                      shift and go to state 179

state 146

    (68) pop_call -> POP ( . array_val )
    (69) pop_call -> POP ( . ID )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 182
    LBLOCKPAREN     shift and go to state 83

    array_val                      shift and go to state 181

state 147

    (18) init_stmt -> ARRAY ID ASSIGN array_val . EOL
    EOL             shift and go to state 183


state 148

    (19) init_stmt -> data_type ID ASSIGN expr . EOL
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    EOL             shift and go to state 184
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 149

    (20) init_stmt -> data_type ID ASSIGN val . EOL
    EOL             shift and go to state 185


state 150

    (91) set_speed_call -> SET_SPEED ( HARD ) .
    EOL             reduce using rule 91 (set_speed_call -> SET_SPEED ( HARD ) .)


state 151

    (92) set_speed_call -> SET_SPEED ( MEDIUM ) .
    EOL             reduce using rule 92 (set_speed_call -> SET_SPEED ( MEDIUM ) .)


state 152

    (93) set_speed_call -> SET_SPEED ( EASY ) .
    EOL             reduce using rule 93 (set_speed_call -> SET_SPEED ( EASY ) .)


state 153

    (94) rem_call -> REM ( ID SEPARATOR . ID )
    (95) rem_call -> REM ( ID SEPARATOR . NUMBER )
    ID              shift and go to state 186
    NUMBER          shift and go to state 187


state 154

    (96) rem_call -> REM ( array_val SEPARATOR . ID )
    (97) rem_call -> REM ( array_val SEPARATOR . NUMBER )
    ID              shift and go to state 188
    NUMBER          shift and go to state 189


state 155

    (98) push_call -> PUSH ( ID SEPARATOR . ID )
    (99) push_call -> PUSH ( ID SEPARATOR . val )
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 190
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 116
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    val                            shift and go to state 191
    birf                           shift and go to state 86
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 156

    (101) bivf_wp_call -> bivf_wp ( params ) .
    EOL             reduce using rule 101 (bivf_wp_call -> bivf_wp ( params ) .)


state 157

    (54) params -> params SEPARATOR . param
    (56) param -> . val
    (57) param -> . ID
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 115
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 116
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    param                          shift and go to state 192
    val                            shift and go to state 114
    birf                           shift and go to state 86
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 158

    (111) timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    compound_stmt                  shift and go to state 193
    statement                      shift and go to state 2
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 159

    (50) factor -> ( expr ) .
    )               reduce using rule 50 (factor -> ( expr ) .)
    OR              reduce using rule 50 (factor -> ( expr ) .)
    AND             reduce using rule 50 (factor -> ( expr ) .)
    EE              reduce using rule 50 (factor -> ( expr ) .)
    NE              reduce using rule 50 (factor -> ( expr ) .)
    GTE             reduce using rule 50 (factor -> ( expr ) .)
    LTE             reduce using rule 50 (factor -> ( expr ) .)
    LT              reduce using rule 50 (factor -> ( expr ) .)
    GT              reduce using rule 50 (factor -> ( expr ) .)
    -               reduce using rule 50 (factor -> ( expr ) .)
    +               reduce using rule 50 (factor -> ( expr ) .)
    %               reduce using rule 50 (factor -> ( expr ) .)
    /               reduce using rule 50 (factor -> ( expr ) .)
    *               reduce using rule 50 (factor -> ( expr ) .)
    EOL             reduce using rule 50 (factor -> ( expr ) .)
    RBLOCKPAREN     reduce using rule 50 (factor -> ( expr ) .)
    SEPARATOR       reduce using rule 50 (factor -> ( expr ) .)


state 160

    (110) while_stmt -> WHILE ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    compound_stmt                  shift and go to state 194
    statement                      shift and go to state 2
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 161

    (34) expr -> expr OR expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 34 (expr -> expr OR expr .)
    OR              reduce using rule 34 (expr -> expr OR expr .)
    EOL             reduce using rule 34 (expr -> expr OR expr .)
    RBLOCKPAREN     reduce using rule 34 (expr -> expr OR expr .)
    SEPARATOR       reduce using rule 34 (expr -> expr OR expr .)
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 162

    (35) expr -> expr AND expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 35 (expr -> expr AND expr .)
    OR              reduce using rule 35 (expr -> expr AND expr .)
    AND             reduce using rule 35 (expr -> expr AND expr .)
    EOL             reduce using rule 35 (expr -> expr AND expr .)
    RBLOCKPAREN     reduce using rule 35 (expr -> expr AND expr .)
    SEPARATOR       reduce using rule 35 (expr -> expr AND expr .)
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 163

    (37) expr -> expr EE expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 37 (expr -> expr EE expr .)
    OR              reduce using rule 37 (expr -> expr EE expr .)
    AND             reduce using rule 37 (expr -> expr EE expr .)
    EE              reduce using rule 37 (expr -> expr EE expr .)
    NE              reduce using rule 37 (expr -> expr EE expr .)
    GTE             reduce using rule 37 (expr -> expr EE expr .)
    LTE             reduce using rule 37 (expr -> expr EE expr .)
    LT              reduce using rule 37 (expr -> expr EE expr .)
    GT              reduce using rule 37 (expr -> expr EE expr .)
    EOL             reduce using rule 37 (expr -> expr EE expr .)
    RBLOCKPAREN     reduce using rule 37 (expr -> expr EE expr .)
    SEPARATOR       reduce using rule 37 (expr -> expr EE expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 164

    (38) expr -> expr NE expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 38 (expr -> expr NE expr .)
    OR              reduce using rule 38 (expr -> expr NE expr .)
    AND             reduce using rule 38 (expr -> expr NE expr .)
    EE              reduce using rule 38 (expr -> expr NE expr .)
    NE              reduce using rule 38 (expr -> expr NE expr .)
    GTE             reduce using rule 38 (expr -> expr NE expr .)
    LTE             reduce using rule 38 (expr -> expr NE expr .)
    LT              reduce using rule 38 (expr -> expr NE expr .)
    GT              reduce using rule 38 (expr -> expr NE expr .)
    EOL             reduce using rule 38 (expr -> expr NE expr .)
    RBLOCKPAREN     reduce using rule 38 (expr -> expr NE expr .)
    SEPARATOR       reduce using rule 38 (expr -> expr NE expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 165

    (39) expr -> expr GTE expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 39 (expr -> expr GTE expr .)
    OR              reduce using rule 39 (expr -> expr GTE expr .)
    AND             reduce using rule 39 (expr -> expr GTE expr .)
    EE              reduce using rule 39 (expr -> expr GTE expr .)
    NE              reduce using rule 39 (expr -> expr GTE expr .)
    GTE             reduce using rule 39 (expr -> expr GTE expr .)
    LTE             reduce using rule 39 (expr -> expr GTE expr .)
    LT              reduce using rule 39 (expr -> expr GTE expr .)
    GT              reduce using rule 39 (expr -> expr GTE expr .)
    EOL             reduce using rule 39 (expr -> expr GTE expr .)
    RBLOCKPAREN     reduce using rule 39 (expr -> expr GTE expr .)
    SEPARATOR       reduce using rule 39 (expr -> expr GTE expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 166

    (40) expr -> expr LTE expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 40 (expr -> expr LTE expr .)
    OR              reduce using rule 40 (expr -> expr LTE expr .)
    AND             reduce using rule 40 (expr -> expr LTE expr .)
    EE              reduce using rule 40 (expr -> expr LTE expr .)
    NE              reduce using rule 40 (expr -> expr LTE expr .)
    GTE             reduce using rule 40 (expr -> expr LTE expr .)
    LTE             reduce using rule 40 (expr -> expr LTE expr .)
    LT              reduce using rule 40 (expr -> expr LTE expr .)
    GT              reduce using rule 40 (expr -> expr LTE expr .)
    EOL             reduce using rule 40 (expr -> expr LTE expr .)
    RBLOCKPAREN     reduce using rule 40 (expr -> expr LTE expr .)
    SEPARATOR       reduce using rule 40 (expr -> expr LTE expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 167

    (41) expr -> expr LT expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 41 (expr -> expr LT expr .)
    OR              reduce using rule 41 (expr -> expr LT expr .)
    AND             reduce using rule 41 (expr -> expr LT expr .)
    EE              reduce using rule 41 (expr -> expr LT expr .)
    NE              reduce using rule 41 (expr -> expr LT expr .)
    GTE             reduce using rule 41 (expr -> expr LT expr .)
    LTE             reduce using rule 41 (expr -> expr LT expr .)
    LT              reduce using rule 41 (expr -> expr LT expr .)
    GT              reduce using rule 41 (expr -> expr LT expr .)
    EOL             reduce using rule 41 (expr -> expr LT expr .)
    RBLOCKPAREN     reduce using rule 41 (expr -> expr LT expr .)
    SEPARATOR       reduce using rule 41 (expr -> expr LT expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 168

    (42) expr -> expr GT expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 42 (expr -> expr GT expr .)
    OR              reduce using rule 42 (expr -> expr GT expr .)
    AND             reduce using rule 42 (expr -> expr GT expr .)
    EE              reduce using rule 42 (expr -> expr GT expr .)
    NE              reduce using rule 42 (expr -> expr GT expr .)
    GTE             reduce using rule 42 (expr -> expr GT expr .)
    LTE             reduce using rule 42 (expr -> expr GT expr .)
    LT              reduce using rule 42 (expr -> expr GT expr .)
    GT              reduce using rule 42 (expr -> expr GT expr .)
    EOL             reduce using rule 42 (expr -> expr GT expr .)
    RBLOCKPAREN     reduce using rule 42 (expr -> expr GT expr .)
    SEPARATOR       reduce using rule 42 (expr -> expr GT expr .)
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 169

    (43) expr -> expr - expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 43 (expr -> expr - expr .)
    OR              reduce using rule 43 (expr -> expr - expr .)
    AND             reduce using rule 43 (expr -> expr - expr .)
    EE              reduce using rule 43 (expr -> expr - expr .)
    NE              reduce using rule 43 (expr -> expr - expr .)
    GTE             reduce using rule 43 (expr -> expr - expr .)
    LTE             reduce using rule 43 (expr -> expr - expr .)
    LT              reduce using rule 43 (expr -> expr - expr .)
    GT              reduce using rule 43 (expr -> expr - expr .)
    -               reduce using rule 43 (expr -> expr - expr .)
    +               reduce using rule 43 (expr -> expr - expr .)
    EOL             reduce using rule 43 (expr -> expr - expr .)
    RBLOCKPAREN     reduce using rule 43 (expr -> expr - expr .)
    SEPARATOR       reduce using rule 43 (expr -> expr - expr .)
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 170

    (44) expr -> expr + expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 44 (expr -> expr + expr .)
    OR              reduce using rule 44 (expr -> expr + expr .)
    AND             reduce using rule 44 (expr -> expr + expr .)
    EE              reduce using rule 44 (expr -> expr + expr .)
    NE              reduce using rule 44 (expr -> expr + expr .)
    GTE             reduce using rule 44 (expr -> expr + expr .)
    LTE             reduce using rule 44 (expr -> expr + expr .)
    LT              reduce using rule 44 (expr -> expr + expr .)
    GT              reduce using rule 44 (expr -> expr + expr .)
    -               reduce using rule 44 (expr -> expr + expr .)
    +               reduce using rule 44 (expr -> expr + expr .)
    EOL             reduce using rule 44 (expr -> expr + expr .)
    RBLOCKPAREN     reduce using rule 44 (expr -> expr + expr .)
    SEPARATOR       reduce using rule 44 (expr -> expr + expr .)
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 171

    (45) expr -> expr % expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 45 (expr -> expr % expr .)
    OR              reduce using rule 45 (expr -> expr % expr .)
    AND             reduce using rule 45 (expr -> expr % expr .)
    EE              reduce using rule 45 (expr -> expr % expr .)
    NE              reduce using rule 45 (expr -> expr % expr .)
    GTE             reduce using rule 45 (expr -> expr % expr .)
    LTE             reduce using rule 45 (expr -> expr % expr .)
    LT              reduce using rule 45 (expr -> expr % expr .)
    GT              reduce using rule 45 (expr -> expr % expr .)
    -               reduce using rule 45 (expr -> expr % expr .)
    +               reduce using rule 45 (expr -> expr % expr .)
    %               reduce using rule 45 (expr -> expr % expr .)
    /               reduce using rule 45 (expr -> expr % expr .)
    *               reduce using rule 45 (expr -> expr % expr .)
    EOL             reduce using rule 45 (expr -> expr % expr .)
    RBLOCKPAREN     reduce using rule 45 (expr -> expr % expr .)
    SEPARATOR       reduce using rule 45 (expr -> expr % expr .)


state 172

    (46) expr -> expr / expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 46 (expr -> expr / expr .)
    OR              reduce using rule 46 (expr -> expr / expr .)
    AND             reduce using rule 46 (expr -> expr / expr .)
    EE              reduce using rule 46 (expr -> expr / expr .)
    NE              reduce using rule 46 (expr -> expr / expr .)
    GTE             reduce using rule 46 (expr -> expr / expr .)
    LTE             reduce using rule 46 (expr -> expr / expr .)
    LT              reduce using rule 46 (expr -> expr / expr .)
    GT              reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    +               reduce using rule 46 (expr -> expr / expr .)
    %               reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    EOL             reduce using rule 46 (expr -> expr / expr .)
    RBLOCKPAREN     reduce using rule 46 (expr -> expr / expr .)
    SEPARATOR       reduce using rule 46 (expr -> expr / expr .)


state 173

    (47) expr -> expr * expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               reduce using rule 47 (expr -> expr * expr .)
    OR              reduce using rule 47 (expr -> expr * expr .)
    AND             reduce using rule 47 (expr -> expr * expr .)
    EE              reduce using rule 47 (expr -> expr * expr .)
    NE              reduce using rule 47 (expr -> expr * expr .)
    GTE             reduce using rule 47 (expr -> expr * expr .)
    LTE             reduce using rule 47 (expr -> expr * expr .)
    LT              reduce using rule 47 (expr -> expr * expr .)
    GT              reduce using rule 47 (expr -> expr * expr .)
    -               reduce using rule 47 (expr -> expr * expr .)
    +               reduce using rule 47 (expr -> expr * expr .)
    %               reduce using rule 47 (expr -> expr * expr .)
    /               reduce using rule 47 (expr -> expr * expr .)
    *               reduce using rule 47 (expr -> expr * expr .)
    EOL             reduce using rule 47 (expr -> expr * expr .)
    RBLOCKPAREN     reduce using rule 47 (expr -> expr * expr .)
    SEPARATOR       reduce using rule 47 (expr -> expr * expr .)


state 174

    (114) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    compound_stmt                  shift and go to state 195
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    statement                      shift and go to state 2
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 175

    (26) array_val -> LBLOCKPAREN set RBLOCKPAREN .
    EOL             reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)
    SEPARATOR       reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)
    )               reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)


state 176

    (28) set -> set SEPARATOR . expr
    (29) set -> set SEPARATOR . val
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . NOT expr
    (37) expr -> . expr EE expr
    (38) expr -> . expr NE expr
    (39) expr -> . expr GTE expr
    (40) expr -> . expr LTE expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr - expr
    (44) expr -> . expr + expr
    (45) expr -> . expr % expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . factor
    (49) expr -> . - factor
    (31) val -> . STRING_LITERAL
    (32) val -> . NUMBER
    (33) val -> . birf
    (50) factor -> . ( expr )
    (51) factor -> . operand
    (75) birf -> . birf_wp_call
    (76) birf -> . birf_wop_call
    (52) operand -> . NUMBER
    (53) operand -> . ID
    (72) birf_wp_call -> . len_call
    (73) birf_wp_call -> . pop_call
    (74) birf_wp_call -> . birf_wp ( params )
    (61) birf_wop_call -> . birf_wop ( )
    (70) len_call -> . LEN ( array_val )
    (71) len_call -> . LEN ( ID )
    (68) pop_call -> . POP ( array_val )
    (69) pop_call -> . POP ( ID )
    (62) birf_wp -> . ADVANCE
    (63) birf_wp -> . ROTATE_LEFT
    (64) birf_wp -> . ROTATE_RIGHT
    (65) birf_wp -> . MOVE_RIGHT
    (66) birf_wp -> . MOVE_LEFT
    (67) birf_wp -> . CHECK_CLEARED_LINE
    (58) birf_wop -> . GET_CHAR
    (59) birf_wop -> . GET_BOARD
    (60) birf_wop -> . GET_NEXT_TETROMINO
    NOT             shift and go to state 72
    -               shift and go to state 73
    STRING_LITERAL  shift and go to state 84
    NUMBER          shift and go to state 85
    (               shift and go to state 70
    ID              shift and go to state 77
    LEN             shift and go to state 93
    POP             shift and go to state 94
    ADVANCE         shift and go to state 95
    ROTATE_LEFT     shift and go to state 96
    ROTATE_RIGHT    shift and go to state 97
    MOVE_RIGHT      shift and go to state 98
    MOVE_LEFT       shift and go to state 99
    CHECK_CLEARED_LINE shift and go to state 100
    GET_CHAR        shift and go to state 101
    GET_BOARD       shift and go to state 102
    GET_NEXT_TETROMINO shift and go to state 103

    expr                           shift and go to state 196
    val                            shift and go to state 197
    factor                         shift and go to state 74
    birf                           shift and go to state 86
    operand                        shift and go to state 75
    birf_wp_call                   shift and go to state 87
    birf_wop_call                  shift and go to state 88
    len_call                       shift and go to state 89
    pop_call                       shift and go to state 90
    birf_wp                        shift and go to state 91
    birf_wop                       shift and go to state 92

state 177

    (74) birf_wp_call -> birf_wp ( params . )
    (54) params -> params . SEPARATOR param
    )               shift and go to state 198
    SEPARATOR       shift and go to state 157


state 178

    (61) birf_wop_call -> birf_wop ( ) .
    EOL             reduce using rule 61 (birf_wop_call -> birf_wop ( ) .)
    )               reduce using rule 61 (birf_wop_call -> birf_wop ( ) .)
    SEPARATOR       reduce using rule 61 (birf_wop_call -> birf_wop ( ) .)
    RBLOCKPAREN     reduce using rule 61 (birf_wop_call -> birf_wop ( ) .)


state 179

    (70) len_call -> LEN ( array_val . )
    )               shift and go to state 199


state 180

    (71) len_call -> LEN ( ID . )
    )               shift and go to state 200


state 181

    (68) pop_call -> POP ( array_val . )
    )               shift and go to state 201


state 182

    (69) pop_call -> POP ( ID . )
    )               shift and go to state 202


state 183

    (18) init_stmt -> ARRAY ID ASSIGN array_val EOL .
    TIMEOUT         reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    WHILE           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    EXIT            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    BREAK           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    IF              reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    IMPORT          reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ID              reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ARRAY           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_SPEED       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    REM             reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    PUSH            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    TETRO           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    BOARD           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    STRING_TYPE     reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    INT_TYPE        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ADD_SCORE       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_TETRO   reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY         reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    CLEAR_LINE      reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    HARD_DROP       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_MODE        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    PLAY_HW         reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    CLEAR_SCREEN    reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_BOARD   reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    GET_NAME        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    $end            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    RCURLYPAREN     reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)


state 184

    (19) init_stmt -> data_type ID ASSIGN expr EOL .
    TIMEOUT         reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    WHILE           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    EXIT            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    BREAK           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    IF              reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    IMPORT          reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ID              reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ARRAY           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_SPEED       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    REM             reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    PUSH            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    TETRO           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    BOARD           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    STRING_TYPE     reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    INT_TYPE        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ADD_SCORE       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_TETRO   reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY         reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    CLEAR_LINE      reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    HARD_DROP       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_MODE        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_GAME_DIFFICULTY reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    PLAY_HW         reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    CLEAR_SCREEN    reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_BOARD   reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    GET_NAME        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    $end            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    RCURLYPAREN     reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)


state 185

    (20) init_stmt -> data_type ID ASSIGN val EOL .
    TIMEOUT         reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    WHILE           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    EXIT            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    BREAK           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    IF              reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    IMPORT          reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ID              reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ARRAY           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_SPEED       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    REM             reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    PUSH            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    TETRO           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    BOARD           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    STRING_TYPE     reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    INT_TYPE        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ADD_SCORE       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_TETRO   reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY         reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    CLEAR_LINE      reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    HARD_DROP       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_MODE        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    PLAY_HW         reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    CLEAR_SCREEN    reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_BOARD   reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    GET_NAME        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    $end            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    RCURLYPAREN     reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)


state 186

    (94) rem_call -> REM ( ID SEPARATOR ID . )
    )               shift and go to state 203


state 187

    (95) rem_call -> REM ( ID SEPARATOR NUMBER . )
    )               shift and go to state 204


state 188

    (96) rem_call -> REM ( array_val SEPARATOR ID . )
    )               shift and go to state 205


state 189

    (97) rem_call -> REM ( array_val SEPARATOR NUMBER . )
    )               shift and go to state 206


state 190

    (98) push_call -> PUSH ( ID SEPARATOR ID . )
    )               shift and go to state 207


state 191

    (99) push_call -> PUSH ( ID SEPARATOR val . )
    )               shift and go to state 208


state 192

    (54) params -> params SEPARATOR param .
    )               reduce using rule 54 (params -> params SEPARATOR param .)
    SEPARATOR       reduce using rule 54 (params -> params SEPARATOR param .)


state 193

    (111) timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    RCURLYPAREN     shift and go to state 209
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    statement                      shift and go to state 49
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 194

    (110) while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    RCURLYPAREN     shift and go to state 210
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    statement                      shift and go to state 49
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 195

    (114) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    RCURLYPAREN     shift and go to state 211
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    statement                      shift and go to state 49
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 196

    (28) set -> set SEPARATOR expr .
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (37) expr -> expr . EE expr
    (38) expr -> expr . NE expr
    (39) expr -> expr . GTE expr
    (40) expr -> expr . LTE expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . - expr
    (44) expr -> expr . + expr
    (45) expr -> expr . % expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    RBLOCKPAREN     reduce using rule 28 (set -> set SEPARATOR expr .)
    SEPARATOR       reduce using rule 28 (set -> set SEPARATOR expr .)
    OR              shift and go to state 121
    AND             shift and go to state 122
    EE              shift and go to state 123
    NE              shift and go to state 124
    GTE             shift and go to state 125
    LTE             shift and go to state 126
    LT              shift and go to state 127
    GT              shift and go to state 128
    -               shift and go to state 129
    +               shift and go to state 130
    %               shift and go to state 131
    /               shift and go to state 132
    *               shift and go to state 133


state 197

    (29) set -> set SEPARATOR val .
    RBLOCKPAREN     reduce using rule 29 (set -> set SEPARATOR val .)
    SEPARATOR       reduce using rule 29 (set -> set SEPARATOR val .)


state 198

    (74) birf_wp_call -> birf_wp ( params ) .
    EOL             reduce using rule 74 (birf_wp_call -> birf_wp ( params ) .)
    )               reduce using rule 74 (birf_wp_call -> birf_wp ( params ) .)
    SEPARATOR       reduce using rule 74 (birf_wp_call -> birf_wp ( params ) .)
    RBLOCKPAREN     reduce using rule 74 (birf_wp_call -> birf_wp ( params ) .)


state 199

    (70) len_call -> LEN ( array_val ) .
    EOL             reduce using rule 70 (len_call -> LEN ( array_val ) .)
    )               reduce using rule 70 (len_call -> LEN ( array_val ) .)
    SEPARATOR       reduce using rule 70 (len_call -> LEN ( array_val ) .)
    RBLOCKPAREN     reduce using rule 70 (len_call -> LEN ( array_val ) .)


state 200

    (71) len_call -> LEN ( ID ) .
    EOL             reduce using rule 71 (len_call -> LEN ( ID ) .)
    )               reduce using rule 71 (len_call -> LEN ( ID ) .)
    SEPARATOR       reduce using rule 71 (len_call -> LEN ( ID ) .)
    RBLOCKPAREN     reduce using rule 71 (len_call -> LEN ( ID ) .)


state 201

    (68) pop_call -> POP ( array_val ) .
    EOL             reduce using rule 68 (pop_call -> POP ( array_val ) .)
    )               reduce using rule 68 (pop_call -> POP ( array_val ) .)
    SEPARATOR       reduce using rule 68 (pop_call -> POP ( array_val ) .)
    RBLOCKPAREN     reduce using rule 68 (pop_call -> POP ( array_val ) .)


state 202

    (69) pop_call -> POP ( ID ) .
    EOL             reduce using rule 69 (pop_call -> POP ( ID ) .)
    )               reduce using rule 69 (pop_call -> POP ( ID ) .)
    SEPARATOR       reduce using rule 69 (pop_call -> POP ( ID ) .)
    RBLOCKPAREN     reduce using rule 69 (pop_call -> POP ( ID ) .)


state 203

    (94) rem_call -> REM ( ID SEPARATOR ID ) .
    EOL             reduce using rule 94 (rem_call -> REM ( ID SEPARATOR ID ) .)


state 204

    (95) rem_call -> REM ( ID SEPARATOR NUMBER ) .
    EOL             reduce using rule 95 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)


state 205

    (96) rem_call -> REM ( array_val SEPARATOR ID ) .
    EOL             reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR ID ) .)


state 206

    (97) rem_call -> REM ( array_val SEPARATOR NUMBER ) .
    EOL             reduce using rule 97 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)


state 207

    (98) push_call -> PUSH ( ID SEPARATOR ID ) .
    EOL             reduce using rule 98 (push_call -> PUSH ( ID SEPARATOR ID ) .)


state 208

    (99) push_call -> PUSH ( ID SEPARATOR val ) .
    EOL             reduce using rule 99 (push_call -> PUSH ( ID SEPARATOR val ) .)


state 209

    (111) timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .
    TIMEOUT         reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    WHILE           reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    EXIT            reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 111 (timeout_stmt -> TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN .)


state 210

    (110) while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .
    TIMEOUT         reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    WHILE           reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    EXIT            reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 110 (while_stmt -> WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)


state 211

    (114) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_else_stmt
    (116) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_stmt
    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .
    ELSE            shift and go to state 212
    TIMEOUT         reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    WHILE           reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    EXIT            reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 112 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)


state 212

    (114) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_elseif_stmt
    (115) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_else_stmt
    (116) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_stmt
    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . LCURLYPAREN compound_stmt RCURLYPAREN
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 213
    IF              shift and go to state 18

    if_elseif_stmt                 shift and go to state 214
    if_else_stmt                   shift and go to state 215
    if_stmt                        shift and go to state 216

state 213

    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    compound_stmt                  shift and go to state 217
    statement                      shift and go to state 2
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 214

    (114) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .
    TIMEOUT         reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    WHILE           reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    EXIT            reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    BREAK           reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    IF              reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    IMPORT          reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ID              reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ARRAY           reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_SPEED       reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    REM             reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    PUSH            reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    TETRO           reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    BOARD           reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    STRING_TYPE     reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    INT_TYPE        reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ADD_SCORE       reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_TETRO   reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY         reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    CLEAR_LINE      reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    HARD_DROP       reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_MODE        reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    PLAY_HW         reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    CLEAR_SCREEN    reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_BOARD   reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    GET_NAME        reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    $end            reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    RCURLYPAREN     reduce using rule 114 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)


state 215

    (115) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .
    TIMEOUT         reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    WHILE           reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    EXIT            reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    BREAK           reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    IF              reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    IMPORT          reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ID              reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ARRAY           reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_SPEED       reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    REM             reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    PUSH            reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    TETRO           reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    BOARD           reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    STRING_TYPE     reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    INT_TYPE        reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ADD_SCORE       reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_TETRO   reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY         reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    CLEAR_LINE      reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    HARD_DROP       reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_MODE        reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    PLAY_HW         reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    CLEAR_SCREEN    reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_BOARD   reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    GET_NAME        reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    $end            reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    RCURLYPAREN     reduce using rule 115 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)


state 216

    (116) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .
    TIMEOUT         reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    WHILE           reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    EXIT            reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    BREAK           reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    IF              reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    IMPORT          reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ID              reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ARRAY           reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_SPEED       reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    REM             reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    PUSH            reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    TETRO           reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    BOARD           reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    STRING_TYPE     reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    INT_TYPE        reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ADD_SCORE       reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_TETRO   reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY         reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    CLEAR_LINE      reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    HARD_DROP       reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_MODE        reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    PLAY_HW         reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    CLEAR_SCREEN    reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_BOARD   reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    GET_NAME        reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    $end            reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    RCURLYPAREN     reduce using rule 116 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)


state 217

    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . timeout_stmt
    (4) statement -> . while_stmt
    (5) statement -> . exit_stmt
    (6) statement -> . break_stmt
    (7) statement -> . if_elseif_stmt
    (8) statement -> . if_else_stmt
    (9) statement -> . if_stmt
    (10) statement -> . import_stmt
    (11) statement -> . bivf
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (111) timeout_stmt -> . TIMEOUT ( NUMBER ) LCURLYPAREN compound_stmt RCURLYPAREN
    (110) while_stmt -> . WHILE ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (108) exit_stmt -> . EXIT EOL
    (107) break_stmt -> . BREAK EOL
    (114) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (115) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (116) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (113) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (112) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (102) bivf -> . set_speed_call EOL
    (103) bivf -> . rem_call EOL
    (104) bivf -> . push_call EOL
    (105) bivf -> . bivf_wp_call EOL
    (106) bivf -> . bivf_wop_call EOL
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (91) set_speed_call -> . SET_SPEED ( HARD )
    (92) set_speed_call -> . SET_SPEED ( MEDIUM )
    (93) set_speed_call -> . SET_SPEED ( EASY )
    (94) rem_call -> . REM ( ID SEPARATOR ID )
    (95) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (96) rem_call -> . REM ( array_val SEPARATOR ID )
    (97) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (98) push_call -> . PUSH ( ID SEPARATOR ID )
    (99) push_call -> . PUSH ( ID SEPARATOR val )
    (101) bivf_wp_call -> . bivf_wp ( params )
    (100) bivf_wop_call -> . bivf_wop ( )
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (83) bivf_wp -> . PUSH
    (84) bivf_wp -> . REM
    (85) bivf_wp -> . ADD_SCORE
    (86) bivf_wp -> . DISPLAY_NEXT_TETRO
    (87) bivf_wp -> . DISPLAY_TETRO
    (88) bivf_wp -> . DISPLAY
    (89) bivf_wp -> . CLEAR_LINE
    (90) bivf_wp -> . HARD_DROP
    (77) bivf_wop -> . SET_MODE
    (78) bivf_wop -> . SET_GAME_DIFFICULTY
    (79) bivf_wop -> . PLAY_HW
    (80) bivf_wop -> . CLEAR_SCREEN
    (81) bivf_wop -> . DISPLAY_BOARD
    (82) bivf_wop -> . GET_NAME
    RCURLYPAREN     shift and go to state 218
    TIMEOUT         shift and go to state 14
    WHILE           shift and go to state 15
    EXIT            shift and go to state 16
    BREAK           shift and go to state 17
    IF              shift and go to state 18
    IMPORT          shift and go to state 19
    ID              shift and go to state 25
    ARRAY           shift and go to state 26
    SET_SPEED       shift and go to state 28
    REM             shift and go to state 29
    PUSH            shift and go to state 30
    TETRO           shift and go to state 33
    BOARD           shift and go to state 34
    STRING_TYPE     shift and go to state 35
    INT_TYPE        shift and go to state 36
    ADD_SCORE       shift and go to state 37
    DISPLAY_NEXT_TETRO shift and go to state 38
    DISPLAY_TETRO   shift and go to state 39
    DISPLAY         shift and go to state 40
    CLEAR_LINE      shift and go to state 41
    HARD_DROP       shift and go to state 42
    SET_MODE        shift and go to state 43
    SET_GAME_DIFFICULTY shift and go to state 44
    PLAY_HW         shift and go to state 45
    CLEAR_SCREEN    shift and go to state 46
    DISPLAY_BOARD   shift and go to state 47
    GET_NAME        shift and go to state 48

    statement                      shift and go to state 49
    timeout_stmt                   shift and go to state 3
    while_stmt                     shift and go to state 4
    exit_stmt                      shift and go to state 5
    break_stmt                     shift and go to state 6
    if_elseif_stmt                 shift and go to state 7
    if_else_stmt                   shift and go to state 8
    if_stmt                        shift and go to state 9
    import_stmt                    shift and go to state 10
    bivf                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 20
    rem_call                       shift and go to state 21
    push_call                      shift and go to state 22
    bivf_wp_call                   shift and go to state 23
    bivf_wop_call                  shift and go to state 24
    data_type                      shift and go to state 27
    bivf_wp                        shift and go to state 31
    bivf_wop                       shift and go to state 32

state 218

    (113) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .
    TIMEOUT         reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    WHILE           reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    EXIT            reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 113 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)


Conflicts:

shift/reduce conflict for ID in state 26 resolved as shift
shift/reduce conflict for ( in state 29 resolved as shift
shift/reduce conflict for ( in state 30 resolved as shift
reduce/reduce conflict in state 85 resolved using rule val -> NUMBER
rejected rule (operand -> NUMBER) in state 85