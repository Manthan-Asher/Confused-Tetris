Grammar:

Rule 0     S' -> compound_stmt
Rule 1     compound_stmt -> compound_stmt statement
Rule 2     compound_stmt -> statement
Rule 3     statement -> exit_stmt
Rule 4     statement -> break_stmt
Rule 5     statement -> if_elseif_stmt
Rule 6     statement -> if_else_stmt
Rule 7     statement -> if_stmt
Rule 8     statement -> import_stmt
Rule 9     statement -> rem_call
Rule 10    statement -> bivf
Rule 11    statement -> expr
Rule 12    statement -> reass_stmt
Rule 13    statement -> init_stmt
Rule 14    import_stmt -> IMPORT GAME EOL
Rule 15    reass_stmt -> ID ASSIGN expr EOL
Rule 16    reass_stmt -> ID ASSIGN array_val EOL
Rule 17    reass_stmt -> ID ASSIGN val EOL
Rule 18    init_stmt -> ARRAY ID ASSIGN array_val EOL
Rule 19    init_stmt -> data_type ID ASSIGN expr EOL
Rule 20    init_stmt -> data_type ID ASSIGN val EOL
Rule 21    data_type -> TETRO
Rule 22    data_type -> BOARD
Rule 23    data_type -> ARRAY
Rule 24    data_type -> STRING_TYPE
Rule 25    data_type -> INT_TYPE
Rule 26    array_val -> LBLOCKPAREN set RBLOCKPAREN
Rule 27    array_val -> LBLOCKPAREN RBLOCKPAREN
Rule 28    set -> set SEPARATOR val
Rule 29    set -> val
Rule 30    val -> STRING_LITERAL
Rule 31    val -> NUMBER
Rule 32    val -> birf
Rule 33    expr -> expr OR expr  [precedence=left, level=1]
Rule 34    expr -> expr AND expr  [precedence=left, level=2]
Rule 35    expr -> NOT expr  [precedence=left, level=3]
Rule 36    expr -> expr EE expr  [precedence=nonassoc, level=4]
Rule 37    expr -> expr NE expr  [precedence=nonassoc, level=4]
Rule 38    expr -> expr GTE expr  [precedence=nonassoc, level=4]
Rule 39    expr -> expr LTE expr  [precedence=nonassoc, level=4]
Rule 40    expr -> expr LT expr  [precedence=nonassoc, level=4]
Rule 41    expr -> expr GT expr  [precedence=nonassoc, level=4]
Rule 42    expr -> expr - expr  [precedence=left, level=5]
Rule 43    expr -> expr + expr  [precedence=left, level=5]
Rule 44    expr -> expr % expr  [precedence=left, level=6]
Rule 45    expr -> expr / expr  [precedence=left, level=6]
Rule 46    expr -> expr * expr  [precedence=left, level=6]
Rule 47    expr -> factor
Rule 48    expr -> - factor  [precedence=right, level=7]
Rule 49    factor -> ( expr )
Rule 50    factor -> operand
Rule 51    operand -> NUMBER
Rule 52    operand -> ID
Rule 53    params -> params SEPARATOR param
Rule 54    params -> param
Rule 55    param -> val
Rule 56    param -> ID
Rule 57    birf_wop -> GET_CHAR
Rule 58    birf_wop -> GET_BOARD
Rule 59    birf_wop -> GET_NEXT_TETROMINO
Rule 60    birf_wop_call -> birf_wop ( )
Rule 61    birf_wp -> ADVANCE
Rule 62    birf_wp -> ROTATE_LEFT
Rule 63    birf_wp -> ROTATE_RIGHT
Rule 64    birf_wp -> MOVE_RIGHT
Rule 65    birf_wp -> MOVE_LEFT
Rule 66    birf_wp -> CHECK_CLEARED_LINE
Rule 67    pop_call -> POP ( array_val )
Rule 68    pop_call -> POP ( ID )
Rule 69    len_call -> LEN ( array_val )
Rule 70    len_call -> LEN ( ID )
Rule 71    birf_wp_call -> len_call
Rule 72    birf_wp_call -> pop_call
Rule 73    birf_wp_call -> birf_wp ( params )
Rule 74    birf -> birf_wp_call
Rule 75    birf -> birf_wop_call
Rule 76    bivf_wop -> SET_MODE
Rule 77    bivf_wop -> SET_GAME_DIFFICULTY
Rule 78    bivf_wop -> PLAY_HW
Rule 79    bivf_wop -> CLEAR_SCREEN
Rule 80    bivf_wop -> DISPLAY_BOARD
Rule 81    bivf_wop -> GET_NAME
Rule 82    bivf_wp -> PUSH
Rule 83    bivf_wp -> REM
Rule 84    bivf_wp -> ADD_SCORE
Rule 85    bivf_wp -> DISPLAY_NEXT_TETRO
Rule 86    bivf_wp -> DISPLAY_TETRO
Rule 87    bivf_wp -> DISPLAY
Rule 88    bivf_wp -> CLEAR_LINE
Rule 89    bivf_wp -> HARD_DROP
Rule 90    set_speed_call -> SET_SPEED ( HARD )
Rule 91    set_speed_call -> SET_SPEED ( MEDIUM )
Rule 92    set_speed_call -> SET_SPEED ( EASY )
Rule 93    rem_call -> REM ( ID SEPARATOR ID )
Rule 94    rem_call -> REM ( ID SEPARATOR NUMBER )
Rule 95    rem_call -> REM ( array_val SEPARATOR ID )
Rule 96    rem_call -> REM ( array_val SEPARATOR NUMBER )
Rule 97    push_call -> PUSH ( ID SEPARATOR ID )
Rule 98    push_call -> PUSH ( ID SEPARATOR val )
Rule 99    bivf_wop_call -> bivf_wop ( )
Rule 100   bivf_wp_call -> bivf_wp ( params )
Rule 101   bivf -> set_speed_call EOL
Rule 102   bivf -> rem_call EOL
Rule 103   bivf -> push_call EOL
Rule 104   bivf -> bivf_wp_call EOL
Rule 105   bivf -> bivf_wop_call EOL
Rule 106   break_stmt -> BREAK EOL
Rule 107   exit_stmt -> EXIT EOL
Rule 108   empty -> <empty>
Rule 109   if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
Rule 110   if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
Rule 111   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
Rule 112   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
Rule 113   if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
Rule 114   else_stmt -> empty
Rule 115   soft_drop -> SOFT_DROP_FLAG
Rule 116   hard_drop -> HARD_DROP_FLAG
Rule 117   arrow_right -> ARROW_RIGHT
Rule 118   arrow_left -> ARROW_LEFT
Rule 119   clockwise -> CLOCKWISE
Rule 120   anticlockwise -> ANTI_CLOCKWISE

Unused terminals:

    NORMAL
    TIMEOUT
    WHILE
    SPRINT

Terminals, with rules where they appear:

%                    : 44
(                    : 49 60 67 68 69 70 73 90 91 92 93 94 95 96 97 98 99 100 109 110 111 112 113
)                    : 49 60 67 68 69 70 73 90 91 92 93 94 95 96 97 98 99 100 109 110 111 112 113
*                    : 46
+                    : 43
-                    : 42 48
/                    : 45
ADD_SCORE            : 84
ADVANCE              : 61
AND                  : 34
ANTI_CLOCKWISE       : 120
ARRAY                : 18 23
ARROW_LEFT           : 118
ARROW_RIGHT          : 117
ASSIGN               : 15 16 17 18 19 20
BOARD                : 22
BREAK                : 106
CHECK_CLEARED_LINE   : 66
CLEAR_LINE           : 88
CLEAR_SCREEN         : 79
CLOCKWISE            : 119
DISPLAY              : 87
DISPLAY_BOARD        : 80
DISPLAY_NEXT_TETRO   : 85
DISPLAY_TETRO        : 86
EASY                 : 92
EE                   : 36
ELSE                 : 110 111 112 113
EOL                  : 14 15 16 17 18 19 20 101 102 103 104 105 106 107
EXIT                 : 107
GAME                 : 14
GET_BOARD            : 58
GET_CHAR             : 57
GET_NAME             : 81
GET_NEXT_TETROMINO   : 59
GT                   : 41
GTE                  : 38
HARD                 : 90
HARD_DROP            : 89
HARD_DROP_FLAG       : 116
ID                   : 15 16 17 18 19 20 52 56 68 70 93 93 94 95 97 97 98
IF                   : 109 110 111 112 113
IMPORT               : 14
INT_TYPE             : 25
LBLOCKPAREN          : 26 27
LCURLYPAREN          : 109 110 110 111 112 113
LEN                  : 69 70
LT                   : 40
LTE                  : 39
MEDIUM               : 91
MOVE_LEFT            : 65
MOVE_RIGHT           : 64
NE                   : 37
NORMAL               : 
NOT                  : 35
NUMBER               : 31 51 94 96
OR                   : 33
PLAY_HW              : 78
POP                  : 67 68
PUSH                 : 82 97 98
RBLOCKPAREN          : 26 27
RCURLYPAREN          : 109 110 110 111 112 113
REM                  : 83 93 94 95 96
ROTATE_LEFT          : 62
ROTATE_RIGHT         : 63
SEPARATOR            : 28 53 93 94 95 96 97 98
SET_GAME_DIFFICULTY  : 77
SET_MODE             : 76
SET_SPEED            : 90 91 92
SOFT_DROP_FLAG       : 115
SPRINT               : 
STRING_LITERAL       : 30
STRING_TYPE          : 24
TETRO                : 21
TIMEOUT              : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear:

anticlockwise        : 
array_val            : 16 18 67 69 95 96
arrow_left           : 
arrow_right          : 
birf                 : 32
birf_wop             : 60
birf_wop_call        : 75
birf_wp              : 73
birf_wp_call         : 74
bivf                 : 10
bivf_wop             : 99
bivf_wop_call        : 105
bivf_wp              : 100
bivf_wp_call         : 104
break_stmt           : 4
clockwise            : 
compound_stmt        : 1 109 110 110 111 112 113 0
data_type            : 19 20
else_stmt            : 
empty                : 114
exit_stmt            : 3
expr                 : 11 15 19 33 33 34 34 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 49 109 110 111 112 113
factor               : 47 48
hard_drop            : 
if_else_stmt         : 6 112
if_elseif_stmt       : 5 111
if_stmt              : 7 113
import_stmt          : 8
init_stmt            : 13
len_call             : 71
operand              : 50
param                : 53 54
params               : 53 73 100
pop_call             : 72
push_call            : 103
reass_stmt           : 12
rem_call             : 9 102
set                  : 26 28
set_speed_call       : 101
soft_drop            : 
statement            : 1 2
val                  : 17 20 28 29 55 98


state 0

    (0) S' -> . compound_stmt
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    compound_stmt                  shift and go to state 1
    statement                      shift and go to state 2
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    expr                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 1

    (0) S' -> compound_stmt .
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    statement                      shift and go to state 52
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    expr                           shift and go to state 11
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 2

    (2) compound_stmt -> statement .
    EXIT            reduce using rule 2 (compound_stmt -> statement .)
    BREAK           reduce using rule 2 (compound_stmt -> statement .)
    IF              reduce using rule 2 (compound_stmt -> statement .)
    IMPORT          reduce using rule 2 (compound_stmt -> statement .)
    REM             reduce using rule 2 (compound_stmt -> statement .)
    NOT             reduce using rule 2 (compound_stmt -> statement .)
    -               reduce using rule 2 (compound_stmt -> statement .)
    ID              reduce using rule 2 (compound_stmt -> statement .)
    ARRAY           reduce using rule 2 (compound_stmt -> statement .)
    SET_SPEED       reduce using rule 2 (compound_stmt -> statement .)
    PUSH            reduce using rule 2 (compound_stmt -> statement .)
    (               reduce using rule 2 (compound_stmt -> statement .)
    TETRO           reduce using rule 2 (compound_stmt -> statement .)
    BOARD           reduce using rule 2 (compound_stmt -> statement .)
    STRING_TYPE     reduce using rule 2 (compound_stmt -> statement .)
    INT_TYPE        reduce using rule 2 (compound_stmt -> statement .)
    ADD_SCORE       reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_NEXT_TETRO reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_TETRO   reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY         reduce using rule 2 (compound_stmt -> statement .)
    CLEAR_LINE      reduce using rule 2 (compound_stmt -> statement .)
    HARD_DROP       reduce using rule 2 (compound_stmt -> statement .)
    SET_MODE        reduce using rule 2 (compound_stmt -> statement .)
    SET_GAME_DIFFICULTY reduce using rule 2 (compound_stmt -> statement .)
    PLAY_HW         reduce using rule 2 (compound_stmt -> statement .)
    CLEAR_SCREEN    reduce using rule 2 (compound_stmt -> statement .)
    DISPLAY_BOARD   reduce using rule 2 (compound_stmt -> statement .)
    GET_NAME        reduce using rule 2 (compound_stmt -> statement .)
    NUMBER          reduce using rule 2 (compound_stmt -> statement .)
    $end            reduce using rule 2 (compound_stmt -> statement .)
    RCURLYPAREN     reduce using rule 2 (compound_stmt -> statement .)


state 3

    (3) statement -> exit_stmt .
    EXIT            reduce using rule 3 (statement -> exit_stmt .)
    BREAK           reduce using rule 3 (statement -> exit_stmt .)
    IF              reduce using rule 3 (statement -> exit_stmt .)
    IMPORT          reduce using rule 3 (statement -> exit_stmt .)
    REM             reduce using rule 3 (statement -> exit_stmt .)
    NOT             reduce using rule 3 (statement -> exit_stmt .)
    -               reduce using rule 3 (statement -> exit_stmt .)
    ID              reduce using rule 3 (statement -> exit_stmt .)
    ARRAY           reduce using rule 3 (statement -> exit_stmt .)
    SET_SPEED       reduce using rule 3 (statement -> exit_stmt .)
    PUSH            reduce using rule 3 (statement -> exit_stmt .)
    (               reduce using rule 3 (statement -> exit_stmt .)
    TETRO           reduce using rule 3 (statement -> exit_stmt .)
    BOARD           reduce using rule 3 (statement -> exit_stmt .)
    STRING_TYPE     reduce using rule 3 (statement -> exit_stmt .)
    INT_TYPE        reduce using rule 3 (statement -> exit_stmt .)
    ADD_SCORE       reduce using rule 3 (statement -> exit_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 3 (statement -> exit_stmt .)
    DISPLAY_TETRO   reduce using rule 3 (statement -> exit_stmt .)
    DISPLAY         reduce using rule 3 (statement -> exit_stmt .)
    CLEAR_LINE      reduce using rule 3 (statement -> exit_stmt .)
    HARD_DROP       reduce using rule 3 (statement -> exit_stmt .)
    SET_MODE        reduce using rule 3 (statement -> exit_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 3 (statement -> exit_stmt .)
    PLAY_HW         reduce using rule 3 (statement -> exit_stmt .)
    CLEAR_SCREEN    reduce using rule 3 (statement -> exit_stmt .)
    DISPLAY_BOARD   reduce using rule 3 (statement -> exit_stmt .)
    GET_NAME        reduce using rule 3 (statement -> exit_stmt .)
    NUMBER          reduce using rule 3 (statement -> exit_stmt .)
    $end            reduce using rule 3 (statement -> exit_stmt .)
    RCURLYPAREN     reduce using rule 3 (statement -> exit_stmt .)


state 4

    (4) statement -> break_stmt .
    EXIT            reduce using rule 4 (statement -> break_stmt .)
    BREAK           reduce using rule 4 (statement -> break_stmt .)
    IF              reduce using rule 4 (statement -> break_stmt .)
    IMPORT          reduce using rule 4 (statement -> break_stmt .)
    REM             reduce using rule 4 (statement -> break_stmt .)
    NOT             reduce using rule 4 (statement -> break_stmt .)
    -               reduce using rule 4 (statement -> break_stmt .)
    ID              reduce using rule 4 (statement -> break_stmt .)
    ARRAY           reduce using rule 4 (statement -> break_stmt .)
    SET_SPEED       reduce using rule 4 (statement -> break_stmt .)
    PUSH            reduce using rule 4 (statement -> break_stmt .)
    (               reduce using rule 4 (statement -> break_stmt .)
    TETRO           reduce using rule 4 (statement -> break_stmt .)
    BOARD           reduce using rule 4 (statement -> break_stmt .)
    STRING_TYPE     reduce using rule 4 (statement -> break_stmt .)
    INT_TYPE        reduce using rule 4 (statement -> break_stmt .)
    ADD_SCORE       reduce using rule 4 (statement -> break_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 4 (statement -> break_stmt .)
    DISPLAY_TETRO   reduce using rule 4 (statement -> break_stmt .)
    DISPLAY         reduce using rule 4 (statement -> break_stmt .)
    CLEAR_LINE      reduce using rule 4 (statement -> break_stmt .)
    HARD_DROP       reduce using rule 4 (statement -> break_stmt .)
    SET_MODE        reduce using rule 4 (statement -> break_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 4 (statement -> break_stmt .)
    PLAY_HW         reduce using rule 4 (statement -> break_stmt .)
    CLEAR_SCREEN    reduce using rule 4 (statement -> break_stmt .)
    DISPLAY_BOARD   reduce using rule 4 (statement -> break_stmt .)
    GET_NAME        reduce using rule 4 (statement -> break_stmt .)
    NUMBER          reduce using rule 4 (statement -> break_stmt .)
    $end            reduce using rule 4 (statement -> break_stmt .)
    RCURLYPAREN     reduce using rule 4 (statement -> break_stmt .)


state 5

    (5) statement -> if_elseif_stmt .
    EXIT            reduce using rule 5 (statement -> if_elseif_stmt .)
    BREAK           reduce using rule 5 (statement -> if_elseif_stmt .)
    IF              reduce using rule 5 (statement -> if_elseif_stmt .)
    IMPORT          reduce using rule 5 (statement -> if_elseif_stmt .)
    REM             reduce using rule 5 (statement -> if_elseif_stmt .)
    NOT             reduce using rule 5 (statement -> if_elseif_stmt .)
    -               reduce using rule 5 (statement -> if_elseif_stmt .)
    ID              reduce using rule 5 (statement -> if_elseif_stmt .)
    ARRAY           reduce using rule 5 (statement -> if_elseif_stmt .)
    SET_SPEED       reduce using rule 5 (statement -> if_elseif_stmt .)
    PUSH            reduce using rule 5 (statement -> if_elseif_stmt .)
    (               reduce using rule 5 (statement -> if_elseif_stmt .)
    TETRO           reduce using rule 5 (statement -> if_elseif_stmt .)
    BOARD           reduce using rule 5 (statement -> if_elseif_stmt .)
    STRING_TYPE     reduce using rule 5 (statement -> if_elseif_stmt .)
    INT_TYPE        reduce using rule 5 (statement -> if_elseif_stmt .)
    ADD_SCORE       reduce using rule 5 (statement -> if_elseif_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 5 (statement -> if_elseif_stmt .)
    DISPLAY_TETRO   reduce using rule 5 (statement -> if_elseif_stmt .)
    DISPLAY         reduce using rule 5 (statement -> if_elseif_stmt .)
    CLEAR_LINE      reduce using rule 5 (statement -> if_elseif_stmt .)
    HARD_DROP       reduce using rule 5 (statement -> if_elseif_stmt .)
    SET_MODE        reduce using rule 5 (statement -> if_elseif_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 5 (statement -> if_elseif_stmt .)
    PLAY_HW         reduce using rule 5 (statement -> if_elseif_stmt .)
    CLEAR_SCREEN    reduce using rule 5 (statement -> if_elseif_stmt .)
    DISPLAY_BOARD   reduce using rule 5 (statement -> if_elseif_stmt .)
    GET_NAME        reduce using rule 5 (statement -> if_elseif_stmt .)
    NUMBER          reduce using rule 5 (statement -> if_elseif_stmt .)
    $end            reduce using rule 5 (statement -> if_elseif_stmt .)
    RCURLYPAREN     reduce using rule 5 (statement -> if_elseif_stmt .)


state 6

    (6) statement -> if_else_stmt .
    EXIT            reduce using rule 6 (statement -> if_else_stmt .)
    BREAK           reduce using rule 6 (statement -> if_else_stmt .)
    IF              reduce using rule 6 (statement -> if_else_stmt .)
    IMPORT          reduce using rule 6 (statement -> if_else_stmt .)
    REM             reduce using rule 6 (statement -> if_else_stmt .)
    NOT             reduce using rule 6 (statement -> if_else_stmt .)
    -               reduce using rule 6 (statement -> if_else_stmt .)
    ID              reduce using rule 6 (statement -> if_else_stmt .)
    ARRAY           reduce using rule 6 (statement -> if_else_stmt .)
    SET_SPEED       reduce using rule 6 (statement -> if_else_stmt .)
    PUSH            reduce using rule 6 (statement -> if_else_stmt .)
    (               reduce using rule 6 (statement -> if_else_stmt .)
    TETRO           reduce using rule 6 (statement -> if_else_stmt .)
    BOARD           reduce using rule 6 (statement -> if_else_stmt .)
    STRING_TYPE     reduce using rule 6 (statement -> if_else_stmt .)
    INT_TYPE        reduce using rule 6 (statement -> if_else_stmt .)
    ADD_SCORE       reduce using rule 6 (statement -> if_else_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 6 (statement -> if_else_stmt .)
    DISPLAY_TETRO   reduce using rule 6 (statement -> if_else_stmt .)
    DISPLAY         reduce using rule 6 (statement -> if_else_stmt .)
    CLEAR_LINE      reduce using rule 6 (statement -> if_else_stmt .)
    HARD_DROP       reduce using rule 6 (statement -> if_else_stmt .)
    SET_MODE        reduce using rule 6 (statement -> if_else_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 6 (statement -> if_else_stmt .)
    PLAY_HW         reduce using rule 6 (statement -> if_else_stmt .)
    CLEAR_SCREEN    reduce using rule 6 (statement -> if_else_stmt .)
    DISPLAY_BOARD   reduce using rule 6 (statement -> if_else_stmt .)
    GET_NAME        reduce using rule 6 (statement -> if_else_stmt .)
    NUMBER          reduce using rule 6 (statement -> if_else_stmt .)
    $end            reduce using rule 6 (statement -> if_else_stmt .)
    RCURLYPAREN     reduce using rule 6 (statement -> if_else_stmt .)


state 7

    (7) statement -> if_stmt .
    EXIT            reduce using rule 7 (statement -> if_stmt .)
    BREAK           reduce using rule 7 (statement -> if_stmt .)
    IF              reduce using rule 7 (statement -> if_stmt .)
    IMPORT          reduce using rule 7 (statement -> if_stmt .)
    REM             reduce using rule 7 (statement -> if_stmt .)
    NOT             reduce using rule 7 (statement -> if_stmt .)
    -               reduce using rule 7 (statement -> if_stmt .)
    ID              reduce using rule 7 (statement -> if_stmt .)
    ARRAY           reduce using rule 7 (statement -> if_stmt .)
    SET_SPEED       reduce using rule 7 (statement -> if_stmt .)
    PUSH            reduce using rule 7 (statement -> if_stmt .)
    (               reduce using rule 7 (statement -> if_stmt .)
    TETRO           reduce using rule 7 (statement -> if_stmt .)
    BOARD           reduce using rule 7 (statement -> if_stmt .)
    STRING_TYPE     reduce using rule 7 (statement -> if_stmt .)
    INT_TYPE        reduce using rule 7 (statement -> if_stmt .)
    ADD_SCORE       reduce using rule 7 (statement -> if_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 7 (statement -> if_stmt .)
    DISPLAY_TETRO   reduce using rule 7 (statement -> if_stmt .)
    DISPLAY         reduce using rule 7 (statement -> if_stmt .)
    CLEAR_LINE      reduce using rule 7 (statement -> if_stmt .)
    HARD_DROP       reduce using rule 7 (statement -> if_stmt .)
    SET_MODE        reduce using rule 7 (statement -> if_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 7 (statement -> if_stmt .)
    PLAY_HW         reduce using rule 7 (statement -> if_stmt .)
    CLEAR_SCREEN    reduce using rule 7 (statement -> if_stmt .)
    DISPLAY_BOARD   reduce using rule 7 (statement -> if_stmt .)
    GET_NAME        reduce using rule 7 (statement -> if_stmt .)
    NUMBER          reduce using rule 7 (statement -> if_stmt .)
    $end            reduce using rule 7 (statement -> if_stmt .)
    RCURLYPAREN     reduce using rule 7 (statement -> if_stmt .)


state 8

    (8) statement -> import_stmt .
    EXIT            reduce using rule 8 (statement -> import_stmt .)
    BREAK           reduce using rule 8 (statement -> import_stmt .)
    IF              reduce using rule 8 (statement -> import_stmt .)
    IMPORT          reduce using rule 8 (statement -> import_stmt .)
    REM             reduce using rule 8 (statement -> import_stmt .)
    NOT             reduce using rule 8 (statement -> import_stmt .)
    -               reduce using rule 8 (statement -> import_stmt .)
    ID              reduce using rule 8 (statement -> import_stmt .)
    ARRAY           reduce using rule 8 (statement -> import_stmt .)
    SET_SPEED       reduce using rule 8 (statement -> import_stmt .)
    PUSH            reduce using rule 8 (statement -> import_stmt .)
    (               reduce using rule 8 (statement -> import_stmt .)
    TETRO           reduce using rule 8 (statement -> import_stmt .)
    BOARD           reduce using rule 8 (statement -> import_stmt .)
    STRING_TYPE     reduce using rule 8 (statement -> import_stmt .)
    INT_TYPE        reduce using rule 8 (statement -> import_stmt .)
    ADD_SCORE       reduce using rule 8 (statement -> import_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 8 (statement -> import_stmt .)
    DISPLAY_TETRO   reduce using rule 8 (statement -> import_stmt .)
    DISPLAY         reduce using rule 8 (statement -> import_stmt .)
    CLEAR_LINE      reduce using rule 8 (statement -> import_stmt .)
    HARD_DROP       reduce using rule 8 (statement -> import_stmt .)
    SET_MODE        reduce using rule 8 (statement -> import_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 8 (statement -> import_stmt .)
    PLAY_HW         reduce using rule 8 (statement -> import_stmt .)
    CLEAR_SCREEN    reduce using rule 8 (statement -> import_stmt .)
    DISPLAY_BOARD   reduce using rule 8 (statement -> import_stmt .)
    GET_NAME        reduce using rule 8 (statement -> import_stmt .)
    NUMBER          reduce using rule 8 (statement -> import_stmt .)
    $end            reduce using rule 8 (statement -> import_stmt .)
    RCURLYPAREN     reduce using rule 8 (statement -> import_stmt .)


state 9

    (9) statement -> rem_call .
    (102) bivf -> rem_call . EOL
    EXIT            reduce using rule 9 (statement -> rem_call .)
    BREAK           reduce using rule 9 (statement -> rem_call .)
    IF              reduce using rule 9 (statement -> rem_call .)
    IMPORT          reduce using rule 9 (statement -> rem_call .)
    REM             reduce using rule 9 (statement -> rem_call .)
    NOT             reduce using rule 9 (statement -> rem_call .)
    -               reduce using rule 9 (statement -> rem_call .)
    ID              reduce using rule 9 (statement -> rem_call .)
    ARRAY           reduce using rule 9 (statement -> rem_call .)
    SET_SPEED       reduce using rule 9 (statement -> rem_call .)
    PUSH            reduce using rule 9 (statement -> rem_call .)
    (               reduce using rule 9 (statement -> rem_call .)
    TETRO           reduce using rule 9 (statement -> rem_call .)
    BOARD           reduce using rule 9 (statement -> rem_call .)
    STRING_TYPE     reduce using rule 9 (statement -> rem_call .)
    INT_TYPE        reduce using rule 9 (statement -> rem_call .)
    ADD_SCORE       reduce using rule 9 (statement -> rem_call .)
    DISPLAY_NEXT_TETRO reduce using rule 9 (statement -> rem_call .)
    DISPLAY_TETRO   reduce using rule 9 (statement -> rem_call .)
    DISPLAY         reduce using rule 9 (statement -> rem_call .)
    CLEAR_LINE      reduce using rule 9 (statement -> rem_call .)
    HARD_DROP       reduce using rule 9 (statement -> rem_call .)
    SET_MODE        reduce using rule 9 (statement -> rem_call .)
    SET_GAME_DIFFICULTY reduce using rule 9 (statement -> rem_call .)
    PLAY_HW         reduce using rule 9 (statement -> rem_call .)
    CLEAR_SCREEN    reduce using rule 9 (statement -> rem_call .)
    DISPLAY_BOARD   reduce using rule 9 (statement -> rem_call .)
    GET_NAME        reduce using rule 9 (statement -> rem_call .)
    NUMBER          reduce using rule 9 (statement -> rem_call .)
    $end            reduce using rule 9 (statement -> rem_call .)
    RCURLYPAREN     reduce using rule 9 (statement -> rem_call .)
    EOL             shift and go to state 53


state 10

    (10) statement -> bivf .
    EXIT            reduce using rule 10 (statement -> bivf .)
    BREAK           reduce using rule 10 (statement -> bivf .)
    IF              reduce using rule 10 (statement -> bivf .)
    IMPORT          reduce using rule 10 (statement -> bivf .)
    REM             reduce using rule 10 (statement -> bivf .)
    NOT             reduce using rule 10 (statement -> bivf .)
    -               reduce using rule 10 (statement -> bivf .)
    ID              reduce using rule 10 (statement -> bivf .)
    ARRAY           reduce using rule 10 (statement -> bivf .)
    SET_SPEED       reduce using rule 10 (statement -> bivf .)
    PUSH            reduce using rule 10 (statement -> bivf .)
    (               reduce using rule 10 (statement -> bivf .)
    TETRO           reduce using rule 10 (statement -> bivf .)
    BOARD           reduce using rule 10 (statement -> bivf .)
    STRING_TYPE     reduce using rule 10 (statement -> bivf .)
    INT_TYPE        reduce using rule 10 (statement -> bivf .)
    ADD_SCORE       reduce using rule 10 (statement -> bivf .)
    DISPLAY_NEXT_TETRO reduce using rule 10 (statement -> bivf .)
    DISPLAY_TETRO   reduce using rule 10 (statement -> bivf .)
    DISPLAY         reduce using rule 10 (statement -> bivf .)
    CLEAR_LINE      reduce using rule 10 (statement -> bivf .)
    HARD_DROP       reduce using rule 10 (statement -> bivf .)
    SET_MODE        reduce using rule 10 (statement -> bivf .)
    SET_GAME_DIFFICULTY reduce using rule 10 (statement -> bivf .)
    PLAY_HW         reduce using rule 10 (statement -> bivf .)
    CLEAR_SCREEN    reduce using rule 10 (statement -> bivf .)
    DISPLAY_BOARD   reduce using rule 10 (statement -> bivf .)
    GET_NAME        reduce using rule 10 (statement -> bivf .)
    NUMBER          reduce using rule 10 (statement -> bivf .)
    $end            reduce using rule 10 (statement -> bivf .)
    RCURLYPAREN     reduce using rule 10 (statement -> bivf .)


state 11

    (11) statement -> expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
  ! shift/reduce conflict for - resolved as shift
    EXIT            reduce using rule 11 (statement -> expr .)
    BREAK           reduce using rule 11 (statement -> expr .)
    IF              reduce using rule 11 (statement -> expr .)
    IMPORT          reduce using rule 11 (statement -> expr .)
    REM             reduce using rule 11 (statement -> expr .)
    NOT             reduce using rule 11 (statement -> expr .)
    ID              reduce using rule 11 (statement -> expr .)
    ARRAY           reduce using rule 11 (statement -> expr .)
    SET_SPEED       reduce using rule 11 (statement -> expr .)
    PUSH            reduce using rule 11 (statement -> expr .)
    (               reduce using rule 11 (statement -> expr .)
    TETRO           reduce using rule 11 (statement -> expr .)
    BOARD           reduce using rule 11 (statement -> expr .)
    STRING_TYPE     reduce using rule 11 (statement -> expr .)
    INT_TYPE        reduce using rule 11 (statement -> expr .)
    ADD_SCORE       reduce using rule 11 (statement -> expr .)
    DISPLAY_NEXT_TETRO reduce using rule 11 (statement -> expr .)
    DISPLAY_TETRO   reduce using rule 11 (statement -> expr .)
    DISPLAY         reduce using rule 11 (statement -> expr .)
    CLEAR_LINE      reduce using rule 11 (statement -> expr .)
    HARD_DROP       reduce using rule 11 (statement -> expr .)
    SET_MODE        reduce using rule 11 (statement -> expr .)
    SET_GAME_DIFFICULTY reduce using rule 11 (statement -> expr .)
    PLAY_HW         reduce using rule 11 (statement -> expr .)
    CLEAR_SCREEN    reduce using rule 11 (statement -> expr .)
    DISPLAY_BOARD   reduce using rule 11 (statement -> expr .)
    GET_NAME        reduce using rule 11 (statement -> expr .)
    NUMBER          reduce using rule 11 (statement -> expr .)
    $end            reduce using rule 11 (statement -> expr .)
    RCURLYPAREN     reduce using rule 11 (statement -> expr .)
    OR              shift and go to state 54
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 12

    (12) statement -> reass_stmt .
    EXIT            reduce using rule 12 (statement -> reass_stmt .)
    BREAK           reduce using rule 12 (statement -> reass_stmt .)
    IF              reduce using rule 12 (statement -> reass_stmt .)
    IMPORT          reduce using rule 12 (statement -> reass_stmt .)
    REM             reduce using rule 12 (statement -> reass_stmt .)
    NOT             reduce using rule 12 (statement -> reass_stmt .)
    -               reduce using rule 12 (statement -> reass_stmt .)
    ID              reduce using rule 12 (statement -> reass_stmt .)
    ARRAY           reduce using rule 12 (statement -> reass_stmt .)
    SET_SPEED       reduce using rule 12 (statement -> reass_stmt .)
    PUSH            reduce using rule 12 (statement -> reass_stmt .)
    (               reduce using rule 12 (statement -> reass_stmt .)
    TETRO           reduce using rule 12 (statement -> reass_stmt .)
    BOARD           reduce using rule 12 (statement -> reass_stmt .)
    STRING_TYPE     reduce using rule 12 (statement -> reass_stmt .)
    INT_TYPE        reduce using rule 12 (statement -> reass_stmt .)
    ADD_SCORE       reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_TETRO   reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY         reduce using rule 12 (statement -> reass_stmt .)
    CLEAR_LINE      reduce using rule 12 (statement -> reass_stmt .)
    HARD_DROP       reduce using rule 12 (statement -> reass_stmt .)
    SET_MODE        reduce using rule 12 (statement -> reass_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 12 (statement -> reass_stmt .)
    PLAY_HW         reduce using rule 12 (statement -> reass_stmt .)
    CLEAR_SCREEN    reduce using rule 12 (statement -> reass_stmt .)
    DISPLAY_BOARD   reduce using rule 12 (statement -> reass_stmt .)
    GET_NAME        reduce using rule 12 (statement -> reass_stmt .)
    NUMBER          reduce using rule 12 (statement -> reass_stmt .)
    $end            reduce using rule 12 (statement -> reass_stmt .)
    RCURLYPAREN     reduce using rule 12 (statement -> reass_stmt .)


state 13

    (13) statement -> init_stmt .
    EXIT            reduce using rule 13 (statement -> init_stmt .)
    BREAK           reduce using rule 13 (statement -> init_stmt .)
    IF              reduce using rule 13 (statement -> init_stmt .)
    IMPORT          reduce using rule 13 (statement -> init_stmt .)
    REM             reduce using rule 13 (statement -> init_stmt .)
    NOT             reduce using rule 13 (statement -> init_stmt .)
    -               reduce using rule 13 (statement -> init_stmt .)
    ID              reduce using rule 13 (statement -> init_stmt .)
    ARRAY           reduce using rule 13 (statement -> init_stmt .)
    SET_SPEED       reduce using rule 13 (statement -> init_stmt .)
    PUSH            reduce using rule 13 (statement -> init_stmt .)
    (               reduce using rule 13 (statement -> init_stmt .)
    TETRO           reduce using rule 13 (statement -> init_stmt .)
    BOARD           reduce using rule 13 (statement -> init_stmt .)
    STRING_TYPE     reduce using rule 13 (statement -> init_stmt .)
    INT_TYPE        reduce using rule 13 (statement -> init_stmt .)
    ADD_SCORE       reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_TETRO   reduce using rule 13 (statement -> init_stmt .)
    DISPLAY         reduce using rule 13 (statement -> init_stmt .)
    CLEAR_LINE      reduce using rule 13 (statement -> init_stmt .)
    HARD_DROP       reduce using rule 13 (statement -> init_stmt .)
    SET_MODE        reduce using rule 13 (statement -> init_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 13 (statement -> init_stmt .)
    PLAY_HW         reduce using rule 13 (statement -> init_stmt .)
    CLEAR_SCREEN    reduce using rule 13 (statement -> init_stmt .)
    DISPLAY_BOARD   reduce using rule 13 (statement -> init_stmt .)
    GET_NAME        reduce using rule 13 (statement -> init_stmt .)
    NUMBER          reduce using rule 13 (statement -> init_stmt .)
    $end            reduce using rule 13 (statement -> init_stmt .)
    RCURLYPAREN     reduce using rule 13 (statement -> init_stmt .)


state 14

    (107) exit_stmt -> EXIT . EOL
    EOL             shift and go to state 67


state 15

    (106) break_stmt -> BREAK . EOL
    EOL             shift and go to state 68


state 16

    (111) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF . ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (               shift and go to state 69


state 17

    (49) factor -> ( . expr )
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 70
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 18

    (14) import_stmt -> IMPORT . GAME EOL
    GAME            shift and go to state 72


state 19

    (93) rem_call -> REM . ( ID SEPARATOR ID )
    (94) rem_call -> REM . ( ID SEPARATOR NUMBER )
    (95) rem_call -> REM . ( array_val SEPARATOR ID )
    (96) rem_call -> REM . ( array_val SEPARATOR NUMBER )
    (83) bivf_wp -> REM .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 73


state 20

    (15) reass_stmt -> ID . ASSIGN expr EOL
    (16) reass_stmt -> ID . ASSIGN array_val EOL
    (17) reass_stmt -> ID . ASSIGN val EOL
    (52) operand -> ID .
    ASSIGN          shift and go to state 74
    OR              reduce using rule 52 (operand -> ID .)
    AND             reduce using rule 52 (operand -> ID .)
    EE              reduce using rule 52 (operand -> ID .)
    NE              reduce using rule 52 (operand -> ID .)
    GTE             reduce using rule 52 (operand -> ID .)
    LTE             reduce using rule 52 (operand -> ID .)
    LT              reduce using rule 52 (operand -> ID .)
    GT              reduce using rule 52 (operand -> ID .)
    -               reduce using rule 52 (operand -> ID .)
    +               reduce using rule 52 (operand -> ID .)
    %               reduce using rule 52 (operand -> ID .)
    /               reduce using rule 52 (operand -> ID .)
    *               reduce using rule 52 (operand -> ID .)
    EXIT            reduce using rule 52 (operand -> ID .)
    BREAK           reduce using rule 52 (operand -> ID .)
    IF              reduce using rule 52 (operand -> ID .)
    IMPORT          reduce using rule 52 (operand -> ID .)
    REM             reduce using rule 52 (operand -> ID .)
    NOT             reduce using rule 52 (operand -> ID .)
    ID              reduce using rule 52 (operand -> ID .)
    ARRAY           reduce using rule 52 (operand -> ID .)
    SET_SPEED       reduce using rule 52 (operand -> ID .)
    PUSH            reduce using rule 52 (operand -> ID .)
    (               reduce using rule 52 (operand -> ID .)
    TETRO           reduce using rule 52 (operand -> ID .)
    BOARD           reduce using rule 52 (operand -> ID .)
    STRING_TYPE     reduce using rule 52 (operand -> ID .)
    INT_TYPE        reduce using rule 52 (operand -> ID .)
    ADD_SCORE       reduce using rule 52 (operand -> ID .)
    DISPLAY_NEXT_TETRO reduce using rule 52 (operand -> ID .)
    DISPLAY_TETRO   reduce using rule 52 (operand -> ID .)
    DISPLAY         reduce using rule 52 (operand -> ID .)
    CLEAR_LINE      reduce using rule 52 (operand -> ID .)
    HARD_DROP       reduce using rule 52 (operand -> ID .)
    SET_MODE        reduce using rule 52 (operand -> ID .)
    SET_GAME_DIFFICULTY reduce using rule 52 (operand -> ID .)
    PLAY_HW         reduce using rule 52 (operand -> ID .)
    CLEAR_SCREEN    reduce using rule 52 (operand -> ID .)
    DISPLAY_BOARD   reduce using rule 52 (operand -> ID .)
    GET_NAME        reduce using rule 52 (operand -> ID .)
    NUMBER          reduce using rule 52 (operand -> ID .)
    $end            reduce using rule 52 (operand -> ID .)
    RCURLYPAREN     reduce using rule 52 (operand -> ID .)


state 21

    (51) operand -> NUMBER .
    OR              reduce using rule 51 (operand -> NUMBER .)
    AND             reduce using rule 51 (operand -> NUMBER .)
    EE              reduce using rule 51 (operand -> NUMBER .)
    NE              reduce using rule 51 (operand -> NUMBER .)
    GTE             reduce using rule 51 (operand -> NUMBER .)
    LTE             reduce using rule 51 (operand -> NUMBER .)
    LT              reduce using rule 51 (operand -> NUMBER .)
    GT              reduce using rule 51 (operand -> NUMBER .)
    -               reduce using rule 51 (operand -> NUMBER .)
    +               reduce using rule 51 (operand -> NUMBER .)
    %               reduce using rule 51 (operand -> NUMBER .)
    /               reduce using rule 51 (operand -> NUMBER .)
    *               reduce using rule 51 (operand -> NUMBER .)
    EXIT            reduce using rule 51 (operand -> NUMBER .)
    BREAK           reduce using rule 51 (operand -> NUMBER .)
    IF              reduce using rule 51 (operand -> NUMBER .)
    IMPORT          reduce using rule 51 (operand -> NUMBER .)
    REM             reduce using rule 51 (operand -> NUMBER .)
    NOT             reduce using rule 51 (operand -> NUMBER .)
    ID              reduce using rule 51 (operand -> NUMBER .)
    ARRAY           reduce using rule 51 (operand -> NUMBER .)
    SET_SPEED       reduce using rule 51 (operand -> NUMBER .)
    PUSH            reduce using rule 51 (operand -> NUMBER .)
    (               reduce using rule 51 (operand -> NUMBER .)
    TETRO           reduce using rule 51 (operand -> NUMBER .)
    BOARD           reduce using rule 51 (operand -> NUMBER .)
    STRING_TYPE     reduce using rule 51 (operand -> NUMBER .)
    INT_TYPE        reduce using rule 51 (operand -> NUMBER .)
    ADD_SCORE       reduce using rule 51 (operand -> NUMBER .)
    DISPLAY_NEXT_TETRO reduce using rule 51 (operand -> NUMBER .)
    DISPLAY_TETRO   reduce using rule 51 (operand -> NUMBER .)
    DISPLAY         reduce using rule 51 (operand -> NUMBER .)
    CLEAR_LINE      reduce using rule 51 (operand -> NUMBER .)
    HARD_DROP       reduce using rule 51 (operand -> NUMBER .)
    SET_MODE        reduce using rule 51 (operand -> NUMBER .)
    SET_GAME_DIFFICULTY reduce using rule 51 (operand -> NUMBER .)
    PLAY_HW         reduce using rule 51 (operand -> NUMBER .)
    CLEAR_SCREEN    reduce using rule 51 (operand -> NUMBER .)
    DISPLAY_BOARD   reduce using rule 51 (operand -> NUMBER .)
    GET_NAME        reduce using rule 51 (operand -> NUMBER .)
    NUMBER          reduce using rule 51 (operand -> NUMBER .)
    $end            reduce using rule 51 (operand -> NUMBER .)
    )               reduce using rule 51 (operand -> NUMBER .)
    EOL             reduce using rule 51 (operand -> NUMBER .)
    RCURLYPAREN     reduce using rule 51 (operand -> NUMBER .)


state 22

    (101) bivf -> set_speed_call . EOL
    EOL             shift and go to state 75


state 23

    (103) bivf -> push_call . EOL
    EOL             shift and go to state 76


state 24

    (104) bivf -> bivf_wp_call . EOL
    EOL             shift and go to state 77


state 25

    (105) bivf -> bivf_wop_call . EOL
    EOL             shift and go to state 78


state 26

    (35) expr -> NOT . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 79
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 27

    (48) expr -> - . factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    factor                         shift and go to state 80
    operand                        shift and go to state 35

state 28

    (47) expr -> factor .
    OR              reduce using rule 47 (expr -> factor .)
    AND             reduce using rule 47 (expr -> factor .)
    EE              reduce using rule 47 (expr -> factor .)
    NE              reduce using rule 47 (expr -> factor .)
    GTE             reduce using rule 47 (expr -> factor .)
    LTE             reduce using rule 47 (expr -> factor .)
    LT              reduce using rule 47 (expr -> factor .)
    GT              reduce using rule 47 (expr -> factor .)
    -               reduce using rule 47 (expr -> factor .)
    +               reduce using rule 47 (expr -> factor .)
    %               reduce using rule 47 (expr -> factor .)
    /               reduce using rule 47 (expr -> factor .)
    *               reduce using rule 47 (expr -> factor .)
    EXIT            reduce using rule 47 (expr -> factor .)
    BREAK           reduce using rule 47 (expr -> factor .)
    IF              reduce using rule 47 (expr -> factor .)
    IMPORT          reduce using rule 47 (expr -> factor .)
    REM             reduce using rule 47 (expr -> factor .)
    NOT             reduce using rule 47 (expr -> factor .)
    ID              reduce using rule 47 (expr -> factor .)
    ARRAY           reduce using rule 47 (expr -> factor .)
    SET_SPEED       reduce using rule 47 (expr -> factor .)
    PUSH            reduce using rule 47 (expr -> factor .)
    (               reduce using rule 47 (expr -> factor .)
    TETRO           reduce using rule 47 (expr -> factor .)
    BOARD           reduce using rule 47 (expr -> factor .)
    STRING_TYPE     reduce using rule 47 (expr -> factor .)
    INT_TYPE        reduce using rule 47 (expr -> factor .)
    ADD_SCORE       reduce using rule 47 (expr -> factor .)
    DISPLAY_NEXT_TETRO reduce using rule 47 (expr -> factor .)
    DISPLAY_TETRO   reduce using rule 47 (expr -> factor .)
    DISPLAY         reduce using rule 47 (expr -> factor .)
    CLEAR_LINE      reduce using rule 47 (expr -> factor .)
    HARD_DROP       reduce using rule 47 (expr -> factor .)
    SET_MODE        reduce using rule 47 (expr -> factor .)
    SET_GAME_DIFFICULTY reduce using rule 47 (expr -> factor .)
    PLAY_HW         reduce using rule 47 (expr -> factor .)
    CLEAR_SCREEN    reduce using rule 47 (expr -> factor .)
    DISPLAY_BOARD   reduce using rule 47 (expr -> factor .)
    GET_NAME        reduce using rule 47 (expr -> factor .)
    NUMBER          reduce using rule 47 (expr -> factor .)
    $end            reduce using rule 47 (expr -> factor .)
    )               reduce using rule 47 (expr -> factor .)
    EOL             reduce using rule 47 (expr -> factor .)
    RCURLYPAREN     reduce using rule 47 (expr -> factor .)


state 29

    (18) init_stmt -> ARRAY . ID ASSIGN array_val EOL
    (23) data_type -> ARRAY .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 81


state 30

    (19) init_stmt -> data_type . ID ASSIGN expr EOL
    (20) init_stmt -> data_type . ID ASSIGN val EOL
    ID              shift and go to state 82


state 31

    (90) set_speed_call -> SET_SPEED . ( HARD )
    (91) set_speed_call -> SET_SPEED . ( MEDIUM )
    (92) set_speed_call -> SET_SPEED . ( EASY )
    (               shift and go to state 83


state 32

    (97) push_call -> PUSH . ( ID SEPARATOR ID )
    (98) push_call -> PUSH . ( ID SEPARATOR val )
    (82) bivf_wp -> PUSH .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 84


state 33

    (100) bivf_wp_call -> bivf_wp . ( params )
    (               shift and go to state 85


state 34

    (99) bivf_wop_call -> bivf_wop . ( )
    (               shift and go to state 86


state 35

    (50) factor -> operand .
    OR              reduce using rule 50 (factor -> operand .)
    AND             reduce using rule 50 (factor -> operand .)
    EE              reduce using rule 50 (factor -> operand .)
    NE              reduce using rule 50 (factor -> operand .)
    GTE             reduce using rule 50 (factor -> operand .)
    LTE             reduce using rule 50 (factor -> operand .)
    LT              reduce using rule 50 (factor -> operand .)
    GT              reduce using rule 50 (factor -> operand .)
    -               reduce using rule 50 (factor -> operand .)
    +               reduce using rule 50 (factor -> operand .)
    %               reduce using rule 50 (factor -> operand .)
    /               reduce using rule 50 (factor -> operand .)
    *               reduce using rule 50 (factor -> operand .)
    EXIT            reduce using rule 50 (factor -> operand .)
    BREAK           reduce using rule 50 (factor -> operand .)
    IF              reduce using rule 50 (factor -> operand .)
    IMPORT          reduce using rule 50 (factor -> operand .)
    REM             reduce using rule 50 (factor -> operand .)
    NOT             reduce using rule 50 (factor -> operand .)
    ID              reduce using rule 50 (factor -> operand .)
    ARRAY           reduce using rule 50 (factor -> operand .)
    SET_SPEED       reduce using rule 50 (factor -> operand .)
    PUSH            reduce using rule 50 (factor -> operand .)
    (               reduce using rule 50 (factor -> operand .)
    TETRO           reduce using rule 50 (factor -> operand .)
    BOARD           reduce using rule 50 (factor -> operand .)
    STRING_TYPE     reduce using rule 50 (factor -> operand .)
    INT_TYPE        reduce using rule 50 (factor -> operand .)
    ADD_SCORE       reduce using rule 50 (factor -> operand .)
    DISPLAY_NEXT_TETRO reduce using rule 50 (factor -> operand .)
    DISPLAY_TETRO   reduce using rule 50 (factor -> operand .)
    DISPLAY         reduce using rule 50 (factor -> operand .)
    CLEAR_LINE      reduce using rule 50 (factor -> operand .)
    HARD_DROP       reduce using rule 50 (factor -> operand .)
    SET_MODE        reduce using rule 50 (factor -> operand .)
    SET_GAME_DIFFICULTY reduce using rule 50 (factor -> operand .)
    PLAY_HW         reduce using rule 50 (factor -> operand .)
    CLEAR_SCREEN    reduce using rule 50 (factor -> operand .)
    DISPLAY_BOARD   reduce using rule 50 (factor -> operand .)
    GET_NAME        reduce using rule 50 (factor -> operand .)
    NUMBER          reduce using rule 50 (factor -> operand .)
    $end            reduce using rule 50 (factor -> operand .)
    )               reduce using rule 50 (factor -> operand .)
    EOL             reduce using rule 50 (factor -> operand .)
    RCURLYPAREN     reduce using rule 50 (factor -> operand .)


state 36

    (21) data_type -> TETRO .
    ID              reduce using rule 21 (data_type -> TETRO .)


state 37

    (22) data_type -> BOARD .
    ID              reduce using rule 22 (data_type -> BOARD .)


state 38

    (24) data_type -> STRING_TYPE .
    ID              reduce using rule 24 (data_type -> STRING_TYPE .)


state 39

    (25) data_type -> INT_TYPE .
    ID              reduce using rule 25 (data_type -> INT_TYPE .)


state 40

    (84) bivf_wp -> ADD_SCORE .
    (               reduce using rule 84 (bivf_wp -> ADD_SCORE .)


state 41

    (85) bivf_wp -> DISPLAY_NEXT_TETRO .
    (               reduce using rule 85 (bivf_wp -> DISPLAY_NEXT_TETRO .)


state 42

    (86) bivf_wp -> DISPLAY_TETRO .
    (               reduce using rule 86 (bivf_wp -> DISPLAY_TETRO .)


state 43

    (87) bivf_wp -> DISPLAY .
    (               reduce using rule 87 (bivf_wp -> DISPLAY .)


state 44

    (88) bivf_wp -> CLEAR_LINE .
    (               reduce using rule 88 (bivf_wp -> CLEAR_LINE .)


state 45

    (89) bivf_wp -> HARD_DROP .
    (               reduce using rule 89 (bivf_wp -> HARD_DROP .)


state 46

    (76) bivf_wop -> SET_MODE .
    (               reduce using rule 76 (bivf_wop -> SET_MODE .)


state 47

    (77) bivf_wop -> SET_GAME_DIFFICULTY .
    (               reduce using rule 77 (bivf_wop -> SET_GAME_DIFFICULTY .)


state 48

    (78) bivf_wop -> PLAY_HW .
    (               reduce using rule 78 (bivf_wop -> PLAY_HW .)


state 49

    (79) bivf_wop -> CLEAR_SCREEN .
    (               reduce using rule 79 (bivf_wop -> CLEAR_SCREEN .)


state 50

    (80) bivf_wop -> DISPLAY_BOARD .
    (               reduce using rule 80 (bivf_wop -> DISPLAY_BOARD .)


state 51

    (81) bivf_wop -> GET_NAME .
    (               reduce using rule 81 (bivf_wop -> GET_NAME .)


state 52

    (1) compound_stmt -> compound_stmt statement .
    EXIT            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    BREAK           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    IF              reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    IMPORT          reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    REM             reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    NOT             reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    -               reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ID              reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ARRAY           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_SPEED       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    PUSH            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    (               reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    TETRO           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    BOARD           reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    STRING_TYPE     reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    INT_TYPE        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    ADD_SCORE       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_NEXT_TETRO reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_TETRO   reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY         reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    CLEAR_LINE      reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    HARD_DROP       reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_MODE        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    SET_GAME_DIFFICULTY reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    PLAY_HW         reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    CLEAR_SCREEN    reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    DISPLAY_BOARD   reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    GET_NAME        reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    NUMBER          reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    $end            reduce using rule 1 (compound_stmt -> compound_stmt statement .)
    RCURLYPAREN     reduce using rule 1 (compound_stmt -> compound_stmt statement .)


state 53

    (102) bivf -> rem_call EOL .
    EXIT            reduce using rule 102 (bivf -> rem_call EOL .)
    BREAK           reduce using rule 102 (bivf -> rem_call EOL .)
    IF              reduce using rule 102 (bivf -> rem_call EOL .)
    IMPORT          reduce using rule 102 (bivf -> rem_call EOL .)
    REM             reduce using rule 102 (bivf -> rem_call EOL .)
    NOT             reduce using rule 102 (bivf -> rem_call EOL .)
    -               reduce using rule 102 (bivf -> rem_call EOL .)
    ID              reduce using rule 102 (bivf -> rem_call EOL .)
    ARRAY           reduce using rule 102 (bivf -> rem_call EOL .)
    SET_SPEED       reduce using rule 102 (bivf -> rem_call EOL .)
    PUSH            reduce using rule 102 (bivf -> rem_call EOL .)
    (               reduce using rule 102 (bivf -> rem_call EOL .)
    TETRO           reduce using rule 102 (bivf -> rem_call EOL .)
    BOARD           reduce using rule 102 (bivf -> rem_call EOL .)
    STRING_TYPE     reduce using rule 102 (bivf -> rem_call EOL .)
    INT_TYPE        reduce using rule 102 (bivf -> rem_call EOL .)
    ADD_SCORE       reduce using rule 102 (bivf -> rem_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 102 (bivf -> rem_call EOL .)
    DISPLAY_TETRO   reduce using rule 102 (bivf -> rem_call EOL .)
    DISPLAY         reduce using rule 102 (bivf -> rem_call EOL .)
    CLEAR_LINE      reduce using rule 102 (bivf -> rem_call EOL .)
    HARD_DROP       reduce using rule 102 (bivf -> rem_call EOL .)
    SET_MODE        reduce using rule 102 (bivf -> rem_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 102 (bivf -> rem_call EOL .)
    PLAY_HW         reduce using rule 102 (bivf -> rem_call EOL .)
    CLEAR_SCREEN    reduce using rule 102 (bivf -> rem_call EOL .)
    DISPLAY_BOARD   reduce using rule 102 (bivf -> rem_call EOL .)
    GET_NAME        reduce using rule 102 (bivf -> rem_call EOL .)
    NUMBER          reduce using rule 102 (bivf -> rem_call EOL .)
    $end            reduce using rule 102 (bivf -> rem_call EOL .)
    RCURLYPAREN     reduce using rule 102 (bivf -> rem_call EOL .)


state 54

    (33) expr -> expr OR . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 87
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 55

    (34) expr -> expr AND . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 88
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 56

    (36) expr -> expr EE . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 89
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 57

    (37) expr -> expr NE . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 90
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 58

    (38) expr -> expr GTE . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 91
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 59

    (39) expr -> expr LTE . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 92
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 60

    (40) expr -> expr LT . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 93
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 61

    (41) expr -> expr GT . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 94
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 62

    (42) expr -> expr - . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 95
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 63

    (43) expr -> expr + . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 96
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 64

    (44) expr -> expr % . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 97
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 65

    (45) expr -> expr / . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 98
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 66

    (46) expr -> expr * . expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 99
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 67

    (107) exit_stmt -> EXIT EOL .
    EXIT            reduce using rule 107 (exit_stmt -> EXIT EOL .)
    BREAK           reduce using rule 107 (exit_stmt -> EXIT EOL .)
    IF              reduce using rule 107 (exit_stmt -> EXIT EOL .)
    IMPORT          reduce using rule 107 (exit_stmt -> EXIT EOL .)
    REM             reduce using rule 107 (exit_stmt -> EXIT EOL .)
    NOT             reduce using rule 107 (exit_stmt -> EXIT EOL .)
    -               reduce using rule 107 (exit_stmt -> EXIT EOL .)
    ID              reduce using rule 107 (exit_stmt -> EXIT EOL .)
    ARRAY           reduce using rule 107 (exit_stmt -> EXIT EOL .)
    SET_SPEED       reduce using rule 107 (exit_stmt -> EXIT EOL .)
    PUSH            reduce using rule 107 (exit_stmt -> EXIT EOL .)
    (               reduce using rule 107 (exit_stmt -> EXIT EOL .)
    TETRO           reduce using rule 107 (exit_stmt -> EXIT EOL .)
    BOARD           reduce using rule 107 (exit_stmt -> EXIT EOL .)
    STRING_TYPE     reduce using rule 107 (exit_stmt -> EXIT EOL .)
    INT_TYPE        reduce using rule 107 (exit_stmt -> EXIT EOL .)
    ADD_SCORE       reduce using rule 107 (exit_stmt -> EXIT EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 107 (exit_stmt -> EXIT EOL .)
    DISPLAY_TETRO   reduce using rule 107 (exit_stmt -> EXIT EOL .)
    DISPLAY         reduce using rule 107 (exit_stmt -> EXIT EOL .)
    CLEAR_LINE      reduce using rule 107 (exit_stmt -> EXIT EOL .)
    HARD_DROP       reduce using rule 107 (exit_stmt -> EXIT EOL .)
    SET_MODE        reduce using rule 107 (exit_stmt -> EXIT EOL .)
    SET_GAME_DIFFICULTY reduce using rule 107 (exit_stmt -> EXIT EOL .)
    PLAY_HW         reduce using rule 107 (exit_stmt -> EXIT EOL .)
    CLEAR_SCREEN    reduce using rule 107 (exit_stmt -> EXIT EOL .)
    DISPLAY_BOARD   reduce using rule 107 (exit_stmt -> EXIT EOL .)
    GET_NAME        reduce using rule 107 (exit_stmt -> EXIT EOL .)
    NUMBER          reduce using rule 107 (exit_stmt -> EXIT EOL .)
    $end            reduce using rule 107 (exit_stmt -> EXIT EOL .)
    RCURLYPAREN     reduce using rule 107 (exit_stmt -> EXIT EOL .)


state 68

    (106) break_stmt -> BREAK EOL .
    EXIT            reduce using rule 106 (break_stmt -> BREAK EOL .)
    BREAK           reduce using rule 106 (break_stmt -> BREAK EOL .)
    IF              reduce using rule 106 (break_stmt -> BREAK EOL .)
    IMPORT          reduce using rule 106 (break_stmt -> BREAK EOL .)
    REM             reduce using rule 106 (break_stmt -> BREAK EOL .)
    NOT             reduce using rule 106 (break_stmt -> BREAK EOL .)
    -               reduce using rule 106 (break_stmt -> BREAK EOL .)
    ID              reduce using rule 106 (break_stmt -> BREAK EOL .)
    ARRAY           reduce using rule 106 (break_stmt -> BREAK EOL .)
    SET_SPEED       reduce using rule 106 (break_stmt -> BREAK EOL .)
    PUSH            reduce using rule 106 (break_stmt -> BREAK EOL .)
    (               reduce using rule 106 (break_stmt -> BREAK EOL .)
    TETRO           reduce using rule 106 (break_stmt -> BREAK EOL .)
    BOARD           reduce using rule 106 (break_stmt -> BREAK EOL .)
    STRING_TYPE     reduce using rule 106 (break_stmt -> BREAK EOL .)
    INT_TYPE        reduce using rule 106 (break_stmt -> BREAK EOL .)
    ADD_SCORE       reduce using rule 106 (break_stmt -> BREAK EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 106 (break_stmt -> BREAK EOL .)
    DISPLAY_TETRO   reduce using rule 106 (break_stmt -> BREAK EOL .)
    DISPLAY         reduce using rule 106 (break_stmt -> BREAK EOL .)
    CLEAR_LINE      reduce using rule 106 (break_stmt -> BREAK EOL .)
    HARD_DROP       reduce using rule 106 (break_stmt -> BREAK EOL .)
    SET_MODE        reduce using rule 106 (break_stmt -> BREAK EOL .)
    SET_GAME_DIFFICULTY reduce using rule 106 (break_stmt -> BREAK EOL .)
    PLAY_HW         reduce using rule 106 (break_stmt -> BREAK EOL .)
    CLEAR_SCREEN    reduce using rule 106 (break_stmt -> BREAK EOL .)
    DISPLAY_BOARD   reduce using rule 106 (break_stmt -> BREAK EOL .)
    GET_NAME        reduce using rule 106 (break_stmt -> BREAK EOL .)
    NUMBER          reduce using rule 106 (break_stmt -> BREAK EOL .)
    $end            reduce using rule 106 (break_stmt -> BREAK EOL .)
    RCURLYPAREN     reduce using rule 106 (break_stmt -> BREAK EOL .)


state 69

    (111) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( . expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (51) operand -> . NUMBER
    (52) operand -> . ID
    NOT             shift and go to state 26
    -               shift and go to state 27
    (               shift and go to state 17
    NUMBER          shift and go to state 21
    ID              shift and go to state 71

    expr                           shift and go to state 100
    factor                         shift and go to state 28
    operand                        shift and go to state 35

state 70

    (49) factor -> ( expr . )
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    )               shift and go to state 101
    OR              shift and go to state 54
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 71

    (52) operand -> ID .
    )               reduce using rule 52 (operand -> ID .)
    OR              reduce using rule 52 (operand -> ID .)
    AND             reduce using rule 52 (operand -> ID .)
    EE              reduce using rule 52 (operand -> ID .)
    NE              reduce using rule 52 (operand -> ID .)
    GTE             reduce using rule 52 (operand -> ID .)
    LTE             reduce using rule 52 (operand -> ID .)
    LT              reduce using rule 52 (operand -> ID .)
    GT              reduce using rule 52 (operand -> ID .)
    -               reduce using rule 52 (operand -> ID .)
    +               reduce using rule 52 (operand -> ID .)
    %               reduce using rule 52 (operand -> ID .)
    /               reduce using rule 52 (operand -> ID .)
    *               reduce using rule 52 (operand -> ID .)
    EXIT            reduce using rule 52 (operand -> ID .)
    BREAK           reduce using rule 52 (operand -> ID .)
    IF              reduce using rule 52 (operand -> ID .)
    IMPORT          reduce using rule 52 (operand -> ID .)
    REM             reduce using rule 52 (operand -> ID .)
    NOT             reduce using rule 52 (operand -> ID .)
    ID              reduce using rule 52 (operand -> ID .)
    ARRAY           reduce using rule 52 (operand -> ID .)
    SET_SPEED       reduce using rule 52 (operand -> ID .)
    PUSH            reduce using rule 52 (operand -> ID .)
    (               reduce using rule 52 (operand -> ID .)
    TETRO           reduce using rule 52 (operand -> ID .)
    BOARD           reduce using rule 52 (operand -> ID .)
    STRING_TYPE     reduce using rule 52 (operand -> ID .)
    INT_TYPE        reduce using rule 52 (operand -> ID .)
    ADD_SCORE       reduce using rule 52 (operand -> ID .)
    DISPLAY_NEXT_TETRO reduce using rule 52 (operand -> ID .)
    DISPLAY_TETRO   reduce using rule 52 (operand -> ID .)
    DISPLAY         reduce using rule 52 (operand -> ID .)
    CLEAR_LINE      reduce using rule 52 (operand -> ID .)
    HARD_DROP       reduce using rule 52 (operand -> ID .)
    SET_MODE        reduce using rule 52 (operand -> ID .)
    SET_GAME_DIFFICULTY reduce using rule 52 (operand -> ID .)
    PLAY_HW         reduce using rule 52 (operand -> ID .)
    CLEAR_SCREEN    reduce using rule 52 (operand -> ID .)
    DISPLAY_BOARD   reduce using rule 52 (operand -> ID .)
    GET_NAME        reduce using rule 52 (operand -> ID .)
    NUMBER          reduce using rule 52 (operand -> ID .)
    $end            reduce using rule 52 (operand -> ID .)
    EOL             reduce using rule 52 (operand -> ID .)
    RCURLYPAREN     reduce using rule 52 (operand -> ID .)


state 72

    (14) import_stmt -> IMPORT GAME . EOL
    EOL             shift and go to state 102


state 73

    (93) rem_call -> REM ( . ID SEPARATOR ID )
    (94) rem_call -> REM ( . ID SEPARATOR NUMBER )
    (95) rem_call -> REM ( . array_val SEPARATOR ID )
    (96) rem_call -> REM ( . array_val SEPARATOR NUMBER )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 103
    LBLOCKPAREN     shift and go to state 105

    array_val                      shift and go to state 104

state 74

    (15) reass_stmt -> ID ASSIGN . expr EOL
    (16) reass_stmt -> ID ASSIGN . array_val EOL
    (17) reass_stmt -> ID ASSIGN . val EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (51) operand -> . NUMBER
    (52) operand -> . ID
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    NOT             shift and go to state 26
    -               shift and go to state 27
    LBLOCKPAREN     shift and go to state 105
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 110
    (               shift and go to state 17
    ID              shift and go to state 71
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    expr                           shift and go to state 106
    array_val                      shift and go to state 107
    val                            shift and go to state 108
    factor                         shift and go to state 28
    birf                           shift and go to state 111
    operand                        shift and go to state 35
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 75

    (101) bivf -> set_speed_call EOL .
    EXIT            reduce using rule 101 (bivf -> set_speed_call EOL .)
    BREAK           reduce using rule 101 (bivf -> set_speed_call EOL .)
    IF              reduce using rule 101 (bivf -> set_speed_call EOL .)
    IMPORT          reduce using rule 101 (bivf -> set_speed_call EOL .)
    REM             reduce using rule 101 (bivf -> set_speed_call EOL .)
    NOT             reduce using rule 101 (bivf -> set_speed_call EOL .)
    -               reduce using rule 101 (bivf -> set_speed_call EOL .)
    ID              reduce using rule 101 (bivf -> set_speed_call EOL .)
    ARRAY           reduce using rule 101 (bivf -> set_speed_call EOL .)
    SET_SPEED       reduce using rule 101 (bivf -> set_speed_call EOL .)
    PUSH            reduce using rule 101 (bivf -> set_speed_call EOL .)
    (               reduce using rule 101 (bivf -> set_speed_call EOL .)
    TETRO           reduce using rule 101 (bivf -> set_speed_call EOL .)
    BOARD           reduce using rule 101 (bivf -> set_speed_call EOL .)
    STRING_TYPE     reduce using rule 101 (bivf -> set_speed_call EOL .)
    INT_TYPE        reduce using rule 101 (bivf -> set_speed_call EOL .)
    ADD_SCORE       reduce using rule 101 (bivf -> set_speed_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 101 (bivf -> set_speed_call EOL .)
    DISPLAY_TETRO   reduce using rule 101 (bivf -> set_speed_call EOL .)
    DISPLAY         reduce using rule 101 (bivf -> set_speed_call EOL .)
    CLEAR_LINE      reduce using rule 101 (bivf -> set_speed_call EOL .)
    HARD_DROP       reduce using rule 101 (bivf -> set_speed_call EOL .)
    SET_MODE        reduce using rule 101 (bivf -> set_speed_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 101 (bivf -> set_speed_call EOL .)
    PLAY_HW         reduce using rule 101 (bivf -> set_speed_call EOL .)
    CLEAR_SCREEN    reduce using rule 101 (bivf -> set_speed_call EOL .)
    DISPLAY_BOARD   reduce using rule 101 (bivf -> set_speed_call EOL .)
    GET_NAME        reduce using rule 101 (bivf -> set_speed_call EOL .)
    NUMBER          reduce using rule 101 (bivf -> set_speed_call EOL .)
    $end            reduce using rule 101 (bivf -> set_speed_call EOL .)
    RCURLYPAREN     reduce using rule 101 (bivf -> set_speed_call EOL .)


state 76

    (103) bivf -> push_call EOL .
    EXIT            reduce using rule 103 (bivf -> push_call EOL .)
    BREAK           reduce using rule 103 (bivf -> push_call EOL .)
    IF              reduce using rule 103 (bivf -> push_call EOL .)
    IMPORT          reduce using rule 103 (bivf -> push_call EOL .)
    REM             reduce using rule 103 (bivf -> push_call EOL .)
    NOT             reduce using rule 103 (bivf -> push_call EOL .)
    -               reduce using rule 103 (bivf -> push_call EOL .)
    ID              reduce using rule 103 (bivf -> push_call EOL .)
    ARRAY           reduce using rule 103 (bivf -> push_call EOL .)
    SET_SPEED       reduce using rule 103 (bivf -> push_call EOL .)
    PUSH            reduce using rule 103 (bivf -> push_call EOL .)
    (               reduce using rule 103 (bivf -> push_call EOL .)
    TETRO           reduce using rule 103 (bivf -> push_call EOL .)
    BOARD           reduce using rule 103 (bivf -> push_call EOL .)
    STRING_TYPE     reduce using rule 103 (bivf -> push_call EOL .)
    INT_TYPE        reduce using rule 103 (bivf -> push_call EOL .)
    ADD_SCORE       reduce using rule 103 (bivf -> push_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 103 (bivf -> push_call EOL .)
    DISPLAY_TETRO   reduce using rule 103 (bivf -> push_call EOL .)
    DISPLAY         reduce using rule 103 (bivf -> push_call EOL .)
    CLEAR_LINE      reduce using rule 103 (bivf -> push_call EOL .)
    HARD_DROP       reduce using rule 103 (bivf -> push_call EOL .)
    SET_MODE        reduce using rule 103 (bivf -> push_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 103 (bivf -> push_call EOL .)
    PLAY_HW         reduce using rule 103 (bivf -> push_call EOL .)
    CLEAR_SCREEN    reduce using rule 103 (bivf -> push_call EOL .)
    DISPLAY_BOARD   reduce using rule 103 (bivf -> push_call EOL .)
    GET_NAME        reduce using rule 103 (bivf -> push_call EOL .)
    NUMBER          reduce using rule 103 (bivf -> push_call EOL .)
    $end            reduce using rule 103 (bivf -> push_call EOL .)
    RCURLYPAREN     reduce using rule 103 (bivf -> push_call EOL .)


state 77

    (104) bivf -> bivf_wp_call EOL .
    EXIT            reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    BREAK           reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    IF              reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    IMPORT          reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    REM             reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    NOT             reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    -               reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    ID              reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    ARRAY           reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    SET_SPEED       reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    PUSH            reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    (               reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    TETRO           reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    BOARD           reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    STRING_TYPE     reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    INT_TYPE        reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    ADD_SCORE       reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    DISPLAY_TETRO   reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    DISPLAY         reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    CLEAR_LINE      reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    HARD_DROP       reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    SET_MODE        reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    PLAY_HW         reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    CLEAR_SCREEN    reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    DISPLAY_BOARD   reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    GET_NAME        reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    NUMBER          reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    $end            reduce using rule 104 (bivf -> bivf_wp_call EOL .)
    RCURLYPAREN     reduce using rule 104 (bivf -> bivf_wp_call EOL .)


state 78

    (105) bivf -> bivf_wop_call EOL .
    EXIT            reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    BREAK           reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    IF              reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    IMPORT          reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    REM             reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    NOT             reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    -               reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    ID              reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    ARRAY           reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    SET_SPEED       reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    PUSH            reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    (               reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    TETRO           reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    BOARD           reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    STRING_TYPE     reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    INT_TYPE        reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    ADD_SCORE       reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    DISPLAY_TETRO   reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    DISPLAY         reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    CLEAR_LINE      reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    HARD_DROP       reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    SET_MODE        reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    SET_GAME_DIFFICULTY reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    PLAY_HW         reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    CLEAR_SCREEN    reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    DISPLAY_BOARD   reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    GET_NAME        reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    NUMBER          reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    $end            reduce using rule 105 (bivf -> bivf_wop_call EOL .)
    RCURLYPAREN     reduce using rule 105 (bivf -> bivf_wop_call EOL .)


state 79

    (35) expr -> NOT expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 35 (expr -> NOT expr .)
    AND             reduce using rule 35 (expr -> NOT expr .)
    EXIT            reduce using rule 35 (expr -> NOT expr .)
    BREAK           reduce using rule 35 (expr -> NOT expr .)
    IF              reduce using rule 35 (expr -> NOT expr .)
    IMPORT          reduce using rule 35 (expr -> NOT expr .)
    REM             reduce using rule 35 (expr -> NOT expr .)
    NOT             reduce using rule 35 (expr -> NOT expr .)
    ID              reduce using rule 35 (expr -> NOT expr .)
    ARRAY           reduce using rule 35 (expr -> NOT expr .)
    SET_SPEED       reduce using rule 35 (expr -> NOT expr .)
    PUSH            reduce using rule 35 (expr -> NOT expr .)
    (               reduce using rule 35 (expr -> NOT expr .)
    TETRO           reduce using rule 35 (expr -> NOT expr .)
    BOARD           reduce using rule 35 (expr -> NOT expr .)
    STRING_TYPE     reduce using rule 35 (expr -> NOT expr .)
    INT_TYPE        reduce using rule 35 (expr -> NOT expr .)
    ADD_SCORE       reduce using rule 35 (expr -> NOT expr .)
    DISPLAY_NEXT_TETRO reduce using rule 35 (expr -> NOT expr .)
    DISPLAY_TETRO   reduce using rule 35 (expr -> NOT expr .)
    DISPLAY         reduce using rule 35 (expr -> NOT expr .)
    CLEAR_LINE      reduce using rule 35 (expr -> NOT expr .)
    HARD_DROP       reduce using rule 35 (expr -> NOT expr .)
    SET_MODE        reduce using rule 35 (expr -> NOT expr .)
    SET_GAME_DIFFICULTY reduce using rule 35 (expr -> NOT expr .)
    PLAY_HW         reduce using rule 35 (expr -> NOT expr .)
    CLEAR_SCREEN    reduce using rule 35 (expr -> NOT expr .)
    DISPLAY_BOARD   reduce using rule 35 (expr -> NOT expr .)
    GET_NAME        reduce using rule 35 (expr -> NOT expr .)
    NUMBER          reduce using rule 35 (expr -> NOT expr .)
    $end            reduce using rule 35 (expr -> NOT expr .)
    )               reduce using rule 35 (expr -> NOT expr .)
    EOL             reduce using rule 35 (expr -> NOT expr .)
    RCURLYPAREN     reduce using rule 35 (expr -> NOT expr .)
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 80

    (48) expr -> - factor .
    OR              reduce using rule 48 (expr -> - factor .)
    AND             reduce using rule 48 (expr -> - factor .)
    EE              reduce using rule 48 (expr -> - factor .)
    NE              reduce using rule 48 (expr -> - factor .)
    GTE             reduce using rule 48 (expr -> - factor .)
    LTE             reduce using rule 48 (expr -> - factor .)
    LT              reduce using rule 48 (expr -> - factor .)
    GT              reduce using rule 48 (expr -> - factor .)
    -               reduce using rule 48 (expr -> - factor .)
    +               reduce using rule 48 (expr -> - factor .)
    %               reduce using rule 48 (expr -> - factor .)
    /               reduce using rule 48 (expr -> - factor .)
    *               reduce using rule 48 (expr -> - factor .)
    EXIT            reduce using rule 48 (expr -> - factor .)
    BREAK           reduce using rule 48 (expr -> - factor .)
    IF              reduce using rule 48 (expr -> - factor .)
    IMPORT          reduce using rule 48 (expr -> - factor .)
    REM             reduce using rule 48 (expr -> - factor .)
    NOT             reduce using rule 48 (expr -> - factor .)
    ID              reduce using rule 48 (expr -> - factor .)
    ARRAY           reduce using rule 48 (expr -> - factor .)
    SET_SPEED       reduce using rule 48 (expr -> - factor .)
    PUSH            reduce using rule 48 (expr -> - factor .)
    (               reduce using rule 48 (expr -> - factor .)
    TETRO           reduce using rule 48 (expr -> - factor .)
    BOARD           reduce using rule 48 (expr -> - factor .)
    STRING_TYPE     reduce using rule 48 (expr -> - factor .)
    INT_TYPE        reduce using rule 48 (expr -> - factor .)
    ADD_SCORE       reduce using rule 48 (expr -> - factor .)
    DISPLAY_NEXT_TETRO reduce using rule 48 (expr -> - factor .)
    DISPLAY_TETRO   reduce using rule 48 (expr -> - factor .)
    DISPLAY         reduce using rule 48 (expr -> - factor .)
    CLEAR_LINE      reduce using rule 48 (expr -> - factor .)
    HARD_DROP       reduce using rule 48 (expr -> - factor .)
    SET_MODE        reduce using rule 48 (expr -> - factor .)
    SET_GAME_DIFFICULTY reduce using rule 48 (expr -> - factor .)
    PLAY_HW         reduce using rule 48 (expr -> - factor .)
    CLEAR_SCREEN    reduce using rule 48 (expr -> - factor .)
    DISPLAY_BOARD   reduce using rule 48 (expr -> - factor .)
    GET_NAME        reduce using rule 48 (expr -> - factor .)
    NUMBER          reduce using rule 48 (expr -> - factor .)
    $end            reduce using rule 48 (expr -> - factor .)
    )               reduce using rule 48 (expr -> - factor .)
    EOL             reduce using rule 48 (expr -> - factor .)
    RCURLYPAREN     reduce using rule 48 (expr -> - factor .)


state 81

    (18) init_stmt -> ARRAY ID . ASSIGN array_val EOL
    ASSIGN          shift and go to state 129


state 82

    (19) init_stmt -> data_type ID . ASSIGN expr EOL
    (20) init_stmt -> data_type ID . ASSIGN val EOL
    ASSIGN          shift and go to state 130


state 83

    (90) set_speed_call -> SET_SPEED ( . HARD )
    (91) set_speed_call -> SET_SPEED ( . MEDIUM )
    (92) set_speed_call -> SET_SPEED ( . EASY )
    HARD            shift and go to state 131
    MEDIUM          shift and go to state 132
    EASY            shift and go to state 133


state 84

    (97) push_call -> PUSH ( . ID SEPARATOR ID )
    (98) push_call -> PUSH ( . ID SEPARATOR val )
    ID              shift and go to state 134


state 85

    (100) bivf_wp_call -> bivf_wp ( . params )
    (53) params -> . params SEPARATOR param
    (54) params -> . param
    (55) param -> . val
    (56) param -> . ID
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 138
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    params                         shift and go to state 135
    param                          shift and go to state 136
    val                            shift and go to state 137
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 86

    (99) bivf_wop_call -> bivf_wop ( . )
    )               shift and go to state 140


state 87

    (33) expr -> expr OR expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 33 (expr -> expr OR expr .)
    EXIT            reduce using rule 33 (expr -> expr OR expr .)
    BREAK           reduce using rule 33 (expr -> expr OR expr .)
    IF              reduce using rule 33 (expr -> expr OR expr .)
    IMPORT          reduce using rule 33 (expr -> expr OR expr .)
    REM             reduce using rule 33 (expr -> expr OR expr .)
    NOT             reduce using rule 33 (expr -> expr OR expr .)
    ID              reduce using rule 33 (expr -> expr OR expr .)
    ARRAY           reduce using rule 33 (expr -> expr OR expr .)
    SET_SPEED       reduce using rule 33 (expr -> expr OR expr .)
    PUSH            reduce using rule 33 (expr -> expr OR expr .)
    (               reduce using rule 33 (expr -> expr OR expr .)
    TETRO           reduce using rule 33 (expr -> expr OR expr .)
    BOARD           reduce using rule 33 (expr -> expr OR expr .)
    STRING_TYPE     reduce using rule 33 (expr -> expr OR expr .)
    INT_TYPE        reduce using rule 33 (expr -> expr OR expr .)
    ADD_SCORE       reduce using rule 33 (expr -> expr OR expr .)
    DISPLAY_NEXT_TETRO reduce using rule 33 (expr -> expr OR expr .)
    DISPLAY_TETRO   reduce using rule 33 (expr -> expr OR expr .)
    DISPLAY         reduce using rule 33 (expr -> expr OR expr .)
    CLEAR_LINE      reduce using rule 33 (expr -> expr OR expr .)
    HARD_DROP       reduce using rule 33 (expr -> expr OR expr .)
    SET_MODE        reduce using rule 33 (expr -> expr OR expr .)
    SET_GAME_DIFFICULTY reduce using rule 33 (expr -> expr OR expr .)
    PLAY_HW         reduce using rule 33 (expr -> expr OR expr .)
    CLEAR_SCREEN    reduce using rule 33 (expr -> expr OR expr .)
    DISPLAY_BOARD   reduce using rule 33 (expr -> expr OR expr .)
    GET_NAME        reduce using rule 33 (expr -> expr OR expr .)
    NUMBER          reduce using rule 33 (expr -> expr OR expr .)
    $end            reduce using rule 33 (expr -> expr OR expr .)
    )               reduce using rule 33 (expr -> expr OR expr .)
    EOL             reduce using rule 33 (expr -> expr OR expr .)
    RCURLYPAREN     reduce using rule 33 (expr -> expr OR expr .)
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 88

    (34) expr -> expr AND expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 34 (expr -> expr AND expr .)
    AND             reduce using rule 34 (expr -> expr AND expr .)
    EXIT            reduce using rule 34 (expr -> expr AND expr .)
    BREAK           reduce using rule 34 (expr -> expr AND expr .)
    IF              reduce using rule 34 (expr -> expr AND expr .)
    IMPORT          reduce using rule 34 (expr -> expr AND expr .)
    REM             reduce using rule 34 (expr -> expr AND expr .)
    NOT             reduce using rule 34 (expr -> expr AND expr .)
    ID              reduce using rule 34 (expr -> expr AND expr .)
    ARRAY           reduce using rule 34 (expr -> expr AND expr .)
    SET_SPEED       reduce using rule 34 (expr -> expr AND expr .)
    PUSH            reduce using rule 34 (expr -> expr AND expr .)
    (               reduce using rule 34 (expr -> expr AND expr .)
    TETRO           reduce using rule 34 (expr -> expr AND expr .)
    BOARD           reduce using rule 34 (expr -> expr AND expr .)
    STRING_TYPE     reduce using rule 34 (expr -> expr AND expr .)
    INT_TYPE        reduce using rule 34 (expr -> expr AND expr .)
    ADD_SCORE       reduce using rule 34 (expr -> expr AND expr .)
    DISPLAY_NEXT_TETRO reduce using rule 34 (expr -> expr AND expr .)
    DISPLAY_TETRO   reduce using rule 34 (expr -> expr AND expr .)
    DISPLAY         reduce using rule 34 (expr -> expr AND expr .)
    CLEAR_LINE      reduce using rule 34 (expr -> expr AND expr .)
    HARD_DROP       reduce using rule 34 (expr -> expr AND expr .)
    SET_MODE        reduce using rule 34 (expr -> expr AND expr .)
    SET_GAME_DIFFICULTY reduce using rule 34 (expr -> expr AND expr .)
    PLAY_HW         reduce using rule 34 (expr -> expr AND expr .)
    CLEAR_SCREEN    reduce using rule 34 (expr -> expr AND expr .)
    DISPLAY_BOARD   reduce using rule 34 (expr -> expr AND expr .)
    GET_NAME        reduce using rule 34 (expr -> expr AND expr .)
    NUMBER          reduce using rule 34 (expr -> expr AND expr .)
    $end            reduce using rule 34 (expr -> expr AND expr .)
    )               reduce using rule 34 (expr -> expr AND expr .)
    EOL             reduce using rule 34 (expr -> expr AND expr .)
    RCURLYPAREN     reduce using rule 34 (expr -> expr AND expr .)
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 89

    (36) expr -> expr EE expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 36 (expr -> expr EE expr .)
    AND             reduce using rule 36 (expr -> expr EE expr .)
    EE              reduce using rule 36 (expr -> expr EE expr .)
    NE              reduce using rule 36 (expr -> expr EE expr .)
    GTE             reduce using rule 36 (expr -> expr EE expr .)
    LTE             reduce using rule 36 (expr -> expr EE expr .)
    LT              reduce using rule 36 (expr -> expr EE expr .)
    GT              reduce using rule 36 (expr -> expr EE expr .)
    EXIT            reduce using rule 36 (expr -> expr EE expr .)
    BREAK           reduce using rule 36 (expr -> expr EE expr .)
    IF              reduce using rule 36 (expr -> expr EE expr .)
    IMPORT          reduce using rule 36 (expr -> expr EE expr .)
    REM             reduce using rule 36 (expr -> expr EE expr .)
    NOT             reduce using rule 36 (expr -> expr EE expr .)
    ID              reduce using rule 36 (expr -> expr EE expr .)
    ARRAY           reduce using rule 36 (expr -> expr EE expr .)
    SET_SPEED       reduce using rule 36 (expr -> expr EE expr .)
    PUSH            reduce using rule 36 (expr -> expr EE expr .)
    (               reduce using rule 36 (expr -> expr EE expr .)
    TETRO           reduce using rule 36 (expr -> expr EE expr .)
    BOARD           reduce using rule 36 (expr -> expr EE expr .)
    STRING_TYPE     reduce using rule 36 (expr -> expr EE expr .)
    INT_TYPE        reduce using rule 36 (expr -> expr EE expr .)
    ADD_SCORE       reduce using rule 36 (expr -> expr EE expr .)
    DISPLAY_NEXT_TETRO reduce using rule 36 (expr -> expr EE expr .)
    DISPLAY_TETRO   reduce using rule 36 (expr -> expr EE expr .)
    DISPLAY         reduce using rule 36 (expr -> expr EE expr .)
    CLEAR_LINE      reduce using rule 36 (expr -> expr EE expr .)
    HARD_DROP       reduce using rule 36 (expr -> expr EE expr .)
    SET_MODE        reduce using rule 36 (expr -> expr EE expr .)
    SET_GAME_DIFFICULTY reduce using rule 36 (expr -> expr EE expr .)
    PLAY_HW         reduce using rule 36 (expr -> expr EE expr .)
    CLEAR_SCREEN    reduce using rule 36 (expr -> expr EE expr .)
    DISPLAY_BOARD   reduce using rule 36 (expr -> expr EE expr .)
    GET_NAME        reduce using rule 36 (expr -> expr EE expr .)
    NUMBER          reduce using rule 36 (expr -> expr EE expr .)
    $end            reduce using rule 36 (expr -> expr EE expr .)
    )               reduce using rule 36 (expr -> expr EE expr .)
    EOL             reduce using rule 36 (expr -> expr EE expr .)
    RCURLYPAREN     reduce using rule 36 (expr -> expr EE expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 90

    (37) expr -> expr NE expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 37 (expr -> expr NE expr .)
    AND             reduce using rule 37 (expr -> expr NE expr .)
    EE              reduce using rule 37 (expr -> expr NE expr .)
    NE              reduce using rule 37 (expr -> expr NE expr .)
    GTE             reduce using rule 37 (expr -> expr NE expr .)
    LTE             reduce using rule 37 (expr -> expr NE expr .)
    LT              reduce using rule 37 (expr -> expr NE expr .)
    GT              reduce using rule 37 (expr -> expr NE expr .)
    EXIT            reduce using rule 37 (expr -> expr NE expr .)
    BREAK           reduce using rule 37 (expr -> expr NE expr .)
    IF              reduce using rule 37 (expr -> expr NE expr .)
    IMPORT          reduce using rule 37 (expr -> expr NE expr .)
    REM             reduce using rule 37 (expr -> expr NE expr .)
    NOT             reduce using rule 37 (expr -> expr NE expr .)
    ID              reduce using rule 37 (expr -> expr NE expr .)
    ARRAY           reduce using rule 37 (expr -> expr NE expr .)
    SET_SPEED       reduce using rule 37 (expr -> expr NE expr .)
    PUSH            reduce using rule 37 (expr -> expr NE expr .)
    (               reduce using rule 37 (expr -> expr NE expr .)
    TETRO           reduce using rule 37 (expr -> expr NE expr .)
    BOARD           reduce using rule 37 (expr -> expr NE expr .)
    STRING_TYPE     reduce using rule 37 (expr -> expr NE expr .)
    INT_TYPE        reduce using rule 37 (expr -> expr NE expr .)
    ADD_SCORE       reduce using rule 37 (expr -> expr NE expr .)
    DISPLAY_NEXT_TETRO reduce using rule 37 (expr -> expr NE expr .)
    DISPLAY_TETRO   reduce using rule 37 (expr -> expr NE expr .)
    DISPLAY         reduce using rule 37 (expr -> expr NE expr .)
    CLEAR_LINE      reduce using rule 37 (expr -> expr NE expr .)
    HARD_DROP       reduce using rule 37 (expr -> expr NE expr .)
    SET_MODE        reduce using rule 37 (expr -> expr NE expr .)
    SET_GAME_DIFFICULTY reduce using rule 37 (expr -> expr NE expr .)
    PLAY_HW         reduce using rule 37 (expr -> expr NE expr .)
    CLEAR_SCREEN    reduce using rule 37 (expr -> expr NE expr .)
    DISPLAY_BOARD   reduce using rule 37 (expr -> expr NE expr .)
    GET_NAME        reduce using rule 37 (expr -> expr NE expr .)
    NUMBER          reduce using rule 37 (expr -> expr NE expr .)
    $end            reduce using rule 37 (expr -> expr NE expr .)
    )               reduce using rule 37 (expr -> expr NE expr .)
    EOL             reduce using rule 37 (expr -> expr NE expr .)
    RCURLYPAREN     reduce using rule 37 (expr -> expr NE expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 91

    (38) expr -> expr GTE expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 38 (expr -> expr GTE expr .)
    AND             reduce using rule 38 (expr -> expr GTE expr .)
    EE              reduce using rule 38 (expr -> expr GTE expr .)
    NE              reduce using rule 38 (expr -> expr GTE expr .)
    GTE             reduce using rule 38 (expr -> expr GTE expr .)
    LTE             reduce using rule 38 (expr -> expr GTE expr .)
    LT              reduce using rule 38 (expr -> expr GTE expr .)
    GT              reduce using rule 38 (expr -> expr GTE expr .)
    EXIT            reduce using rule 38 (expr -> expr GTE expr .)
    BREAK           reduce using rule 38 (expr -> expr GTE expr .)
    IF              reduce using rule 38 (expr -> expr GTE expr .)
    IMPORT          reduce using rule 38 (expr -> expr GTE expr .)
    REM             reduce using rule 38 (expr -> expr GTE expr .)
    NOT             reduce using rule 38 (expr -> expr GTE expr .)
    ID              reduce using rule 38 (expr -> expr GTE expr .)
    ARRAY           reduce using rule 38 (expr -> expr GTE expr .)
    SET_SPEED       reduce using rule 38 (expr -> expr GTE expr .)
    PUSH            reduce using rule 38 (expr -> expr GTE expr .)
    (               reduce using rule 38 (expr -> expr GTE expr .)
    TETRO           reduce using rule 38 (expr -> expr GTE expr .)
    BOARD           reduce using rule 38 (expr -> expr GTE expr .)
    STRING_TYPE     reduce using rule 38 (expr -> expr GTE expr .)
    INT_TYPE        reduce using rule 38 (expr -> expr GTE expr .)
    ADD_SCORE       reduce using rule 38 (expr -> expr GTE expr .)
    DISPLAY_NEXT_TETRO reduce using rule 38 (expr -> expr GTE expr .)
    DISPLAY_TETRO   reduce using rule 38 (expr -> expr GTE expr .)
    DISPLAY         reduce using rule 38 (expr -> expr GTE expr .)
    CLEAR_LINE      reduce using rule 38 (expr -> expr GTE expr .)
    HARD_DROP       reduce using rule 38 (expr -> expr GTE expr .)
    SET_MODE        reduce using rule 38 (expr -> expr GTE expr .)
    SET_GAME_DIFFICULTY reduce using rule 38 (expr -> expr GTE expr .)
    PLAY_HW         reduce using rule 38 (expr -> expr GTE expr .)
    CLEAR_SCREEN    reduce using rule 38 (expr -> expr GTE expr .)
    DISPLAY_BOARD   reduce using rule 38 (expr -> expr GTE expr .)
    GET_NAME        reduce using rule 38 (expr -> expr GTE expr .)
    NUMBER          reduce using rule 38 (expr -> expr GTE expr .)
    $end            reduce using rule 38 (expr -> expr GTE expr .)
    )               reduce using rule 38 (expr -> expr GTE expr .)
    EOL             reduce using rule 38 (expr -> expr GTE expr .)
    RCURLYPAREN     reduce using rule 38 (expr -> expr GTE expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 92

    (39) expr -> expr LTE expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 39 (expr -> expr LTE expr .)
    AND             reduce using rule 39 (expr -> expr LTE expr .)
    EE              reduce using rule 39 (expr -> expr LTE expr .)
    NE              reduce using rule 39 (expr -> expr LTE expr .)
    GTE             reduce using rule 39 (expr -> expr LTE expr .)
    LTE             reduce using rule 39 (expr -> expr LTE expr .)
    LT              reduce using rule 39 (expr -> expr LTE expr .)
    GT              reduce using rule 39 (expr -> expr LTE expr .)
    EXIT            reduce using rule 39 (expr -> expr LTE expr .)
    BREAK           reduce using rule 39 (expr -> expr LTE expr .)
    IF              reduce using rule 39 (expr -> expr LTE expr .)
    IMPORT          reduce using rule 39 (expr -> expr LTE expr .)
    REM             reduce using rule 39 (expr -> expr LTE expr .)
    NOT             reduce using rule 39 (expr -> expr LTE expr .)
    ID              reduce using rule 39 (expr -> expr LTE expr .)
    ARRAY           reduce using rule 39 (expr -> expr LTE expr .)
    SET_SPEED       reduce using rule 39 (expr -> expr LTE expr .)
    PUSH            reduce using rule 39 (expr -> expr LTE expr .)
    (               reduce using rule 39 (expr -> expr LTE expr .)
    TETRO           reduce using rule 39 (expr -> expr LTE expr .)
    BOARD           reduce using rule 39 (expr -> expr LTE expr .)
    STRING_TYPE     reduce using rule 39 (expr -> expr LTE expr .)
    INT_TYPE        reduce using rule 39 (expr -> expr LTE expr .)
    ADD_SCORE       reduce using rule 39 (expr -> expr LTE expr .)
    DISPLAY_NEXT_TETRO reduce using rule 39 (expr -> expr LTE expr .)
    DISPLAY_TETRO   reduce using rule 39 (expr -> expr LTE expr .)
    DISPLAY         reduce using rule 39 (expr -> expr LTE expr .)
    CLEAR_LINE      reduce using rule 39 (expr -> expr LTE expr .)
    HARD_DROP       reduce using rule 39 (expr -> expr LTE expr .)
    SET_MODE        reduce using rule 39 (expr -> expr LTE expr .)
    SET_GAME_DIFFICULTY reduce using rule 39 (expr -> expr LTE expr .)
    PLAY_HW         reduce using rule 39 (expr -> expr LTE expr .)
    CLEAR_SCREEN    reduce using rule 39 (expr -> expr LTE expr .)
    DISPLAY_BOARD   reduce using rule 39 (expr -> expr LTE expr .)
    GET_NAME        reduce using rule 39 (expr -> expr LTE expr .)
    NUMBER          reduce using rule 39 (expr -> expr LTE expr .)
    $end            reduce using rule 39 (expr -> expr LTE expr .)
    )               reduce using rule 39 (expr -> expr LTE expr .)
    EOL             reduce using rule 39 (expr -> expr LTE expr .)
    RCURLYPAREN     reduce using rule 39 (expr -> expr LTE expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 93

    (40) expr -> expr LT expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 40 (expr -> expr LT expr .)
    AND             reduce using rule 40 (expr -> expr LT expr .)
    EE              reduce using rule 40 (expr -> expr LT expr .)
    NE              reduce using rule 40 (expr -> expr LT expr .)
    GTE             reduce using rule 40 (expr -> expr LT expr .)
    LTE             reduce using rule 40 (expr -> expr LT expr .)
    LT              reduce using rule 40 (expr -> expr LT expr .)
    GT              reduce using rule 40 (expr -> expr LT expr .)
    EXIT            reduce using rule 40 (expr -> expr LT expr .)
    BREAK           reduce using rule 40 (expr -> expr LT expr .)
    IF              reduce using rule 40 (expr -> expr LT expr .)
    IMPORT          reduce using rule 40 (expr -> expr LT expr .)
    REM             reduce using rule 40 (expr -> expr LT expr .)
    NOT             reduce using rule 40 (expr -> expr LT expr .)
    ID              reduce using rule 40 (expr -> expr LT expr .)
    ARRAY           reduce using rule 40 (expr -> expr LT expr .)
    SET_SPEED       reduce using rule 40 (expr -> expr LT expr .)
    PUSH            reduce using rule 40 (expr -> expr LT expr .)
    (               reduce using rule 40 (expr -> expr LT expr .)
    TETRO           reduce using rule 40 (expr -> expr LT expr .)
    BOARD           reduce using rule 40 (expr -> expr LT expr .)
    STRING_TYPE     reduce using rule 40 (expr -> expr LT expr .)
    INT_TYPE        reduce using rule 40 (expr -> expr LT expr .)
    ADD_SCORE       reduce using rule 40 (expr -> expr LT expr .)
    DISPLAY_NEXT_TETRO reduce using rule 40 (expr -> expr LT expr .)
    DISPLAY_TETRO   reduce using rule 40 (expr -> expr LT expr .)
    DISPLAY         reduce using rule 40 (expr -> expr LT expr .)
    CLEAR_LINE      reduce using rule 40 (expr -> expr LT expr .)
    HARD_DROP       reduce using rule 40 (expr -> expr LT expr .)
    SET_MODE        reduce using rule 40 (expr -> expr LT expr .)
    SET_GAME_DIFFICULTY reduce using rule 40 (expr -> expr LT expr .)
    PLAY_HW         reduce using rule 40 (expr -> expr LT expr .)
    CLEAR_SCREEN    reduce using rule 40 (expr -> expr LT expr .)
    DISPLAY_BOARD   reduce using rule 40 (expr -> expr LT expr .)
    GET_NAME        reduce using rule 40 (expr -> expr LT expr .)
    NUMBER          reduce using rule 40 (expr -> expr LT expr .)
    $end            reduce using rule 40 (expr -> expr LT expr .)
    )               reduce using rule 40 (expr -> expr LT expr .)
    EOL             reduce using rule 40 (expr -> expr LT expr .)
    RCURLYPAREN     reduce using rule 40 (expr -> expr LT expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 94

    (41) expr -> expr GT expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 41 (expr -> expr GT expr .)
    AND             reduce using rule 41 (expr -> expr GT expr .)
    EE              reduce using rule 41 (expr -> expr GT expr .)
    NE              reduce using rule 41 (expr -> expr GT expr .)
    GTE             reduce using rule 41 (expr -> expr GT expr .)
    LTE             reduce using rule 41 (expr -> expr GT expr .)
    LT              reduce using rule 41 (expr -> expr GT expr .)
    GT              reduce using rule 41 (expr -> expr GT expr .)
    EXIT            reduce using rule 41 (expr -> expr GT expr .)
    BREAK           reduce using rule 41 (expr -> expr GT expr .)
    IF              reduce using rule 41 (expr -> expr GT expr .)
    IMPORT          reduce using rule 41 (expr -> expr GT expr .)
    REM             reduce using rule 41 (expr -> expr GT expr .)
    NOT             reduce using rule 41 (expr -> expr GT expr .)
    ID              reduce using rule 41 (expr -> expr GT expr .)
    ARRAY           reduce using rule 41 (expr -> expr GT expr .)
    SET_SPEED       reduce using rule 41 (expr -> expr GT expr .)
    PUSH            reduce using rule 41 (expr -> expr GT expr .)
    (               reduce using rule 41 (expr -> expr GT expr .)
    TETRO           reduce using rule 41 (expr -> expr GT expr .)
    BOARD           reduce using rule 41 (expr -> expr GT expr .)
    STRING_TYPE     reduce using rule 41 (expr -> expr GT expr .)
    INT_TYPE        reduce using rule 41 (expr -> expr GT expr .)
    ADD_SCORE       reduce using rule 41 (expr -> expr GT expr .)
    DISPLAY_NEXT_TETRO reduce using rule 41 (expr -> expr GT expr .)
    DISPLAY_TETRO   reduce using rule 41 (expr -> expr GT expr .)
    DISPLAY         reduce using rule 41 (expr -> expr GT expr .)
    CLEAR_LINE      reduce using rule 41 (expr -> expr GT expr .)
    HARD_DROP       reduce using rule 41 (expr -> expr GT expr .)
    SET_MODE        reduce using rule 41 (expr -> expr GT expr .)
    SET_GAME_DIFFICULTY reduce using rule 41 (expr -> expr GT expr .)
    PLAY_HW         reduce using rule 41 (expr -> expr GT expr .)
    CLEAR_SCREEN    reduce using rule 41 (expr -> expr GT expr .)
    DISPLAY_BOARD   reduce using rule 41 (expr -> expr GT expr .)
    GET_NAME        reduce using rule 41 (expr -> expr GT expr .)
    NUMBER          reduce using rule 41 (expr -> expr GT expr .)
    $end            reduce using rule 41 (expr -> expr GT expr .)
    )               reduce using rule 41 (expr -> expr GT expr .)
    EOL             reduce using rule 41 (expr -> expr GT expr .)
    RCURLYPAREN     reduce using rule 41 (expr -> expr GT expr .)
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 95

    (42) expr -> expr - expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 42 (expr -> expr - expr .)
    AND             reduce using rule 42 (expr -> expr - expr .)
    EE              reduce using rule 42 (expr -> expr - expr .)
    NE              reduce using rule 42 (expr -> expr - expr .)
    GTE             reduce using rule 42 (expr -> expr - expr .)
    LTE             reduce using rule 42 (expr -> expr - expr .)
    LT              reduce using rule 42 (expr -> expr - expr .)
    GT              reduce using rule 42 (expr -> expr - expr .)
    -               reduce using rule 42 (expr -> expr - expr .)
    +               reduce using rule 42 (expr -> expr - expr .)
    EXIT            reduce using rule 42 (expr -> expr - expr .)
    BREAK           reduce using rule 42 (expr -> expr - expr .)
    IF              reduce using rule 42 (expr -> expr - expr .)
    IMPORT          reduce using rule 42 (expr -> expr - expr .)
    REM             reduce using rule 42 (expr -> expr - expr .)
    NOT             reduce using rule 42 (expr -> expr - expr .)
    ID              reduce using rule 42 (expr -> expr - expr .)
    ARRAY           reduce using rule 42 (expr -> expr - expr .)
    SET_SPEED       reduce using rule 42 (expr -> expr - expr .)
    PUSH            reduce using rule 42 (expr -> expr - expr .)
    (               reduce using rule 42 (expr -> expr - expr .)
    TETRO           reduce using rule 42 (expr -> expr - expr .)
    BOARD           reduce using rule 42 (expr -> expr - expr .)
    STRING_TYPE     reduce using rule 42 (expr -> expr - expr .)
    INT_TYPE        reduce using rule 42 (expr -> expr - expr .)
    ADD_SCORE       reduce using rule 42 (expr -> expr - expr .)
    DISPLAY_NEXT_TETRO reduce using rule 42 (expr -> expr - expr .)
    DISPLAY_TETRO   reduce using rule 42 (expr -> expr - expr .)
    DISPLAY         reduce using rule 42 (expr -> expr - expr .)
    CLEAR_LINE      reduce using rule 42 (expr -> expr - expr .)
    HARD_DROP       reduce using rule 42 (expr -> expr - expr .)
    SET_MODE        reduce using rule 42 (expr -> expr - expr .)
    SET_GAME_DIFFICULTY reduce using rule 42 (expr -> expr - expr .)
    PLAY_HW         reduce using rule 42 (expr -> expr - expr .)
    CLEAR_SCREEN    reduce using rule 42 (expr -> expr - expr .)
    DISPLAY_BOARD   reduce using rule 42 (expr -> expr - expr .)
    GET_NAME        reduce using rule 42 (expr -> expr - expr .)
    NUMBER          reduce using rule 42 (expr -> expr - expr .)
    $end            reduce using rule 42 (expr -> expr - expr .)
    )               reduce using rule 42 (expr -> expr - expr .)
    EOL             reduce using rule 42 (expr -> expr - expr .)
    RCURLYPAREN     reduce using rule 42 (expr -> expr - expr .)
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 96

    (43) expr -> expr + expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 43 (expr -> expr + expr .)
    AND             reduce using rule 43 (expr -> expr + expr .)
    EE              reduce using rule 43 (expr -> expr + expr .)
    NE              reduce using rule 43 (expr -> expr + expr .)
    GTE             reduce using rule 43 (expr -> expr + expr .)
    LTE             reduce using rule 43 (expr -> expr + expr .)
    LT              reduce using rule 43 (expr -> expr + expr .)
    GT              reduce using rule 43 (expr -> expr + expr .)
    -               reduce using rule 43 (expr -> expr + expr .)
    +               reduce using rule 43 (expr -> expr + expr .)
    EXIT            reduce using rule 43 (expr -> expr + expr .)
    BREAK           reduce using rule 43 (expr -> expr + expr .)
    IF              reduce using rule 43 (expr -> expr + expr .)
    IMPORT          reduce using rule 43 (expr -> expr + expr .)
    REM             reduce using rule 43 (expr -> expr + expr .)
    NOT             reduce using rule 43 (expr -> expr + expr .)
    ID              reduce using rule 43 (expr -> expr + expr .)
    ARRAY           reduce using rule 43 (expr -> expr + expr .)
    SET_SPEED       reduce using rule 43 (expr -> expr + expr .)
    PUSH            reduce using rule 43 (expr -> expr + expr .)
    (               reduce using rule 43 (expr -> expr + expr .)
    TETRO           reduce using rule 43 (expr -> expr + expr .)
    BOARD           reduce using rule 43 (expr -> expr + expr .)
    STRING_TYPE     reduce using rule 43 (expr -> expr + expr .)
    INT_TYPE        reduce using rule 43 (expr -> expr + expr .)
    ADD_SCORE       reduce using rule 43 (expr -> expr + expr .)
    DISPLAY_NEXT_TETRO reduce using rule 43 (expr -> expr + expr .)
    DISPLAY_TETRO   reduce using rule 43 (expr -> expr + expr .)
    DISPLAY         reduce using rule 43 (expr -> expr + expr .)
    CLEAR_LINE      reduce using rule 43 (expr -> expr + expr .)
    HARD_DROP       reduce using rule 43 (expr -> expr + expr .)
    SET_MODE        reduce using rule 43 (expr -> expr + expr .)
    SET_GAME_DIFFICULTY reduce using rule 43 (expr -> expr + expr .)
    PLAY_HW         reduce using rule 43 (expr -> expr + expr .)
    CLEAR_SCREEN    reduce using rule 43 (expr -> expr + expr .)
    DISPLAY_BOARD   reduce using rule 43 (expr -> expr + expr .)
    GET_NAME        reduce using rule 43 (expr -> expr + expr .)
    NUMBER          reduce using rule 43 (expr -> expr + expr .)
    $end            reduce using rule 43 (expr -> expr + expr .)
    )               reduce using rule 43 (expr -> expr + expr .)
    EOL             reduce using rule 43 (expr -> expr + expr .)
    RCURLYPAREN     reduce using rule 43 (expr -> expr + expr .)
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 97

    (44) expr -> expr % expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 44 (expr -> expr % expr .)
    AND             reduce using rule 44 (expr -> expr % expr .)
    EE              reduce using rule 44 (expr -> expr % expr .)
    NE              reduce using rule 44 (expr -> expr % expr .)
    GTE             reduce using rule 44 (expr -> expr % expr .)
    LTE             reduce using rule 44 (expr -> expr % expr .)
    LT              reduce using rule 44 (expr -> expr % expr .)
    GT              reduce using rule 44 (expr -> expr % expr .)
    -               reduce using rule 44 (expr -> expr % expr .)
    +               reduce using rule 44 (expr -> expr % expr .)
    %               reduce using rule 44 (expr -> expr % expr .)
    /               reduce using rule 44 (expr -> expr % expr .)
    *               reduce using rule 44 (expr -> expr % expr .)
    EXIT            reduce using rule 44 (expr -> expr % expr .)
    BREAK           reduce using rule 44 (expr -> expr % expr .)
    IF              reduce using rule 44 (expr -> expr % expr .)
    IMPORT          reduce using rule 44 (expr -> expr % expr .)
    REM             reduce using rule 44 (expr -> expr % expr .)
    NOT             reduce using rule 44 (expr -> expr % expr .)
    ID              reduce using rule 44 (expr -> expr % expr .)
    ARRAY           reduce using rule 44 (expr -> expr % expr .)
    SET_SPEED       reduce using rule 44 (expr -> expr % expr .)
    PUSH            reduce using rule 44 (expr -> expr % expr .)
    (               reduce using rule 44 (expr -> expr % expr .)
    TETRO           reduce using rule 44 (expr -> expr % expr .)
    BOARD           reduce using rule 44 (expr -> expr % expr .)
    STRING_TYPE     reduce using rule 44 (expr -> expr % expr .)
    INT_TYPE        reduce using rule 44 (expr -> expr % expr .)
    ADD_SCORE       reduce using rule 44 (expr -> expr % expr .)
    DISPLAY_NEXT_TETRO reduce using rule 44 (expr -> expr % expr .)
    DISPLAY_TETRO   reduce using rule 44 (expr -> expr % expr .)
    DISPLAY         reduce using rule 44 (expr -> expr % expr .)
    CLEAR_LINE      reduce using rule 44 (expr -> expr % expr .)
    HARD_DROP       reduce using rule 44 (expr -> expr % expr .)
    SET_MODE        reduce using rule 44 (expr -> expr % expr .)
    SET_GAME_DIFFICULTY reduce using rule 44 (expr -> expr % expr .)
    PLAY_HW         reduce using rule 44 (expr -> expr % expr .)
    CLEAR_SCREEN    reduce using rule 44 (expr -> expr % expr .)
    DISPLAY_BOARD   reduce using rule 44 (expr -> expr % expr .)
    GET_NAME        reduce using rule 44 (expr -> expr % expr .)
    NUMBER          reduce using rule 44 (expr -> expr % expr .)
    $end            reduce using rule 44 (expr -> expr % expr .)
    )               reduce using rule 44 (expr -> expr % expr .)
    EOL             reduce using rule 44 (expr -> expr % expr .)
    RCURLYPAREN     reduce using rule 44 (expr -> expr % expr .)


state 98

    (45) expr -> expr / expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 45 (expr -> expr / expr .)
    AND             reduce using rule 45 (expr -> expr / expr .)
    EE              reduce using rule 45 (expr -> expr / expr .)
    NE              reduce using rule 45 (expr -> expr / expr .)
    GTE             reduce using rule 45 (expr -> expr / expr .)
    LTE             reduce using rule 45 (expr -> expr / expr .)
    LT              reduce using rule 45 (expr -> expr / expr .)
    GT              reduce using rule 45 (expr -> expr / expr .)
    -               reduce using rule 45 (expr -> expr / expr .)
    +               reduce using rule 45 (expr -> expr / expr .)
    %               reduce using rule 45 (expr -> expr / expr .)
    /               reduce using rule 45 (expr -> expr / expr .)
    *               reduce using rule 45 (expr -> expr / expr .)
    EXIT            reduce using rule 45 (expr -> expr / expr .)
    BREAK           reduce using rule 45 (expr -> expr / expr .)
    IF              reduce using rule 45 (expr -> expr / expr .)
    IMPORT          reduce using rule 45 (expr -> expr / expr .)
    REM             reduce using rule 45 (expr -> expr / expr .)
    NOT             reduce using rule 45 (expr -> expr / expr .)
    ID              reduce using rule 45 (expr -> expr / expr .)
    ARRAY           reduce using rule 45 (expr -> expr / expr .)
    SET_SPEED       reduce using rule 45 (expr -> expr / expr .)
    PUSH            reduce using rule 45 (expr -> expr / expr .)
    (               reduce using rule 45 (expr -> expr / expr .)
    TETRO           reduce using rule 45 (expr -> expr / expr .)
    BOARD           reduce using rule 45 (expr -> expr / expr .)
    STRING_TYPE     reduce using rule 45 (expr -> expr / expr .)
    INT_TYPE        reduce using rule 45 (expr -> expr / expr .)
    ADD_SCORE       reduce using rule 45 (expr -> expr / expr .)
    DISPLAY_NEXT_TETRO reduce using rule 45 (expr -> expr / expr .)
    DISPLAY_TETRO   reduce using rule 45 (expr -> expr / expr .)
    DISPLAY         reduce using rule 45 (expr -> expr / expr .)
    CLEAR_LINE      reduce using rule 45 (expr -> expr / expr .)
    HARD_DROP       reduce using rule 45 (expr -> expr / expr .)
    SET_MODE        reduce using rule 45 (expr -> expr / expr .)
    SET_GAME_DIFFICULTY reduce using rule 45 (expr -> expr / expr .)
    PLAY_HW         reduce using rule 45 (expr -> expr / expr .)
    CLEAR_SCREEN    reduce using rule 45 (expr -> expr / expr .)
    DISPLAY_BOARD   reduce using rule 45 (expr -> expr / expr .)
    GET_NAME        reduce using rule 45 (expr -> expr / expr .)
    NUMBER          reduce using rule 45 (expr -> expr / expr .)
    $end            reduce using rule 45 (expr -> expr / expr .)
    )               reduce using rule 45 (expr -> expr / expr .)
    EOL             reduce using rule 45 (expr -> expr / expr .)
    RCURLYPAREN     reduce using rule 45 (expr -> expr / expr .)


state 99

    (46) expr -> expr * expr .
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    OR              reduce using rule 46 (expr -> expr * expr .)
    AND             reduce using rule 46 (expr -> expr * expr .)
    EE              reduce using rule 46 (expr -> expr * expr .)
    NE              reduce using rule 46 (expr -> expr * expr .)
    GTE             reduce using rule 46 (expr -> expr * expr .)
    LTE             reduce using rule 46 (expr -> expr * expr .)
    LT              reduce using rule 46 (expr -> expr * expr .)
    GT              reduce using rule 46 (expr -> expr * expr .)
    -               reduce using rule 46 (expr -> expr * expr .)
    +               reduce using rule 46 (expr -> expr * expr .)
    %               reduce using rule 46 (expr -> expr * expr .)
    /               reduce using rule 46 (expr -> expr * expr .)
    *               reduce using rule 46 (expr -> expr * expr .)
    EXIT            reduce using rule 46 (expr -> expr * expr .)
    BREAK           reduce using rule 46 (expr -> expr * expr .)
    IF              reduce using rule 46 (expr -> expr * expr .)
    IMPORT          reduce using rule 46 (expr -> expr * expr .)
    REM             reduce using rule 46 (expr -> expr * expr .)
    NOT             reduce using rule 46 (expr -> expr * expr .)
    ID              reduce using rule 46 (expr -> expr * expr .)
    ARRAY           reduce using rule 46 (expr -> expr * expr .)
    SET_SPEED       reduce using rule 46 (expr -> expr * expr .)
    PUSH            reduce using rule 46 (expr -> expr * expr .)
    (               reduce using rule 46 (expr -> expr * expr .)
    TETRO           reduce using rule 46 (expr -> expr * expr .)
    BOARD           reduce using rule 46 (expr -> expr * expr .)
    STRING_TYPE     reduce using rule 46 (expr -> expr * expr .)
    INT_TYPE        reduce using rule 46 (expr -> expr * expr .)
    ADD_SCORE       reduce using rule 46 (expr -> expr * expr .)
    DISPLAY_NEXT_TETRO reduce using rule 46 (expr -> expr * expr .)
    DISPLAY_TETRO   reduce using rule 46 (expr -> expr * expr .)
    DISPLAY         reduce using rule 46 (expr -> expr * expr .)
    CLEAR_LINE      reduce using rule 46 (expr -> expr * expr .)
    HARD_DROP       reduce using rule 46 (expr -> expr * expr .)
    SET_MODE        reduce using rule 46 (expr -> expr * expr .)
    SET_GAME_DIFFICULTY reduce using rule 46 (expr -> expr * expr .)
    PLAY_HW         reduce using rule 46 (expr -> expr * expr .)
    CLEAR_SCREEN    reduce using rule 46 (expr -> expr * expr .)
    DISPLAY_BOARD   reduce using rule 46 (expr -> expr * expr .)
    GET_NAME        reduce using rule 46 (expr -> expr * expr .)
    NUMBER          reduce using rule 46 (expr -> expr * expr .)
    $end            reduce using rule 46 (expr -> expr * expr .)
    )               reduce using rule 46 (expr -> expr * expr .)
    EOL             reduce using rule 46 (expr -> expr * expr .)
    RCURLYPAREN     reduce using rule 46 (expr -> expr * expr .)


state 100

    (111) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( expr . ) LCURLYPAREN compound_stmt RCURLYPAREN
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    )               shift and go to state 141
    OR              shift and go to state 54
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 101

    (49) factor -> ( expr ) .
    OR              reduce using rule 49 (factor -> ( expr ) .)
    AND             reduce using rule 49 (factor -> ( expr ) .)
    EE              reduce using rule 49 (factor -> ( expr ) .)
    NE              reduce using rule 49 (factor -> ( expr ) .)
    GTE             reduce using rule 49 (factor -> ( expr ) .)
    LTE             reduce using rule 49 (factor -> ( expr ) .)
    LT              reduce using rule 49 (factor -> ( expr ) .)
    GT              reduce using rule 49 (factor -> ( expr ) .)
    -               reduce using rule 49 (factor -> ( expr ) .)
    +               reduce using rule 49 (factor -> ( expr ) .)
    %               reduce using rule 49 (factor -> ( expr ) .)
    /               reduce using rule 49 (factor -> ( expr ) .)
    *               reduce using rule 49 (factor -> ( expr ) .)
    EXIT            reduce using rule 49 (factor -> ( expr ) .)
    BREAK           reduce using rule 49 (factor -> ( expr ) .)
    IF              reduce using rule 49 (factor -> ( expr ) .)
    IMPORT          reduce using rule 49 (factor -> ( expr ) .)
    REM             reduce using rule 49 (factor -> ( expr ) .)
    NOT             reduce using rule 49 (factor -> ( expr ) .)
    ID              reduce using rule 49 (factor -> ( expr ) .)
    ARRAY           reduce using rule 49 (factor -> ( expr ) .)
    SET_SPEED       reduce using rule 49 (factor -> ( expr ) .)
    PUSH            reduce using rule 49 (factor -> ( expr ) .)
    (               reduce using rule 49 (factor -> ( expr ) .)
    TETRO           reduce using rule 49 (factor -> ( expr ) .)
    BOARD           reduce using rule 49 (factor -> ( expr ) .)
    STRING_TYPE     reduce using rule 49 (factor -> ( expr ) .)
    INT_TYPE        reduce using rule 49 (factor -> ( expr ) .)
    ADD_SCORE       reduce using rule 49 (factor -> ( expr ) .)
    DISPLAY_NEXT_TETRO reduce using rule 49 (factor -> ( expr ) .)
    DISPLAY_TETRO   reduce using rule 49 (factor -> ( expr ) .)
    DISPLAY         reduce using rule 49 (factor -> ( expr ) .)
    CLEAR_LINE      reduce using rule 49 (factor -> ( expr ) .)
    HARD_DROP       reduce using rule 49 (factor -> ( expr ) .)
    SET_MODE        reduce using rule 49 (factor -> ( expr ) .)
    SET_GAME_DIFFICULTY reduce using rule 49 (factor -> ( expr ) .)
    PLAY_HW         reduce using rule 49 (factor -> ( expr ) .)
    CLEAR_SCREEN    reduce using rule 49 (factor -> ( expr ) .)
    DISPLAY_BOARD   reduce using rule 49 (factor -> ( expr ) .)
    GET_NAME        reduce using rule 49 (factor -> ( expr ) .)
    NUMBER          reduce using rule 49 (factor -> ( expr ) .)
    $end            reduce using rule 49 (factor -> ( expr ) .)
    )               reduce using rule 49 (factor -> ( expr ) .)
    EOL             reduce using rule 49 (factor -> ( expr ) .)
    RCURLYPAREN     reduce using rule 49 (factor -> ( expr ) .)


state 102

    (14) import_stmt -> IMPORT GAME EOL .
    EXIT            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    BREAK           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    IF              reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    IMPORT          reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    REM             reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    NOT             reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    -               reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ID              reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ARRAY           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_SPEED       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    PUSH            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    (               reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    TETRO           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    BOARD           reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    STRING_TYPE     reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    INT_TYPE        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    ADD_SCORE       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_TETRO   reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY         reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    CLEAR_LINE      reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    HARD_DROP       reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_MODE        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    SET_GAME_DIFFICULTY reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    PLAY_HW         reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    CLEAR_SCREEN    reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    DISPLAY_BOARD   reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    GET_NAME        reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    NUMBER          reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    $end            reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)
    RCURLYPAREN     reduce using rule 14 (import_stmt -> IMPORT GAME EOL .)


state 103

    (93) rem_call -> REM ( ID . SEPARATOR ID )
    (94) rem_call -> REM ( ID . SEPARATOR NUMBER )
    SEPARATOR       shift and go to state 142


state 104

    (95) rem_call -> REM ( array_val . SEPARATOR ID )
    (96) rem_call -> REM ( array_val . SEPARATOR NUMBER )
    SEPARATOR       shift and go to state 143


state 105

    (26) array_val -> LBLOCKPAREN . set RBLOCKPAREN
    (27) array_val -> LBLOCKPAREN . RBLOCKPAREN
    (28) set -> . set SEPARATOR val
    (29) set -> . val
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    RBLOCKPAREN     shift and go to state 145
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    set                            shift and go to state 144
    val                            shift and go to state 146
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 106

    (15) reass_stmt -> ID ASSIGN expr . EOL
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    EOL             shift and go to state 147
    OR              shift and go to state 54
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 107

    (16) reass_stmt -> ID ASSIGN array_val . EOL
    EOL             shift and go to state 148


state 108

    (17) reass_stmt -> ID ASSIGN val . EOL
    EOL             shift and go to state 149


state 109

    (30) val -> STRING_LITERAL .
    EOL             reduce using rule 30 (val -> STRING_LITERAL .)
    )               reduce using rule 30 (val -> STRING_LITERAL .)
    SEPARATOR       reduce using rule 30 (val -> STRING_LITERAL .)
    RBLOCKPAREN     reduce using rule 30 (val -> STRING_LITERAL .)


state 110

    (31) val -> NUMBER .
    (51) operand -> NUMBER .
  ! reduce/reduce conflict for EOL resolved using rule 31 (val -> NUMBER .)
    EOL             reduce using rule 31 (val -> NUMBER .)
    OR              reduce using rule 51 (operand -> NUMBER .)
    AND             reduce using rule 51 (operand -> NUMBER .)
    EE              reduce using rule 51 (operand -> NUMBER .)
    NE              reduce using rule 51 (operand -> NUMBER .)
    GTE             reduce using rule 51 (operand -> NUMBER .)
    LTE             reduce using rule 51 (operand -> NUMBER .)
    LT              reduce using rule 51 (operand -> NUMBER .)
    GT              reduce using rule 51 (operand -> NUMBER .)
    -               reduce using rule 51 (operand -> NUMBER .)
    +               reduce using rule 51 (operand -> NUMBER .)
    %               reduce using rule 51 (operand -> NUMBER .)
    /               reduce using rule 51 (operand -> NUMBER .)
    *               reduce using rule 51 (operand -> NUMBER .)


state 111

    (32) val -> birf .
    EOL             reduce using rule 32 (val -> birf .)
    )               reduce using rule 32 (val -> birf .)
    SEPARATOR       reduce using rule 32 (val -> birf .)
    RBLOCKPAREN     reduce using rule 32 (val -> birf .)


state 112

    (74) birf -> birf_wp_call .
    EOL             reduce using rule 74 (birf -> birf_wp_call .)
    )               reduce using rule 74 (birf -> birf_wp_call .)
    SEPARATOR       reduce using rule 74 (birf -> birf_wp_call .)
    RBLOCKPAREN     reduce using rule 74 (birf -> birf_wp_call .)


state 113

    (75) birf -> birf_wop_call .
    EOL             reduce using rule 75 (birf -> birf_wop_call .)
    )               reduce using rule 75 (birf -> birf_wop_call .)
    SEPARATOR       reduce using rule 75 (birf -> birf_wop_call .)
    RBLOCKPAREN     reduce using rule 75 (birf -> birf_wop_call .)


state 114

    (71) birf_wp_call -> len_call .
    EOL             reduce using rule 71 (birf_wp_call -> len_call .)
    )               reduce using rule 71 (birf_wp_call -> len_call .)
    SEPARATOR       reduce using rule 71 (birf_wp_call -> len_call .)
    RBLOCKPAREN     reduce using rule 71 (birf_wp_call -> len_call .)


state 115

    (72) birf_wp_call -> pop_call .
    EOL             reduce using rule 72 (birf_wp_call -> pop_call .)
    )               reduce using rule 72 (birf_wp_call -> pop_call .)
    SEPARATOR       reduce using rule 72 (birf_wp_call -> pop_call .)
    RBLOCKPAREN     reduce using rule 72 (birf_wp_call -> pop_call .)


state 116

    (73) birf_wp_call -> birf_wp . ( params )
    (               shift and go to state 150


state 117

    (60) birf_wop_call -> birf_wop . ( )
    (               shift and go to state 151


state 118

    (69) len_call -> LEN . ( array_val )
    (70) len_call -> LEN . ( ID )
    (               shift and go to state 152


state 119

    (67) pop_call -> POP . ( array_val )
    (68) pop_call -> POP . ( ID )
    (               shift and go to state 153


state 120

    (61) birf_wp -> ADVANCE .
    (               reduce using rule 61 (birf_wp -> ADVANCE .)


state 121

    (62) birf_wp -> ROTATE_LEFT .
    (               reduce using rule 62 (birf_wp -> ROTATE_LEFT .)


state 122

    (63) birf_wp -> ROTATE_RIGHT .
    (               reduce using rule 63 (birf_wp -> ROTATE_RIGHT .)


state 123

    (64) birf_wp -> MOVE_RIGHT .
    (               reduce using rule 64 (birf_wp -> MOVE_RIGHT .)


state 124

    (65) birf_wp -> MOVE_LEFT .
    (               reduce using rule 65 (birf_wp -> MOVE_LEFT .)


state 125

    (66) birf_wp -> CHECK_CLEARED_LINE .
    (               reduce using rule 66 (birf_wp -> CHECK_CLEARED_LINE .)


state 126

    (57) birf_wop -> GET_CHAR .
    (               reduce using rule 57 (birf_wop -> GET_CHAR .)


state 127

    (58) birf_wop -> GET_BOARD .
    (               reduce using rule 58 (birf_wop -> GET_BOARD .)


state 128

    (59) birf_wop -> GET_NEXT_TETROMINO .
    (               reduce using rule 59 (birf_wop -> GET_NEXT_TETROMINO .)


state 129

    (18) init_stmt -> ARRAY ID ASSIGN . array_val EOL
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    LBLOCKPAREN     shift and go to state 105

    array_val                      shift and go to state 154

state 130

    (19) init_stmt -> data_type ID ASSIGN . expr EOL
    (20) init_stmt -> data_type ID ASSIGN . val EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (51) operand -> . NUMBER
    (52) operand -> . ID
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    NOT             shift and go to state 26
    -               shift and go to state 27
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 110
    (               shift and go to state 17
    ID              shift and go to state 71
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    expr                           shift and go to state 155
    val                            shift and go to state 156
    factor                         shift and go to state 28
    birf                           shift and go to state 111
    operand                        shift and go to state 35
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 131

    (90) set_speed_call -> SET_SPEED ( HARD . )
    )               shift and go to state 157


state 132

    (91) set_speed_call -> SET_SPEED ( MEDIUM . )
    )               shift and go to state 158


state 133

    (92) set_speed_call -> SET_SPEED ( EASY . )
    )               shift and go to state 159


state 134

    (97) push_call -> PUSH ( ID . SEPARATOR ID )
    (98) push_call -> PUSH ( ID . SEPARATOR val )
    SEPARATOR       shift and go to state 160


state 135

    (100) bivf_wp_call -> bivf_wp ( params . )
    (53) params -> params . SEPARATOR param
    )               shift and go to state 161
    SEPARATOR       shift and go to state 162


state 136

    (54) params -> param .
    )               reduce using rule 54 (params -> param .)
    SEPARATOR       reduce using rule 54 (params -> param .)


state 137

    (55) param -> val .
    )               reduce using rule 55 (param -> val .)
    SEPARATOR       reduce using rule 55 (param -> val .)


state 138

    (56) param -> ID .
    )               reduce using rule 56 (param -> ID .)
    SEPARATOR       reduce using rule 56 (param -> ID .)


state 139

    (31) val -> NUMBER .
    )               reduce using rule 31 (val -> NUMBER .)
    SEPARATOR       reduce using rule 31 (val -> NUMBER .)
    RBLOCKPAREN     reduce using rule 31 (val -> NUMBER .)


state 140

    (99) bivf_wop_call -> bivf_wop ( ) .
    EOL             reduce using rule 99 (bivf_wop_call -> bivf_wop ( ) .)


state 141

    (111) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( expr ) . LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 163


state 142

    (93) rem_call -> REM ( ID SEPARATOR . ID )
    (94) rem_call -> REM ( ID SEPARATOR . NUMBER )
    ID              shift and go to state 164
    NUMBER          shift and go to state 165


state 143

    (95) rem_call -> REM ( array_val SEPARATOR . ID )
    (96) rem_call -> REM ( array_val SEPARATOR . NUMBER )
    ID              shift and go to state 166
    NUMBER          shift and go to state 167


state 144

    (26) array_val -> LBLOCKPAREN set . RBLOCKPAREN
    (28) set -> set . SEPARATOR val
    RBLOCKPAREN     shift and go to state 168
    SEPARATOR       shift and go to state 169


state 145

    (27) array_val -> LBLOCKPAREN RBLOCKPAREN .
    SEPARATOR       reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)
    EOL             reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)
    )               reduce using rule 27 (array_val -> LBLOCKPAREN RBLOCKPAREN .)


state 146

    (29) set -> val .
    RBLOCKPAREN     reduce using rule 29 (set -> val .)
    SEPARATOR       reduce using rule 29 (set -> val .)


state 147

    (15) reass_stmt -> ID ASSIGN expr EOL .
    EXIT            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    BREAK           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    IF              reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    IMPORT          reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    REM             reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    NOT             reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    -               reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ID              reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ARRAY           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_SPEED       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    PUSH            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    (               reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    TETRO           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    BOARD           reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    STRING_TYPE     reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    INT_TYPE        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    ADD_SCORE       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_TETRO   reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY         reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    CLEAR_LINE      reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    HARD_DROP       reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_MODE        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    SET_GAME_DIFFICULTY reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    PLAY_HW         reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    CLEAR_SCREEN    reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    DISPLAY_BOARD   reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    GET_NAME        reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    NUMBER          reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    $end            reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)
    RCURLYPAREN     reduce using rule 15 (reass_stmt -> ID ASSIGN expr EOL .)


state 148

    (16) reass_stmt -> ID ASSIGN array_val EOL .
    EXIT            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    BREAK           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    IF              reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    IMPORT          reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    REM             reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    NOT             reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    -               reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ID              reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ARRAY           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_SPEED       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    PUSH            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    (               reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    TETRO           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    BOARD           reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    STRING_TYPE     reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    INT_TYPE        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    ADD_SCORE       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_TETRO   reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY         reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    CLEAR_LINE      reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    HARD_DROP       reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_MODE        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    PLAY_HW         reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    CLEAR_SCREEN    reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    DISPLAY_BOARD   reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    GET_NAME        reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    NUMBER          reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    $end            reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)
    RCURLYPAREN     reduce using rule 16 (reass_stmt -> ID ASSIGN array_val EOL .)


state 149

    (17) reass_stmt -> ID ASSIGN val EOL .
    EXIT            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    BREAK           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    IF              reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    IMPORT          reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    REM             reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    NOT             reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    -               reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ID              reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ARRAY           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_SPEED       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    PUSH            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    (               reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    TETRO           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    BOARD           reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    STRING_TYPE     reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    INT_TYPE        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    ADD_SCORE       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_TETRO   reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY         reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    CLEAR_LINE      reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    HARD_DROP       reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_MODE        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    PLAY_HW         reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    CLEAR_SCREEN    reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    DISPLAY_BOARD   reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    GET_NAME        reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    NUMBER          reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    $end            reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)
    RCURLYPAREN     reduce using rule 17 (reass_stmt -> ID ASSIGN val EOL .)


state 150

    (73) birf_wp_call -> birf_wp ( . params )
    (53) params -> . params SEPARATOR param
    (54) params -> . param
    (55) param -> . val
    (56) param -> . ID
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 138
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    birf_wp                        shift and go to state 116
    params                         shift and go to state 170
    param                          shift and go to state 136
    val                            shift and go to state 137
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wop                       shift and go to state 117

state 151

    (60) birf_wop_call -> birf_wop ( . )
    )               shift and go to state 171


state 152

    (69) len_call -> LEN ( . array_val )
    (70) len_call -> LEN ( . ID )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 173
    LBLOCKPAREN     shift and go to state 105

    array_val                      shift and go to state 172

state 153

    (67) pop_call -> POP ( . array_val )
    (68) pop_call -> POP ( . ID )
    (26) array_val -> . LBLOCKPAREN set RBLOCKPAREN
    (27) array_val -> . LBLOCKPAREN RBLOCKPAREN
    ID              shift and go to state 175
    LBLOCKPAREN     shift and go to state 105

    array_val                      shift and go to state 174

state 154

    (18) init_stmt -> ARRAY ID ASSIGN array_val . EOL
    EOL             shift and go to state 176


state 155

    (19) init_stmt -> data_type ID ASSIGN expr . EOL
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (36) expr -> expr . EE expr
    (37) expr -> expr . NE expr
    (38) expr -> expr . GTE expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    (44) expr -> expr . % expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    EOL             shift and go to state 177
    OR              shift and go to state 54
    AND             shift and go to state 55
    EE              shift and go to state 56
    NE              shift and go to state 57
    GTE             shift and go to state 58
    LTE             shift and go to state 59
    LT              shift and go to state 60
    GT              shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63
    %               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 156

    (20) init_stmt -> data_type ID ASSIGN val . EOL
    EOL             shift and go to state 178


state 157

    (90) set_speed_call -> SET_SPEED ( HARD ) .
    EOL             reduce using rule 90 (set_speed_call -> SET_SPEED ( HARD ) .)


state 158

    (91) set_speed_call -> SET_SPEED ( MEDIUM ) .
    EOL             reduce using rule 91 (set_speed_call -> SET_SPEED ( MEDIUM ) .)


state 159

    (92) set_speed_call -> SET_SPEED ( EASY ) .
    EOL             reduce using rule 92 (set_speed_call -> SET_SPEED ( EASY ) .)


state 160

    (97) push_call -> PUSH ( ID SEPARATOR . ID )
    (98) push_call -> PUSH ( ID SEPARATOR . val )
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 179
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    val                            shift and go to state 180
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 161

    (100) bivf_wp_call -> bivf_wp ( params ) .
    EOL             reduce using rule 100 (bivf_wp_call -> bivf_wp ( params ) .)


state 162

    (53) params -> params SEPARATOR . param
    (55) param -> . val
    (56) param -> . ID
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    ID              shift and go to state 138
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    param                          shift and go to state 181
    val                            shift and go to state 137
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 163

    (111) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( expr ) LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    expr                           shift and go to state 11
    compound_stmt                  shift and go to state 182
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    statement                      shift and go to state 2
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 164

    (93) rem_call -> REM ( ID SEPARATOR ID . )
    )               shift and go to state 183


state 165

    (94) rem_call -> REM ( ID SEPARATOR NUMBER . )
    )               shift and go to state 184


state 166

    (95) rem_call -> REM ( array_val SEPARATOR ID . )
    )               shift and go to state 185


state 167

    (96) rem_call -> REM ( array_val SEPARATOR NUMBER . )
    )               shift and go to state 186


state 168

    (26) array_val -> LBLOCKPAREN set RBLOCKPAREN .
    SEPARATOR       reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)
    EOL             reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)
    )               reduce using rule 26 (array_val -> LBLOCKPAREN set RBLOCKPAREN .)


state 169

    (28) set -> set SEPARATOR . val
    (30) val -> . STRING_LITERAL
    (31) val -> . NUMBER
    (32) val -> . birf
    (74) birf -> . birf_wp_call
    (75) birf -> . birf_wop_call
    (71) birf_wp_call -> . len_call
    (72) birf_wp_call -> . pop_call
    (73) birf_wp_call -> . birf_wp ( params )
    (60) birf_wop_call -> . birf_wop ( )
    (69) len_call -> . LEN ( array_val )
    (70) len_call -> . LEN ( ID )
    (67) pop_call -> . POP ( array_val )
    (68) pop_call -> . POP ( ID )
    (61) birf_wp -> . ADVANCE
    (62) birf_wp -> . ROTATE_LEFT
    (63) birf_wp -> . ROTATE_RIGHT
    (64) birf_wp -> . MOVE_RIGHT
    (65) birf_wp -> . MOVE_LEFT
    (66) birf_wp -> . CHECK_CLEARED_LINE
    (57) birf_wop -> . GET_CHAR
    (58) birf_wop -> . GET_BOARD
    (59) birf_wop -> . GET_NEXT_TETROMINO
    STRING_LITERAL  shift and go to state 109
    NUMBER          shift and go to state 139
    LEN             shift and go to state 118
    POP             shift and go to state 119
    ADVANCE         shift and go to state 120
    ROTATE_LEFT     shift and go to state 121
    ROTATE_RIGHT    shift and go to state 122
    MOVE_RIGHT      shift and go to state 123
    MOVE_LEFT       shift and go to state 124
    CHECK_CLEARED_LINE shift and go to state 125
    GET_CHAR        shift and go to state 126
    GET_BOARD       shift and go to state 127
    GET_NEXT_TETROMINO shift and go to state 128

    val                            shift and go to state 187
    birf                           shift and go to state 111
    birf_wp_call                   shift and go to state 112
    birf_wop_call                  shift and go to state 113
    len_call                       shift and go to state 114
    pop_call                       shift and go to state 115
    birf_wp                        shift and go to state 116
    birf_wop                       shift and go to state 117

state 170

    (73) birf_wp_call -> birf_wp ( params . )
    (53) params -> params . SEPARATOR param
    )               shift and go to state 188
    SEPARATOR       shift and go to state 162


state 171

    (60) birf_wop_call -> birf_wop ( ) .
    EOL             reduce using rule 60 (birf_wop_call -> birf_wop ( ) .)
    )               reduce using rule 60 (birf_wop_call -> birf_wop ( ) .)
    SEPARATOR       reduce using rule 60 (birf_wop_call -> birf_wop ( ) .)
    RBLOCKPAREN     reduce using rule 60 (birf_wop_call -> birf_wop ( ) .)


state 172

    (69) len_call -> LEN ( array_val . )
    )               shift and go to state 189


state 173

    (70) len_call -> LEN ( ID . )
    )               shift and go to state 190


state 174

    (67) pop_call -> POP ( array_val . )
    )               shift and go to state 191


state 175

    (68) pop_call -> POP ( ID . )
    )               shift and go to state 192


state 176

    (18) init_stmt -> ARRAY ID ASSIGN array_val EOL .
    EXIT            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    BREAK           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    IF              reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    IMPORT          reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    REM             reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    NOT             reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    -               reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ID              reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ARRAY           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_SPEED       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    PUSH            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    (               reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    TETRO           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    BOARD           reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    STRING_TYPE     reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    INT_TYPE        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    ADD_SCORE       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_TETRO   reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY         reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    CLEAR_LINE      reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    HARD_DROP       reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_MODE        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    PLAY_HW         reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    CLEAR_SCREEN    reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    DISPLAY_BOARD   reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    GET_NAME        reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    NUMBER          reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    $end            reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)
    RCURLYPAREN     reduce using rule 18 (init_stmt -> ARRAY ID ASSIGN array_val EOL .)


state 177

    (19) init_stmt -> data_type ID ASSIGN expr EOL .
    EXIT            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    BREAK           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    IF              reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    IMPORT          reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    REM             reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    NOT             reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    -               reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ID              reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ARRAY           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_SPEED       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    PUSH            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    (               reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    TETRO           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    BOARD           reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    STRING_TYPE     reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    INT_TYPE        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    ADD_SCORE       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_TETRO   reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY         reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    CLEAR_LINE      reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    HARD_DROP       reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_MODE        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    SET_GAME_DIFFICULTY reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    PLAY_HW         reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    CLEAR_SCREEN    reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    DISPLAY_BOARD   reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    GET_NAME        reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    NUMBER          reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    $end            reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)
    RCURLYPAREN     reduce using rule 19 (init_stmt -> data_type ID ASSIGN expr EOL .)


state 178

    (20) init_stmt -> data_type ID ASSIGN val EOL .
    EXIT            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    BREAK           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    IF              reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    IMPORT          reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    REM             reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    NOT             reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    -               reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ID              reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ARRAY           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_SPEED       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    PUSH            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    (               reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    TETRO           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    BOARD           reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    STRING_TYPE     reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    INT_TYPE        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    ADD_SCORE       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_NEXT_TETRO reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_TETRO   reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY         reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    CLEAR_LINE      reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    HARD_DROP       reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_MODE        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    SET_GAME_DIFFICULTY reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    PLAY_HW         reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    CLEAR_SCREEN    reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    DISPLAY_BOARD   reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    GET_NAME        reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    NUMBER          reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    $end            reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)
    RCURLYPAREN     reduce using rule 20 (init_stmt -> data_type ID ASSIGN val EOL .)


state 179

    (97) push_call -> PUSH ( ID SEPARATOR ID . )
    )               shift and go to state 193


state 180

    (98) push_call -> PUSH ( ID SEPARATOR val . )
    )               shift and go to state 194


state 181

    (53) params -> params SEPARATOR param .
    )               reduce using rule 53 (params -> params SEPARATOR param .)
    SEPARATOR       reduce using rule 53 (params -> params SEPARATOR param .)


state 182

    (111) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    RCURLYPAREN     shift and go to state 195
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    expr                           shift and go to state 11
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    statement                      shift and go to state 52
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 183

    (93) rem_call -> REM ( ID SEPARATOR ID ) .
    EOL             reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    EXIT            reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    BREAK           reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    IF              reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    IMPORT          reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    REM             reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    NOT             reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    -               reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    ID              reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    ARRAY           reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    SET_SPEED       reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    PUSH            reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    (               reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    TETRO           reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    BOARD           reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    STRING_TYPE     reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    INT_TYPE        reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    ADD_SCORE       reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    DISPLAY_NEXT_TETRO reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    DISPLAY_TETRO   reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    DISPLAY         reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    CLEAR_LINE      reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    HARD_DROP       reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    SET_MODE        reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    SET_GAME_DIFFICULTY reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    PLAY_HW         reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    CLEAR_SCREEN    reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    DISPLAY_BOARD   reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    GET_NAME        reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    NUMBER          reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    $end            reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)
    RCURLYPAREN     reduce using rule 93 (rem_call -> REM ( ID SEPARATOR ID ) .)


state 184

    (94) rem_call -> REM ( ID SEPARATOR NUMBER ) .
    EOL             reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    EXIT            reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    BREAK           reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    IF              reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    IMPORT          reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    REM             reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    NOT             reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    -               reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    ID              reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    ARRAY           reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    SET_SPEED       reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    PUSH            reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    (               reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    TETRO           reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    BOARD           reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    STRING_TYPE     reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    INT_TYPE        reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    ADD_SCORE       reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    DISPLAY_NEXT_TETRO reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    DISPLAY_TETRO   reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    DISPLAY         reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    CLEAR_LINE      reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    HARD_DROP       reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    SET_MODE        reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    SET_GAME_DIFFICULTY reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    PLAY_HW         reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    CLEAR_SCREEN    reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    DISPLAY_BOARD   reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    GET_NAME        reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    NUMBER          reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    $end            reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)
    RCURLYPAREN     reduce using rule 94 (rem_call -> REM ( ID SEPARATOR NUMBER ) .)


state 185

    (95) rem_call -> REM ( array_val SEPARATOR ID ) .
    EOL             reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    EXIT            reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    BREAK           reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    IF              reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    IMPORT          reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    REM             reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    NOT             reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    -               reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    ID              reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    ARRAY           reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    SET_SPEED       reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    PUSH            reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    (               reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    TETRO           reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    BOARD           reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    STRING_TYPE     reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    INT_TYPE        reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    ADD_SCORE       reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    DISPLAY_NEXT_TETRO reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    DISPLAY_TETRO   reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    DISPLAY         reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    CLEAR_LINE      reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    HARD_DROP       reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    SET_MODE        reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    SET_GAME_DIFFICULTY reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    PLAY_HW         reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    CLEAR_SCREEN    reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    DISPLAY_BOARD   reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    GET_NAME        reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    NUMBER          reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    $end            reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)
    RCURLYPAREN     reduce using rule 95 (rem_call -> REM ( array_val SEPARATOR ID ) .)


state 186

    (96) rem_call -> REM ( array_val SEPARATOR NUMBER ) .
    EOL             reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    EXIT            reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    BREAK           reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    IF              reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    IMPORT          reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    REM             reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    NOT             reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    -               reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    ID              reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    ARRAY           reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    SET_SPEED       reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    PUSH            reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    (               reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    TETRO           reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    BOARD           reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    STRING_TYPE     reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    INT_TYPE        reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    ADD_SCORE       reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    DISPLAY_NEXT_TETRO reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    DISPLAY_TETRO   reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    DISPLAY         reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    CLEAR_LINE      reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    HARD_DROP       reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    SET_MODE        reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    SET_GAME_DIFFICULTY reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    PLAY_HW         reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    CLEAR_SCREEN    reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    DISPLAY_BOARD   reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    GET_NAME        reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    NUMBER          reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    $end            reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)
    RCURLYPAREN     reduce using rule 96 (rem_call -> REM ( array_val SEPARATOR NUMBER ) .)


state 187

    (28) set -> set SEPARATOR val .
    RBLOCKPAREN     reduce using rule 28 (set -> set SEPARATOR val .)
    SEPARATOR       reduce using rule 28 (set -> set SEPARATOR val .)


state 188

    (73) birf_wp_call -> birf_wp ( params ) .
    EOL             reduce using rule 73 (birf_wp_call -> birf_wp ( params ) .)
    )               reduce using rule 73 (birf_wp_call -> birf_wp ( params ) .)
    SEPARATOR       reduce using rule 73 (birf_wp_call -> birf_wp ( params ) .)
    RBLOCKPAREN     reduce using rule 73 (birf_wp_call -> birf_wp ( params ) .)


state 189

    (69) len_call -> LEN ( array_val ) .
    EOL             reduce using rule 69 (len_call -> LEN ( array_val ) .)
    )               reduce using rule 69 (len_call -> LEN ( array_val ) .)
    SEPARATOR       reduce using rule 69 (len_call -> LEN ( array_val ) .)
    RBLOCKPAREN     reduce using rule 69 (len_call -> LEN ( array_val ) .)


state 190

    (70) len_call -> LEN ( ID ) .
    EOL             reduce using rule 70 (len_call -> LEN ( ID ) .)
    )               reduce using rule 70 (len_call -> LEN ( ID ) .)
    SEPARATOR       reduce using rule 70 (len_call -> LEN ( ID ) .)
    RBLOCKPAREN     reduce using rule 70 (len_call -> LEN ( ID ) .)


state 191

    (67) pop_call -> POP ( array_val ) .
    EOL             reduce using rule 67 (pop_call -> POP ( array_val ) .)
    )               reduce using rule 67 (pop_call -> POP ( array_val ) .)
    SEPARATOR       reduce using rule 67 (pop_call -> POP ( array_val ) .)
    RBLOCKPAREN     reduce using rule 67 (pop_call -> POP ( array_val ) .)


state 192

    (68) pop_call -> POP ( ID ) .
    EOL             reduce using rule 68 (pop_call -> POP ( ID ) .)
    )               reduce using rule 68 (pop_call -> POP ( ID ) .)
    SEPARATOR       reduce using rule 68 (pop_call -> POP ( ID ) .)
    RBLOCKPAREN     reduce using rule 68 (pop_call -> POP ( ID ) .)


state 193

    (97) push_call -> PUSH ( ID SEPARATOR ID ) .
    EOL             reduce using rule 97 (push_call -> PUSH ( ID SEPARATOR ID ) .)


state 194

    (98) push_call -> PUSH ( ID SEPARATOR val ) .
    EOL             reduce using rule 98 (push_call -> PUSH ( ID SEPARATOR val ) .)


state 195

    (111) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_else_stmt
    (113) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE if_stmt
    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN . ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .
    ELSE            shift and go to state 196
    EXIT            reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    NOT             reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    -               reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    (               reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    NUMBER          reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 109 (if_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN .)


state 196

    (111) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_elseif_stmt
    (112) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_else_stmt
    (113) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . if_stmt
    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE . LCURLYPAREN compound_stmt RCURLYPAREN
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    LCURLYPAREN     shift and go to state 197
    IF              shift and go to state 16

    if_elseif_stmt                 shift and go to state 198
    if_else_stmt                   shift and go to state 199
    if_stmt                        shift and go to state 200

state 197

    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN . compound_stmt RCURLYPAREN
    (1) compound_stmt -> . compound_stmt statement
    (2) compound_stmt -> . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    expr                           shift and go to state 11
    compound_stmt                  shift and go to state 201
    statement                      shift and go to state 2
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 198

    (111) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .
    EXIT            reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    BREAK           reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    IF              reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    IMPORT          reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    REM             reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    NOT             reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    -               reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ID              reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ARRAY           reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_SPEED       reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    PUSH            reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    (               reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    TETRO           reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    BOARD           reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    STRING_TYPE     reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    INT_TYPE        reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    ADD_SCORE       reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_TETRO   reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY         reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    CLEAR_LINE      reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    HARD_DROP       reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_MODE        reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    PLAY_HW         reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    CLEAR_SCREEN    reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    DISPLAY_BOARD   reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    GET_NAME        reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    NUMBER          reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    $end            reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)
    RCURLYPAREN     reduce using rule 111 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt .)


state 199

    (112) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .
    EXIT            reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    BREAK           reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    IF              reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    IMPORT          reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    REM             reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    NOT             reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    -               reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ID              reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ARRAY           reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_SPEED       reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    PUSH            reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    (               reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    TETRO           reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    BOARD           reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    STRING_TYPE     reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    INT_TYPE        reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    ADD_SCORE       reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_TETRO   reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY         reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    CLEAR_LINE      reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    HARD_DROP       reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_MODE        reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    PLAY_HW         reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    CLEAR_SCREEN    reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    DISPLAY_BOARD   reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    GET_NAME        reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    NUMBER          reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    $end            reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)
    RCURLYPAREN     reduce using rule 112 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt .)


state 200

    (113) if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .
    EXIT            reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    BREAK           reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    IF              reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    IMPORT          reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    REM             reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    NOT             reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    -               reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ID              reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ARRAY           reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_SPEED       reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    PUSH            reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    (               reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    TETRO           reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    BOARD           reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    STRING_TYPE     reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    INT_TYPE        reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    ADD_SCORE       reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_NEXT_TETRO reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_TETRO   reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY         reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    CLEAR_LINE      reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    HARD_DROP       reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_MODE        reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    SET_GAME_DIFFICULTY reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    PLAY_HW         reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    CLEAR_SCREEN    reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    DISPLAY_BOARD   reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    GET_NAME        reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    NUMBER          reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    $end            reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)
    RCURLYPAREN     reduce using rule 113 (if_elseif_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt .)


state 201

    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt . RCURLYPAREN
    (1) compound_stmt -> compound_stmt . statement
    (3) statement -> . exit_stmt
    (4) statement -> . break_stmt
    (5) statement -> . if_elseif_stmt
    (6) statement -> . if_else_stmt
    (7) statement -> . if_stmt
    (8) statement -> . import_stmt
    (9) statement -> . rem_call
    (10) statement -> . bivf
    (11) statement -> . expr
    (12) statement -> . reass_stmt
    (13) statement -> . init_stmt
    (107) exit_stmt -> . EXIT EOL
    (106) break_stmt -> . BREAK EOL
    (111) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_elseif_stmt
    (112) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_else_stmt
    (113) if_elseif_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE if_stmt
    (110) if_else_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN
    (109) if_stmt -> . IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN
    (14) import_stmt -> . IMPORT GAME EOL
    (93) rem_call -> . REM ( ID SEPARATOR ID )
    (94) rem_call -> . REM ( ID SEPARATOR NUMBER )
    (95) rem_call -> . REM ( array_val SEPARATOR ID )
    (96) rem_call -> . REM ( array_val SEPARATOR NUMBER )
    (101) bivf -> . set_speed_call EOL
    (102) bivf -> . rem_call EOL
    (103) bivf -> . push_call EOL
    (104) bivf -> . bivf_wp_call EOL
    (105) bivf -> . bivf_wop_call EOL
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . NOT expr
    (36) expr -> . expr EE expr
    (37) expr -> . expr NE expr
    (38) expr -> . expr GTE expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . expr % expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . factor
    (48) expr -> . - factor
    (15) reass_stmt -> . ID ASSIGN expr EOL
    (16) reass_stmt -> . ID ASSIGN array_val EOL
    (17) reass_stmt -> . ID ASSIGN val EOL
    (18) init_stmt -> . ARRAY ID ASSIGN array_val EOL
    (19) init_stmt -> . data_type ID ASSIGN expr EOL
    (20) init_stmt -> . data_type ID ASSIGN val EOL
    (90) set_speed_call -> . SET_SPEED ( HARD )
    (91) set_speed_call -> . SET_SPEED ( MEDIUM )
    (92) set_speed_call -> . SET_SPEED ( EASY )
    (97) push_call -> . PUSH ( ID SEPARATOR ID )
    (98) push_call -> . PUSH ( ID SEPARATOR val )
    (100) bivf_wp_call -> . bivf_wp ( params )
    (99) bivf_wop_call -> . bivf_wop ( )
    (49) factor -> . ( expr )
    (50) factor -> . operand
    (21) data_type -> . TETRO
    (22) data_type -> . BOARD
    (23) data_type -> . ARRAY
    (24) data_type -> . STRING_TYPE
    (25) data_type -> . INT_TYPE
    (82) bivf_wp -> . PUSH
    (83) bivf_wp -> . REM
    (84) bivf_wp -> . ADD_SCORE
    (85) bivf_wp -> . DISPLAY_NEXT_TETRO
    (86) bivf_wp -> . DISPLAY_TETRO
    (87) bivf_wp -> . DISPLAY
    (88) bivf_wp -> . CLEAR_LINE
    (89) bivf_wp -> . HARD_DROP
    (76) bivf_wop -> . SET_MODE
    (77) bivf_wop -> . SET_GAME_DIFFICULTY
    (78) bivf_wop -> . PLAY_HW
    (79) bivf_wop -> . CLEAR_SCREEN
    (80) bivf_wop -> . DISPLAY_BOARD
    (81) bivf_wop -> . GET_NAME
    (51) operand -> . NUMBER
    (52) operand -> . ID
    RCURLYPAREN     shift and go to state 202
    EXIT            shift and go to state 14
    BREAK           shift and go to state 15
    IF              shift and go to state 16
    IMPORT          shift and go to state 18
    REM             shift and go to state 19
    NOT             shift and go to state 26
    -               shift and go to state 27
    ID              shift and go to state 20
    ARRAY           shift and go to state 29
    SET_SPEED       shift and go to state 31
    PUSH            shift and go to state 32
    (               shift and go to state 17
    TETRO           shift and go to state 36
    BOARD           shift and go to state 37
    STRING_TYPE     shift and go to state 38
    INT_TYPE        shift and go to state 39
    ADD_SCORE       shift and go to state 40
    DISPLAY_NEXT_TETRO shift and go to state 41
    DISPLAY_TETRO   shift and go to state 42
    DISPLAY         shift and go to state 43
    CLEAR_LINE      shift and go to state 44
    HARD_DROP       shift and go to state 45
    SET_MODE        shift and go to state 46
    SET_GAME_DIFFICULTY shift and go to state 47
    PLAY_HW         shift and go to state 48
    CLEAR_SCREEN    shift and go to state 49
    DISPLAY_BOARD   shift and go to state 50
    GET_NAME        shift and go to state 51
    NUMBER          shift and go to state 21

    expr                           shift and go to state 11
    statement                      shift and go to state 52
    exit_stmt                      shift and go to state 3
    break_stmt                     shift and go to state 4
    if_elseif_stmt                 shift and go to state 5
    if_else_stmt                   shift and go to state 6
    if_stmt                        shift and go to state 7
    import_stmt                    shift and go to state 8
    rem_call                       shift and go to state 9
    bivf                           shift and go to state 10
    reass_stmt                     shift and go to state 12
    init_stmt                      shift and go to state 13
    set_speed_call                 shift and go to state 22
    push_call                      shift and go to state 23
    bivf_wp_call                   shift and go to state 24
    bivf_wop_call                  shift and go to state 25
    factor                         shift and go to state 28
    data_type                      shift and go to state 30
    bivf_wp                        shift and go to state 33
    bivf_wop                       shift and go to state 34
    operand                        shift and go to state 35

state 202

    (110) if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .
    EXIT            reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    BREAK           reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    IF              reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    IMPORT          reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    REM             reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    NOT             reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    -               reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ID              reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ARRAY           reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_SPEED       reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    PUSH            reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    (               reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    TETRO           reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    BOARD           reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    STRING_TYPE     reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    INT_TYPE        reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    ADD_SCORE       reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_NEXT_TETRO reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_TETRO   reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY         reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_LINE      reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    HARD_DROP       reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_MODE        reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    SET_GAME_DIFFICULTY reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    PLAY_HW         reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    CLEAR_SCREEN    reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    DISPLAY_BOARD   reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    GET_NAME        reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    NUMBER          reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    $end            reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)
    RCURLYPAREN     reduce using rule 110 (if_else_stmt -> IF ( expr ) LCURLYPAREN compound_stmt RCURLYPAREN ELSE LCURLYPAREN compound_stmt RCURLYPAREN .)


Conflicts:

shift/reduce conflict for - in state 11 resolved as shift
shift/reduce conflict for ( in state 19 resolved as shift
shift/reduce conflict for ID in state 29 resolved as shift
shift/reduce conflict for ( in state 32 resolved as shift
reduce/reduce conflict in state 110 resolved using rule val -> NUMBER
rejected rule (operand -> NUMBER) in state 110